
SunnyMinds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf0  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800bf3c  0800bf3c  0000cf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c148  0800c148  0000e06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c148  0800c148  0000d148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c150  0800c150  0000e06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c150  0800c150  0000d150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c154  0800c154  0000d154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800c158  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016f0  2000006c  0800c1c4  0000e06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000175c  0800c1c4  0000e75c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025f9e  00000000  00000000  0000e0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006730  00000000  00000000  00034040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0003a770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e9  00000000  00000000  0003bec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003808a  00000000  00000000  0003cfa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a44d  00000000  00000000  00075033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014afeb  00000000  00000000  0009f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ea46b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b20  00000000  00000000  001ea4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000104  00000000  00000000  001effd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000006c 	.word	0x2000006c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800bf24 	.word	0x0800bf24

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000070 	.word	0x20000070
 8000288:	0800bf24 	.word	0x0800bf24

0800028c <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 800028c:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800028e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000292:	4917      	ldr	r1, [pc, #92]	@ (80002f0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000294:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000298:	4816      	ldr	r0, [pc, #88]	@ (80002f4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029a:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 800029c:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a2:	4815      	ldr	r0, [pc, #84]	@ (80002f8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a4:	4912      	ldr	r1, [pc, #72]	@ (80002f0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002a6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002a8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002aa:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ae:	4913      	ldr	r1, [pc, #76]	@ (80002fc <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002b6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002b8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002bc:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c0:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002c8:	490d      	ldr	r1, [pc, #52]	@ (8000300 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ca:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_BadHandler>

080002d4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002dc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002de:	f000 f897 	bl	8000410 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002e6:	4770      	bx	lr

080002e8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002e8:	f7ff bffe 	b.w	80002e8 <__tx_NMIHandler>

080002ec <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002f8:	20000dd8 	.word	0x20000dd8
    LDR     r1, =SYSTICK_CYCLES
 80002fc:	0026259f 	.word	0x0026259f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000300:	40ff0000 	.word	0x40ff0000

08000304 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000304:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000308:	4a2d      	ldr	r2, [pc, #180]	@ (80003c0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800030c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000310:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000314:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000318:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800031e:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000322:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 8000326:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032a:	f3bf 8f6f 	isb	sy

0800032e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800032e:	e7fe      	b.n	800032e <__tx_wait_here>

08000330 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000330:	4824      	ldr	r0, [pc, #144]	@ (80003c4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000332:	4a25      	ldr	r2, [pc, #148]	@ (80003c8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000334:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000338:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033a:	b191      	cbz	r1, 8000362 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800033c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800033e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000342:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000346:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034a:	d101      	bne.n	8000350 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800034c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000350 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000350:	4c1e      	ldr	r4, [pc, #120]	@ (80003cc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000352:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000356:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800035c:	b10d      	cbz	r5, 8000362 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800035e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000360:	6023      	str	r3, [r4, #0]

08000362 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000362:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000364:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000366:	b1d1      	cbz	r1, 800039e <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000368:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i

0800036c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800036c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800036e:	4c17      	ldr	r4, [pc, #92]	@ (80003cc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000370:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000372:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000376:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000378:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800037e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000382:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000386:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800038e:	d101      	bne.n	8000394 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000390:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000394 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000394:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000398:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 800039c:	4770      	bx	lr

0800039e <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800039e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a4:	b909      	cbnz	r1, 80003aa <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a8:	e7f9      	b.n	800039e <__tx_ts_wait>

080003aa <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003aa:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003ae:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b2:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b8:	e7d8      	b.n	800036c <__tx_ts_restore>
 80003ba:	bf00      	nop

080003bc <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003bc:	4770      	bx	lr
 80003be:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c0:	20000e74 	.word	0x20000e74
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c4:	20000ddc 	.word	0x20000ddc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c8:	20000de0 	.word	0x20000de0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003cc:	200013e0 	.word	0x200013e0

080003d0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d6:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003da:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003de:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ea:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003ec:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ee:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f4:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f6:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fa:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003fc:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000402:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000404:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000406:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800040c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040e:	4770      	bx	lr

08000410 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000410:	4922      	ldr	r1, [pc, #136]	@ (800049c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000412:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000414:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000418:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041a:	4b21      	ldr	r3, [pc, #132]	@ (80004a0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800041c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041e:	b13a      	cbz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000420:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000424:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000426:	b91a      	cbnz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000428:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042e:	6018      	str	r0, [r3, #0]

08000430 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000430:	491d      	ldr	r1, [pc, #116]	@ (80004a8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000432:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000434:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000436:	b122      	cbz	r2, 8000442 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000438:	4b1c      	ldr	r3, [pc, #112]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000440:	e008      	b.n	8000454 <__tx_timer_done>

08000442 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000442:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000446:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000448:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800044c:	d101      	bne.n	8000452 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044e:	4b19      	ldr	r3, [pc, #100]	@ (80004b4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000450:	6818      	ldr	r0, [r3, #0]

08000452 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000452:	6008      	str	r0, [r1, #0]

08000454 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000454:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000458:	b912      	cbnz	r2, 8000460 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045a:	4914      	ldr	r1, [pc, #80]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800045c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045e:	b1c8      	cbz	r0, 8000494 <__tx_timer_nothing_expired>

08000460 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000460:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000462:	4912      	ldr	r1, [pc, #72]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000464:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000466:	b108      	cbz	r0, 800046c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000468:	f009 ff12 	bl	800a290 <_tx_timer_expiration_process>

0800046c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800046c:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000470:	b172      	cbz	r2, 8000490 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000472:	f009 fe7f 	bl	800a174 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000476:	4810      	ldr	r0, [pc, #64]	@ (80004b8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000478:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047a:	b949      	cbnz	r1, 8000490 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800047c:	480f      	ldr	r0, [pc, #60]	@ (80004bc <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000480:	4a0f      	ldr	r2, [pc, #60]	@ (80004c0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000482:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000484:	480f      	ldr	r0, [pc, #60]	@ (80004c4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800048c:	d000      	beq.n	8000490 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048e:	6002      	str	r2, [r0, #0]

08000490 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000490:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000494 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000494:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000498:	4770      	bx	lr
 800049a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800049c:	20000e80 	.word	0x20000e80
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a0:	200013e0 	.word	0x200013e0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a4:	20000e84 	.word	0x20000e84
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a8:	20000f10 	.word	0x20000f10
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004ac:	20000f14 	.word	0x20000f14
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b0:	20000f0c 	.word	0x20000f0c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b4:	20000f08 	.word	0x20000f08
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b8:	20000e74 	.word	0x20000e74
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004bc:	20000ddc 	.word	0x20000ddc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c0:	20000de0 	.word	0x20000de0
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c4:	e000ed04 	.word	0xe000ed04

080004c8 <__aeabi_uldivmod>:
 80004c8:	b953      	cbnz	r3, 80004e0 <__aeabi_uldivmod+0x18>
 80004ca:	b94a      	cbnz	r2, 80004e0 <__aeabi_uldivmod+0x18>
 80004cc:	2900      	cmp	r1, #0
 80004ce:	bf08      	it	eq
 80004d0:	2800      	cmpeq	r0, #0
 80004d2:	bf1c      	itt	ne
 80004d4:	f04f 31ff 	movne.w	r1, #4294967295
 80004d8:	f04f 30ff 	movne.w	r0, #4294967295
 80004dc:	f000 b97e 	b.w	80007dc <__aeabi_idiv0>
 80004e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80004e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004e8:	f000 f806 	bl	80004f8 <__udivmoddi4>
 80004ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004f4:	b004      	add	sp, #16
 80004f6:	4770      	bx	lr

080004f8 <__udivmoddi4>:
 80004f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004fc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80004fe:	460c      	mov	r4, r1
 8000500:	2b00      	cmp	r3, #0
 8000502:	d14d      	bne.n	80005a0 <__udivmoddi4+0xa8>
 8000504:	428a      	cmp	r2, r1
 8000506:	460f      	mov	r7, r1
 8000508:	4684      	mov	ip, r0
 800050a:	4696      	mov	lr, r2
 800050c:	fab2 f382 	clz	r3, r2
 8000510:	d960      	bls.n	80005d4 <__udivmoddi4+0xdc>
 8000512:	b14b      	cbz	r3, 8000528 <__udivmoddi4+0x30>
 8000514:	fa02 fe03 	lsl.w	lr, r2, r3
 8000518:	f1c3 0220 	rsb	r2, r3, #32
 800051c:	409f      	lsls	r7, r3
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f202 	lsr.w	r2, r0, r2
 8000526:	4317      	orrs	r7, r2
 8000528:	ea4f 461e 	mov.w	r6, lr, lsr #16
 800052c:	fa1f f48e 	uxth.w	r4, lr
 8000530:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000534:	fbb7 f1f6 	udiv	r1, r7, r6
 8000538:	fb06 7711 	mls	r7, r6, r1, r7
 800053c:	fb01 f004 	mul.w	r0, r1, r4
 8000540:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000544:	4290      	cmp	r0, r2
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x62>
 8000548:	eb1e 0202 	adds.w	r2, lr, r2
 800054c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000550:	d202      	bcs.n	8000558 <__udivmoddi4+0x60>
 8000552:	4290      	cmp	r0, r2
 8000554:	f200 812d 	bhi.w	80007b2 <__udivmoddi4+0x2ba>
 8000558:	4639      	mov	r1, r7
 800055a:	1a12      	subs	r2, r2, r0
 800055c:	fa1f fc8c 	uxth.w	ip, ip
 8000560:	fbb2 f0f6 	udiv	r0, r2, r6
 8000564:	fb06 2210 	mls	r2, r6, r0, r2
 8000568:	fb00 f404 	mul.w	r4, r0, r4
 800056c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000570:	4564      	cmp	r4, ip
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x8e>
 8000574:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000578:	f100 32ff 	add.w	r2, r0, #4294967295
 800057c:	d202      	bcs.n	8000584 <__udivmoddi4+0x8c>
 800057e:	4564      	cmp	r4, ip
 8000580:	f200 811a 	bhi.w	80007b8 <__udivmoddi4+0x2c0>
 8000584:	4610      	mov	r0, r2
 8000586:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800058a:	ebac 0c04 	sub.w	ip, ip, r4
 800058e:	2100      	movs	r1, #0
 8000590:	b125      	cbz	r5, 800059c <__udivmoddi4+0xa4>
 8000592:	fa2c f303 	lsr.w	r3, ip, r3
 8000596:	2200      	movs	r2, #0
 8000598:	e9c5 3200 	strd	r3, r2, [r5]
 800059c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d905      	bls.n	80005b0 <__udivmoddi4+0xb8>
 80005a4:	b10d      	cbz	r5, 80005aa <__udivmoddi4+0xb2>
 80005a6:	e9c5 0100 	strd	r0, r1, [r5]
 80005aa:	2100      	movs	r1, #0
 80005ac:	4608      	mov	r0, r1
 80005ae:	e7f5      	b.n	800059c <__udivmoddi4+0xa4>
 80005b0:	fab3 f183 	clz	r1, r3
 80005b4:	2900      	cmp	r1, #0
 80005b6:	d14d      	bne.n	8000654 <__udivmoddi4+0x15c>
 80005b8:	42a3      	cmp	r3, r4
 80005ba:	f0c0 80f2 	bcc.w	80007a2 <__udivmoddi4+0x2aa>
 80005be:	4290      	cmp	r0, r2
 80005c0:	f080 80ef 	bcs.w	80007a2 <__udivmoddi4+0x2aa>
 80005c4:	4606      	mov	r6, r0
 80005c6:	4623      	mov	r3, r4
 80005c8:	4608      	mov	r0, r1
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d0e6      	beq.n	800059c <__udivmoddi4+0xa4>
 80005ce:	e9c5 6300 	strd	r6, r3, [r5]
 80005d2:	e7e3      	b.n	800059c <__udivmoddi4+0xa4>
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	f040 80a2 	bne.w	800071e <__udivmoddi4+0x226>
 80005da:	1a8a      	subs	r2, r1, r2
 80005dc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80005e0:	fa1f f68e 	uxth.w	r6, lr
 80005e4:	2101      	movs	r1, #1
 80005e6:	fbb2 f4f7 	udiv	r4, r2, r7
 80005ea:	fb07 2014 	mls	r0, r7, r4, r2
 80005ee:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80005f2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80005f6:	fb06 f004 	mul.w	r0, r6, r4
 80005fa:	4290      	cmp	r0, r2
 80005fc:	d90f      	bls.n	800061e <__udivmoddi4+0x126>
 80005fe:	eb1e 0202 	adds.w	r2, lr, r2
 8000602:	f104 38ff 	add.w	r8, r4, #4294967295
 8000606:	bf2c      	ite	cs
 8000608:	f04f 0901 	movcs.w	r9, #1
 800060c:	f04f 0900 	movcc.w	r9, #0
 8000610:	4290      	cmp	r0, r2
 8000612:	d903      	bls.n	800061c <__udivmoddi4+0x124>
 8000614:	f1b9 0f00 	cmp.w	r9, #0
 8000618:	f000 80c8 	beq.w	80007ac <__udivmoddi4+0x2b4>
 800061c:	4644      	mov	r4, r8
 800061e:	1a12      	subs	r2, r2, r0
 8000620:	fa1f fc8c 	uxth.w	ip, ip
 8000624:	fbb2 f0f7 	udiv	r0, r2, r7
 8000628:	fb07 2210 	mls	r2, r7, r0, r2
 800062c:	fb00 f606 	mul.w	r6, r0, r6
 8000630:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000634:	4566      	cmp	r6, ip
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x152>
 8000638:	eb1e 0c0c 	adds.w	ip, lr, ip
 800063c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000640:	d202      	bcs.n	8000648 <__udivmoddi4+0x150>
 8000642:	4566      	cmp	r6, ip
 8000644:	f200 80bb 	bhi.w	80007be <__udivmoddi4+0x2c6>
 8000648:	4610      	mov	r0, r2
 800064a:	ebac 0c06 	sub.w	ip, ip, r6
 800064e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000652:	e79d      	b.n	8000590 <__udivmoddi4+0x98>
 8000654:	f1c1 0620 	rsb	r6, r1, #32
 8000658:	408b      	lsls	r3, r1
 800065a:	fa04 fe01 	lsl.w	lr, r4, r1
 800065e:	fa22 f706 	lsr.w	r7, r2, r6
 8000662:	fa20 fc06 	lsr.w	ip, r0, r6
 8000666:	40f4      	lsrs	r4, r6
 8000668:	408a      	lsls	r2, r1
 800066a:	431f      	orrs	r7, r3
 800066c:	ea4e 030c 	orr.w	r3, lr, ip
 8000670:	fa00 fe01 	lsl.w	lr, r0, r1
 8000674:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000678:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800067c:	fa1f fc87 	uxth.w	ip, r7
 8000680:	fbb4 f0f8 	udiv	r0, r4, r8
 8000684:	fb08 4410 	mls	r4, r8, r0, r4
 8000688:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800068c:	fb00 f90c 	mul.w	r9, r0, ip
 8000690:	45a1      	cmp	r9, r4
 8000692:	d90e      	bls.n	80006b2 <__udivmoddi4+0x1ba>
 8000694:	193c      	adds	r4, r7, r4
 8000696:	f100 3aff 	add.w	sl, r0, #4294967295
 800069a:	bf2c      	ite	cs
 800069c:	f04f 0b01 	movcs.w	fp, #1
 80006a0:	f04f 0b00 	movcc.w	fp, #0
 80006a4:	45a1      	cmp	r9, r4
 80006a6:	d903      	bls.n	80006b0 <__udivmoddi4+0x1b8>
 80006a8:	f1bb 0f00 	cmp.w	fp, #0
 80006ac:	f000 8093 	beq.w	80007d6 <__udivmoddi4+0x2de>
 80006b0:	4650      	mov	r0, sl
 80006b2:	eba4 0409 	sub.w	r4, r4, r9
 80006b6:	fa1f f983 	uxth.w	r9, r3
 80006ba:	fbb4 f3f8 	udiv	r3, r4, r8
 80006be:	fb08 4413 	mls	r4, r8, r3, r4
 80006c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80006c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006ca:	45a4      	cmp	ip, r4
 80006cc:	d906      	bls.n	80006dc <__udivmoddi4+0x1e4>
 80006ce:	193c      	adds	r4, r7, r4
 80006d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80006d4:	d201      	bcs.n	80006da <__udivmoddi4+0x1e2>
 80006d6:	45a4      	cmp	ip, r4
 80006d8:	d87a      	bhi.n	80007d0 <__udivmoddi4+0x2d8>
 80006da:	4643      	mov	r3, r8
 80006dc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80006e0:	eba4 040c 	sub.w	r4, r4, ip
 80006e4:	fba0 9802 	umull	r9, r8, r0, r2
 80006e8:	4544      	cmp	r4, r8
 80006ea:	46cc      	mov	ip, r9
 80006ec:	4643      	mov	r3, r8
 80006ee:	d302      	bcc.n	80006f6 <__udivmoddi4+0x1fe>
 80006f0:	d106      	bne.n	8000700 <__udivmoddi4+0x208>
 80006f2:	45ce      	cmp	lr, r9
 80006f4:	d204      	bcs.n	8000700 <__udivmoddi4+0x208>
 80006f6:	3801      	subs	r0, #1
 80006f8:	ebb9 0c02 	subs.w	ip, r9, r2
 80006fc:	eb68 0307 	sbc.w	r3, r8, r7
 8000700:	b15d      	cbz	r5, 800071a <__udivmoddi4+0x222>
 8000702:	ebbe 020c 	subs.w	r2, lr, ip
 8000706:	eb64 0403 	sbc.w	r4, r4, r3
 800070a:	fa04 f606 	lsl.w	r6, r4, r6
 800070e:	fa22 f301 	lsr.w	r3, r2, r1
 8000712:	40cc      	lsrs	r4, r1
 8000714:	431e      	orrs	r6, r3
 8000716:	e9c5 6400 	strd	r6, r4, [r5]
 800071a:	2100      	movs	r1, #0
 800071c:	e73e      	b.n	800059c <__udivmoddi4+0xa4>
 800071e:	fa02 fe03 	lsl.w	lr, r2, r3
 8000722:	f1c3 0120 	rsb	r1, r3, #32
 8000726:	fa04 f203 	lsl.w	r2, r4, r3
 800072a:	fa00 fc03 	lsl.w	ip, r0, r3
 800072e:	40cc      	lsrs	r4, r1
 8000730:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000734:	fa20 f101 	lsr.w	r1, r0, r1
 8000738:	fa1f f68e 	uxth.w	r6, lr
 800073c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000740:	430a      	orrs	r2, r1
 8000742:	fb07 4410 	mls	r4, r7, r0, r4
 8000746:	0c11      	lsrs	r1, r2, #16
 8000748:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800074c:	fb00 f406 	mul.w	r4, r0, r6
 8000750:	428c      	cmp	r4, r1
 8000752:	d90e      	bls.n	8000772 <__udivmoddi4+0x27a>
 8000754:	eb1e 0101 	adds.w	r1, lr, r1
 8000758:	f100 38ff 	add.w	r8, r0, #4294967295
 800075c:	bf2c      	ite	cs
 800075e:	f04f 0901 	movcs.w	r9, #1
 8000762:	f04f 0900 	movcc.w	r9, #0
 8000766:	428c      	cmp	r4, r1
 8000768:	d902      	bls.n	8000770 <__udivmoddi4+0x278>
 800076a:	f1b9 0f00 	cmp.w	r9, #0
 800076e:	d02c      	beq.n	80007ca <__udivmoddi4+0x2d2>
 8000770:	4640      	mov	r0, r8
 8000772:	1b09      	subs	r1, r1, r4
 8000774:	b292      	uxth	r2, r2
 8000776:	fbb1 f4f7 	udiv	r4, r1, r7
 800077a:	fb07 1114 	mls	r1, r7, r4, r1
 800077e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000782:	fb04 f106 	mul.w	r1, r4, r6
 8000786:	4291      	cmp	r1, r2
 8000788:	d907      	bls.n	800079a <__udivmoddi4+0x2a2>
 800078a:	eb1e 0202 	adds.w	r2, lr, r2
 800078e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000792:	d201      	bcs.n	8000798 <__udivmoddi4+0x2a0>
 8000794:	4291      	cmp	r1, r2
 8000796:	d815      	bhi.n	80007c4 <__udivmoddi4+0x2cc>
 8000798:	4644      	mov	r4, r8
 800079a:	1a52      	subs	r2, r2, r1
 800079c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 80007a0:	e721      	b.n	80005e6 <__udivmoddi4+0xee>
 80007a2:	1a86      	subs	r6, r0, r2
 80007a4:	eb64 0303 	sbc.w	r3, r4, r3
 80007a8:	2001      	movs	r0, #1
 80007aa:	e70e      	b.n	80005ca <__udivmoddi4+0xd2>
 80007ac:	3c02      	subs	r4, #2
 80007ae:	4472      	add	r2, lr
 80007b0:	e735      	b.n	800061e <__udivmoddi4+0x126>
 80007b2:	3902      	subs	r1, #2
 80007b4:	4472      	add	r2, lr
 80007b6:	e6d0      	b.n	800055a <__udivmoddi4+0x62>
 80007b8:	44f4      	add	ip, lr
 80007ba:	3802      	subs	r0, #2
 80007bc:	e6e3      	b.n	8000586 <__udivmoddi4+0x8e>
 80007be:	44f4      	add	ip, lr
 80007c0:	3802      	subs	r0, #2
 80007c2:	e742      	b.n	800064a <__udivmoddi4+0x152>
 80007c4:	3c02      	subs	r4, #2
 80007c6:	4472      	add	r2, lr
 80007c8:	e7e7      	b.n	800079a <__udivmoddi4+0x2a2>
 80007ca:	3802      	subs	r0, #2
 80007cc:	4471      	add	r1, lr
 80007ce:	e7d0      	b.n	8000772 <__udivmoddi4+0x27a>
 80007d0:	3b02      	subs	r3, #2
 80007d2:	443c      	add	r4, r7
 80007d4:	e782      	b.n	80006dc <__udivmoddi4+0x1e4>
 80007d6:	3802      	subs	r0, #2
 80007d8:	443c      	add	r4, r7
 80007da:	e76a      	b.n	80006b2 <__udivmoddi4+0x1ba>

080007dc <__aeabi_idiv0>:
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop

080007e0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007ec:	2334      	movs	r3, #52	@ 0x34
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000830 <tx_application_define+0x50>)
 80007f6:	490f      	ldr	r1, [pc, #60]	@ (8000834 <tx_application_define+0x54>)
 80007f8:	480f      	ldr	r0, [pc, #60]	@ (8000838 <tx_application_define+0x58>)
 80007fa:	f009 fff3 	bl	800a7e4 <_txe_byte_pool_create>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d003      	beq.n	800080c <tx_application_define+0x2c>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Error */
    printf("[ERROR] Tx App memory pool create failed!\n\r");
 8000804:	480d      	ldr	r0, [pc, #52]	@ (800083c <tx_application_define+0x5c>)
 8000806:	f00a fd5b 	bl	800b2c0 <iprintf>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800080a:	e00c      	b.n	8000826 <tx_application_define+0x46>
    memory_ptr = (VOID *)&tx_app_byte_pool;
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <tx_application_define+0x58>)
 800080e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000810:	68b8      	ldr	r0, [r7, #8]
 8000812:	f000 f815 	bl	8000840 <App_ThreadX_Init>
 8000816:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d003      	beq.n	8000826 <tx_application_define+0x46>
          Error_Handler();
 800081e:	f000 fa1d 	bl	8000c5c <Error_Handler>
      {
 8000822:	bf00      	nop
 8000824:	e7fb      	b.n	800081e <tx_application_define+0x3e>
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000088 	.word	0x20000088
 8000834:	0800bf3c 	.word	0x0800bf3c
 8000838:	20000c88 	.word	0x20000c88
 800083c:	0800bf50 	.word	0x0800bf50

08000840 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	@ 0x38
 8000844:	af08      	add	r7, sp, #32
 8000846:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	613b      	str	r3, [r7, #16]

  CHAR *pointer;

  /* Allocate the stack for Main Thread  */
  if (tx_byte_allocate(byte_pool, (VOID**) &pointer,
 8000850:	f107 010c 	add.w	r1, r7, #12
 8000854:	2300      	movs	r3, #0
 8000856:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800085a:	6938      	ldr	r0, [r7, #16]
 800085c:	f009 ff4e 	bl	800a6fc <_txe_byte_allocate>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <App_ThreadX_Init+0x2a>
                       TX_APP_MODULE_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 8000866:	2302      	movs	r3, #2
 8000868:	e073      	b.n	8000952 <App_ThreadX_Init+0x112>
  }

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  if (tx_thread_create(&thread_moduletest, "ModuleTest Thread", Moduletest_thread_entry, 0, pointer,
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	22b0      	movs	r2, #176	@ 0xb0
 800086e:	9206      	str	r2, [sp, #24]
 8000870:	2201      	movs	r2, #1
 8000872:	9205      	str	r2, [sp, #20]
 8000874:	2200      	movs	r2, #0
 8000876:	9204      	str	r2, [sp, #16]
 8000878:	220c      	movs	r2, #12
 800087a:	9203      	str	r2, [sp, #12]
 800087c:	220c      	movs	r2, #12
 800087e:	9202      	str	r2, [sp, #8]
 8000880:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000884:	9201      	str	r2, [sp, #4]
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2300      	movs	r3, #0
 800088a:	4a34      	ldr	r2, [pc, #208]	@ (800095c <App_ThreadX_Init+0x11c>)
 800088c:	4934      	ldr	r1, [pc, #208]	@ (8000960 <App_ThreadX_Init+0x120>)
 800088e:	4835      	ldr	r0, [pc, #212]	@ (8000964 <App_ThreadX_Init+0x124>)
 8000890:	f00a f966 	bl	800ab60 <_txe_thread_create>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <App_ThreadX_Init+0x5e>
                       TX_APP_MODULE_STACK_SIZE, MODULETEST_PRIORITY, MODULETEST_PRIORITY,
                       TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 800089a:	230e      	movs	r3, #14
 800089c:	e059      	b.n	8000952 <App_ThreadX_Init+0x112>
  }

  // LED1 thread create
  if (tx_byte_allocate(byte_pool, (VOID**) &pointer,
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2300      	movs	r3, #0
 80008a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a8:	6938      	ldr	r0, [r7, #16]
 80008aa:	f009 ff27 	bl	800a6fc <_txe_byte_allocate>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <App_ThreadX_Init+0x78>
                       TX_APP_LEDCHECK_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 80008b4:	2302      	movs	r3, #2
 80008b6:	e04c      	b.n	8000952 <App_ThreadX_Init+0x112>
  }
  if (tx_thread_create(&thread_Led1, "LED1 Thread", LED1_thread_entry, 0, pointer,
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	22b0      	movs	r2, #176	@ 0xb0
 80008bc:	9206      	str	r2, [sp, #24]
 80008be:	2200      	movs	r2, #0
 80008c0:	9205      	str	r2, [sp, #20]
 80008c2:	2200      	movs	r2, #0
 80008c4:	9204      	str	r2, [sp, #16]
 80008c6:	220c      	movs	r2, #12
 80008c8:	9203      	str	r2, [sp, #12]
 80008ca:	220c      	movs	r2, #12
 80008cc:	9202      	str	r2, [sp, #8]
 80008ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008d2:	9201      	str	r2, [sp, #4]
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2300      	movs	r3, #0
 80008d8:	4a23      	ldr	r2, [pc, #140]	@ (8000968 <App_ThreadX_Init+0x128>)
 80008da:	4924      	ldr	r1, [pc, #144]	@ (800096c <App_ThreadX_Init+0x12c>)
 80008dc:	4824      	ldr	r0, [pc, #144]	@ (8000970 <App_ThreadX_Init+0x130>)
 80008de:	f00a f93f 	bl	800ab60 <_txe_thread_create>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <App_ThreadX_Init+0xac>
                       TX_APP_LEDCHECK_STACK_SIZE, MODULETEST_PRIORITY, MODULETEST_PRIORITY,
                       TX_NO_TIME_SLICE, TX_DONT_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 80008e8:	230e      	movs	r3, #14
 80008ea:	e032      	b.n	8000952 <App_ThreadX_Init+0x112>
  }

  // LED2 thread create
  if (tx_byte_allocate(byte_pool, (VOID**) &pointer,
 80008ec:	f107 010c 	add.w	r1, r7, #12
 80008f0:	2300      	movs	r3, #0
 80008f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f6:	6938      	ldr	r0, [r7, #16]
 80008f8:	f009 ff00 	bl	800a6fc <_txe_byte_allocate>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <App_ThreadX_Init+0xc6>
                       TX_APP_LEDCHECK_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 8000902:	2302      	movs	r3, #2
 8000904:	e025      	b.n	8000952 <App_ThreadX_Init+0x112>
  }
  if (tx_thread_create(&thread_Led2, "LED2 Thread", LED2_thread_entry, 0, pointer,
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	22b0      	movs	r2, #176	@ 0xb0
 800090a:	9206      	str	r2, [sp, #24]
 800090c:	2200      	movs	r2, #0
 800090e:	9205      	str	r2, [sp, #20]
 8000910:	2200      	movs	r2, #0
 8000912:	9204      	str	r2, [sp, #16]
 8000914:	220c      	movs	r2, #12
 8000916:	9203      	str	r2, [sp, #12]
 8000918:	220c      	movs	r2, #12
 800091a:	9202      	str	r2, [sp, #8]
 800091c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000920:	9201      	str	r2, [sp, #4]
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2300      	movs	r3, #0
 8000926:	4a13      	ldr	r2, [pc, #76]	@ (8000974 <App_ThreadX_Init+0x134>)
 8000928:	4913      	ldr	r1, [pc, #76]	@ (8000978 <App_ThreadX_Init+0x138>)
 800092a:	4814      	ldr	r0, [pc, #80]	@ (800097c <App_ThreadX_Init+0x13c>)
 800092c:	f00a f918 	bl	800ab60 <_txe_thread_create>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <App_ThreadX_Init+0xfa>
                       TX_APP_LEDCHECK_STACK_SIZE, MODULETEST_PRIORITY, MODULETEST_PRIORITY,
                       TX_NO_TIME_SLICE, TX_DONT_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 8000936:	230e      	movs	r3, #14
 8000938:	e00b      	b.n	8000952 <App_ThreadX_Init+0x112>
  }

  /* Create Semaphore.  */
  if (tx_semaphore_create(&semaphore_ledcheck, "LED Test", 0) != TX_SUCCESS)
 800093a:	231c      	movs	r3, #28
 800093c:	2200      	movs	r2, #0
 800093e:	4910      	ldr	r1, [pc, #64]	@ (8000980 <App_ThreadX_Init+0x140>)
 8000940:	4810      	ldr	r0, [pc, #64]	@ (8000984 <App_ThreadX_Init+0x144>)
 8000942:	f009 ffef 	bl	800a924 <_txe_semaphore_create>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <App_ThreadX_Init+0x110>
  {
    return TX_SEMAPHORE_ERROR;
 800094c:	230c      	movs	r3, #12
 800094e:	e000      	b.n	8000952 <App_ThreadX_Init+0x112>



  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000950:	697b      	ldr	r3, [r7, #20]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	0800af79 	.word	0x0800af79
 8000960:	0800bf7c 	.word	0x0800bf7c
 8000964:	200013e4 	.word	0x200013e4
 8000968:	0800aee9 	.word	0x0800aee9
 800096c:	0800bf90 	.word	0x0800bf90
 8000970:	20001494 	.word	0x20001494
 8000974:	0800af15 	.word	0x0800af15
 8000978:	0800bf9c 	.word	0x0800bf9c
 800097c:	20001544 	.word	0x20001544
 8000980:	0800bfa8 	.word	0x0800bfa8
 8000984:	200015f4 	.word	0x200015f4

08000988 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800098c:	f008 fc58 	bl	8009240 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000998:	f000 fbe8 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099c:	f000 f81c 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a0:	f000 f8d8 	bl	8000b54 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80009a4:	f000 f880 	bl	8000aa8 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80009a8:	f000 f88a 	bl	8000ac0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // clear terminal screen for coolterm
  printf("\e[1;1H\e[2J");fflush(stdout);
 80009ac:	4807      	ldr	r0, [pc, #28]	@ (80009cc <main+0x38>)
 80009ae:	f00a fc87 	bl	800b2c0 <iprintf>
 80009b2:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <main+0x3c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f00a fbab 	bl	800b114 <fflush>

  printf("\r\nHello SunnyMinds \r\n");
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <main+0x40>)
 80009c0:	f00a fce6 	bl	800b390 <puts>
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80009c4:	f7ff ffe0 	bl	8000988 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <main+0x34>
 80009cc:	0800bfb4 	.word	0x0800bfb4
 80009d0:	2000001c 	.word	0x2000001c
 80009d4:	0800bfc0 	.word	0x0800bfc0

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b09c      	sub	sp, #112	@ 0x70
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	2250      	movs	r2, #80	@ 0x50
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f00a fdb2 	bl	800b550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
 80009fc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009fe:	4b29      	ldr	r3, [pc, #164]	@ (8000aa4 <SystemClock_Config+0xcc>)
 8000a00:	691b      	ldr	r3, [r3, #16]
 8000a02:	4a28      	ldr	r2, [pc, #160]	@ (8000aa4 <SystemClock_Config+0xcc>)
 8000a04:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000a08:	6113      	str	r3, [r2, #16]
 8000a0a:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <SystemClock_Config+0xcc>)
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a16:	bf00      	nop
 8000a18:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <SystemClock_Config+0xcc>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	f003 0308 	and.w	r3, r3, #8
 8000a20:	2b08      	cmp	r3, #8
 8000a22:	d1f9      	bne.n	8000a18 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000a24:	2310      	movs	r3, #16
 8000a26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000a28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000a2e:	2320      	movs	r3, #32
 8000a30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a32:	2302      	movs	r3, #2
 8000a34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000a36:	2302      	movs	r3, #2
 8000a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000a3e:	237d      	movs	r3, #125	@ 0x7d
 8000a40:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000a4e:	2308      	movs	r3, #8
 8000a50:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 feca 	bl	80017f8 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a6a:	f000 f8f7 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	231f      	movs	r3, #31
 8000a70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2303      	movs	r3, #3
 8000a74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	2105      	movs	r1, #5
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 faeb 	bl	8002068 <HAL_RCC_ClockConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a98:	f000 f8e0 	bl	8000c5c <Error_Handler>
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3770      	adds	r7, #112	@ 0x70
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	44020800 	.word	0x44020800

08000aa8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000aac:	f000 fe94 	bl	80017d8 <HAL_ICACHE_Enable>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000ab6:	f000 f8d1 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ac4:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_LPUART1_UART_Init+0x8c>)
 8000ac6:	4a22      	ldr	r2, [pc, #136]	@ (8000b50 <MX_LPUART1_UART_Init+0x90>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000aca:	4b20      	ldr	r3, [pc, #128]	@ (8000b4c <MX_LPUART1_UART_Init+0x8c>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_LPUART1_UART_Init+0x8c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_LPUART1_UART_Init+0x8c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_LPUART1_UART_Init+0x8c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_LPUART1_UART_Init+0x8c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_LPUART1_UART_Init+0x8c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_LPUART1_UART_Init+0x8c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <MX_LPUART1_UART_Init+0x8c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <MX_LPUART1_UART_Init+0x8c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b02:	4812      	ldr	r0, [pc, #72]	@ (8000b4c <MX_LPUART1_UART_Init+0x8c>)
 8000b04:	f007 fa74 	bl	8007ff0 <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b0e:	f000 f8a5 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	480d      	ldr	r0, [pc, #52]	@ (8000b4c <MX_LPUART1_UART_Init+0x8c>)
 8000b16:	f007 ff9f 	bl	8008a58 <HAL_UARTEx_SetTxFifoThreshold>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000b20:	f000 f89c 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	4809      	ldr	r0, [pc, #36]	@ (8000b4c <MX_LPUART1_UART_Init+0x8c>)
 8000b28:	f007 ffd4 	bl	8008ad4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000b32:	f000 f893 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_LPUART1_UART_Init+0x8c>)
 8000b38:	f007 ff55 	bl	80089e6 <HAL_UARTEx_DisableFifoMode>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000b42:	f000 f88b 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000cbc 	.word	0x20000cbc
 8000b50:	44002400 	.word	0x44002400

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c28 <MX_GPIO_Init+0xd4>)
 8000b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b70:	4a2d      	ldr	r2, [pc, #180]	@ (8000c28 <MX_GPIO_Init+0xd4>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c28 <MX_GPIO_Init+0xd4>)
 8000b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	4b27      	ldr	r3, [pc, #156]	@ (8000c28 <MX_GPIO_Init+0xd4>)
 8000b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b8e:	4a26      	ldr	r2, [pc, #152]	@ (8000c28 <MX_GPIO_Init+0xd4>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b98:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <MX_GPIO_Init+0xd4>)
 8000b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED2_GPIO_Port, USER_LED2_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2108      	movs	r1, #8
 8000baa:	4820      	ldr	r0, [pc, #128]	@ (8000c2c <MX_GPIO_Init+0xd8>)
 8000bac:	f000 fdb0 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bb6:	481e      	ldr	r0, [pc, #120]	@ (8000c30 <MX_GPIO_Init+0xdc>)
 8000bb8:	f000 fdaa 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED2_Pin;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED2_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4816      	ldr	r0, [pc, #88]	@ (8000c2c <MX_GPIO_Init+0xd8>)
 8000bd4:	f000 fc4a 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED1_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin;
 8000bd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED1_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480f      	ldr	r0, [pc, #60]	@ (8000c30 <MX_GPIO_Init+0xdc>)
 8000bf2:	f000 fc3b 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <MX_GPIO_Init+0xe0>)
 8000bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	4619      	mov	r1, r3
 8000c08:	4808      	ldr	r0, [pc, #32]	@ (8000c2c <MX_GPIO_Init+0xd8>)
 8000c0a:	f000 fc2f 	bl	800146c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	200b      	movs	r0, #11
 8000c14:	f000 fbaa 	bl	800136c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c18:	200b      	movs	r0, #11
 8000c1a:	f000 fbc1 	bl	80013a0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1e:	bf00      	nop
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	44020c00 	.word	0x44020c00
 8000c2c:	42021000 	.word	0x42021000
 8000c30:	42020400 	.word	0x42020400
 8000c34:	10110000 	.word	0x10110000

08000c38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d101      	bne.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c4a:	f000 fab7 	bl	80011bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40001000 	.word	0x40001000

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0cc      	sub	sp, #304	@ 0x130
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c86:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c9c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	2100      	movs	r1, #0
 8000caa:	f00a fc51 	bl	800b550 <memset>
  if(huart->Instance==LPUART1)
 8000cae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a33      	ldr	r2, [pc, #204]	@ (8000d88 <HAL_UART_MspInit+0x110>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d15d      	bne.n	8000d7c <HAL_UART_MspInit+0x104>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cc0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cc4:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000cc8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000cd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cd8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fd38 	bl	800275c <HAL_RCCEx_PeriphCLKConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000cf2:	f7ff ffb3 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cf6:	4b25      	ldr	r3, [pc, #148]	@ (8000d8c <HAL_UART_MspInit+0x114>)
 8000cf8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000cfc:	4a23      	ldr	r2, [pc, #140]	@ (8000d8c <HAL_UART_MspInit+0x114>)
 8000cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d02:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000d06:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <HAL_UART_MspInit+0x114>)
 8000d08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000d0c:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8000d10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d14:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d1e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000d22:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d24:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <HAL_UART_MspInit+0x114>)
 8000d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d2a:	4a18      	ldr	r2, [pc, #96]	@ (8000d8c <HAL_UART_MspInit+0x114>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d34:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <HAL_UART_MspInit+0x114>)
 8000d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d3a:	f003 0202 	and.w	r2, r3, #2
 8000d3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d42:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d4c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000d50:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d52:	23c0      	movs	r3, #192	@ 0xc0
 8000d54:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	@ (8000d90 <HAL_UART_MspInit+0x118>)
 8000d78:	f000 fb78 	bl	800146c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d7c:	bf00      	nop
 8000d7e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	44002400 	.word	0x44002400
 8000d8c:	44020c00 	.word	0x44020c00
 8000d90:	42020400 	.word	0x42020400

08000d94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	@ 0x38
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d9c:	4b33      	ldr	r3, [pc, #204]	@ (8000e6c <HAL_InitTick+0xd8>)
 8000d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000da2:	4a32      	ldr	r2, [pc, #200]	@ (8000e6c <HAL_InitTick+0xd8>)
 8000da4:	f043 0310 	orr.w	r3, r3, #16
 8000da8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000dac:	4b2f      	ldr	r3, [pc, #188]	@ (8000e6c <HAL_InitTick+0xd8>)
 8000dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dba:	f107 020c 	add.w	r2, r7, #12
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fc91 	bl	80026ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d103      	bne.n	8000ddc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dd4:	f001 fc48 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8000dd8:	6378      	str	r0, [r7, #52]	@ 0x34
 8000dda:	e004      	b.n	8000de6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ddc:	f001 fc44 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8000de0:	4603      	mov	r3, r0
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000de8:	095b      	lsrs	r3, r3, #5
 8000dea:	4a21      	ldr	r2, [pc, #132]	@ (8000e70 <HAL_InitTick+0xdc>)
 8000dec:	fba2 2303 	umull	r2, r3, r2, r3
 8000df0:	09db      	lsrs	r3, r3, #7
 8000df2:	3b01      	subs	r3, #1
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000df6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <HAL_InitTick+0xe0>)
 8000df8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e78 <HAL_InitTick+0xe4>)
 8000dfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <HAL_InitTick+0xe0>)
 8000dfe:	2263      	movs	r2, #99	@ 0x63
 8000e00:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e02:	4a1c      	ldr	r2, [pc, #112]	@ (8000e74 <HAL_InitTick+0xe0>)
 8000e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e06:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <HAL_InitTick+0xe0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_InitTick+0xe0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000e14:	4817      	ldr	r0, [pc, #92]	@ (8000e74 <HAL_InitTick+0xe0>)
 8000e16:	f006 fcf3 	bl	8007800 <HAL_TIM_Base_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d118      	bne.n	8000e5a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e28:	4812      	ldr	r0, [pc, #72]	@ (8000e74 <HAL_InitTick+0xe0>)
 8000e2a:	f006 fd4b 	bl	80078c4 <HAL_TIM_Base_Start_IT>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10e      	bne.n	8000e5a <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b0f      	cmp	r3, #15
 8000e40:	d808      	bhi.n	8000e54 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000e42:	2200      	movs	r2, #0
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	2031      	movs	r0, #49	@ 0x31
 8000e48:	f000 fa90 	bl	800136c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e7c <HAL_InitTick+0xe8>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e002      	b.n	8000e5a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000e5a:	2031      	movs	r0, #49	@ 0x31
 8000e5c:	f000 faa0 	bl	80013a0 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000e60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3738      	adds	r7, #56	@ 0x38
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	44020c00 	.word	0x44020c00
 8000e70:	0a7c5ac5 	.word	0x0a7c5ac5
 8000e74:	20000d50 	.word	0x20000d50
 8000e78:	40001000 	.word	0x40001000
 8000e7c:	20000004 	.word	0x20000004

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <NMI_Handler+0x4>

08000e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <MemManage_Handler+0x4>

08000e98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f000 fc5a 	bl	8001774 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <TIM6_IRQHandler+0x10>)
 8000eca:	f006 fda9 	bl	8007a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000d50 	.word	0x20000d50

08000ed8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e00a      	b.n	8000f00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eea:	f3af 8000 	nop.w
 8000eee:	4601      	mov	r1, r0
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	60ba      	str	r2, [r7, #8]
 8000ef6:	b2ca      	uxtb	r2, r1
 8000ef8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf0      	blt.n	8000eea <_read+0x12>
  }

  return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	e009      	b.n	8000f38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	60ba      	str	r2, [r7, #8]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f00a f833 	bl	800af98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbf1      	blt.n	8000f24 <_write+0x12>
  }
  return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_close>:

int _close(int file)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f72:	605a      	str	r2, [r3, #4]
  return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_isatty>:

int _isatty(int file)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fbc:	4a14      	ldr	r2, [pc, #80]	@ (8001010 <_sbrk+0x5c>)
 8000fbe:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <_sbrk+0x60>)
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <_sbrk+0x64>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	@ (800101c <_sbrk+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd6:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d207      	bcs.n	8000ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe4:	f00a fb02 	bl	800b5ec <__errno>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	220c      	movs	r2, #12
 8000fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	e009      	b.n	8001008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffa:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	4a05      	ldr	r2, [pc, #20]	@ (8001018 <_sbrk+0x64>)
 8001004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200a0000 	.word	0x200a0000
 8001014:	00000400 	.word	0x00000400
 8001018:	20000d9c 	.word	0x20000d9c
 800101c:	20001760 	.word	0x20001760

08001020 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001026:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <SystemInit+0xdc>)
 8001028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800102c:	4a33      	ldr	r2, [pc, #204]	@ (80010fc <SystemInit+0xdc>)
 800102e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001032:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001036:	4b32      	ldr	r3, [pc, #200]	@ (8001100 <SystemInit+0xe0>)
 8001038:	2201      	movs	r2, #1
 800103a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800103c:	4b30      	ldr	r3, [pc, #192]	@ (8001100 <SystemInit+0xe0>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001042:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <SystemInit+0xe0>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001048:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <SystemInit+0xe0>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	492c      	ldr	r1, [pc, #176]	@ (8001100 <SystemInit+0xe0>)
 800104e:	4b2d      	ldr	r3, [pc, #180]	@ (8001104 <SystemInit+0xe4>)
 8001050:	4013      	ands	r3, r2
 8001052:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001054:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <SystemInit+0xe0>)
 8001056:	2200      	movs	r2, #0
 8001058:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800105a:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <SystemInit+0xe0>)
 800105c:	2200      	movs	r2, #0
 800105e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <SystemInit+0xe0>)
 8001062:	2200      	movs	r2, #0
 8001064:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001066:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <SystemInit+0xe0>)
 8001068:	4a27      	ldr	r2, [pc, #156]	@ (8001108 <SystemInit+0xe8>)
 800106a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800106c:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <SystemInit+0xe0>)
 800106e:	2200      	movs	r2, #0
 8001070:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001072:	4b23      	ldr	r3, [pc, #140]	@ (8001100 <SystemInit+0xe0>)
 8001074:	4a24      	ldr	r2, [pc, #144]	@ (8001108 <SystemInit+0xe8>)
 8001076:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001078:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <SystemInit+0xe0>)
 800107a:	2200      	movs	r2, #0
 800107c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800107e:	4b20      	ldr	r3, [pc, #128]	@ (8001100 <SystemInit+0xe0>)
 8001080:	4a21      	ldr	r2, [pc, #132]	@ (8001108 <SystemInit+0xe8>)
 8001082:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <SystemInit+0xe0>)
 8001086:	2200      	movs	r2, #0
 8001088:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800108a:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <SystemInit+0xe0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a1c      	ldr	r2, [pc, #112]	@ (8001100 <SystemInit+0xe0>)
 8001090:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001094:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <SystemInit+0xe0>)
 8001098:	2200      	movs	r2, #0
 800109a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <SystemInit+0xdc>)
 800109e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010a2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80010a4:	4b19      	ldr	r3, [pc, #100]	@ (800110c <SystemInit+0xec>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80010ac:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80010b4:	d003      	beq.n	80010be <SystemInit+0x9e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80010bc:	d117      	bne.n	80010ee <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <SystemInit+0xec>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d005      	beq.n	80010d6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <SystemInit+0xec>)
 80010cc:	4a10      	ldr	r2, [pc, #64]	@ (8001110 <SystemInit+0xf0>)
 80010ce:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80010d0:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <SystemInit+0xec>)
 80010d2:	4a10      	ldr	r2, [pc, #64]	@ (8001114 <SystemInit+0xf4>)
 80010d4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <SystemInit+0xec>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a0c      	ldr	r2, [pc, #48]	@ (800110c <SystemInit+0xec>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <SystemInit+0xec>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a09      	ldr	r2, [pc, #36]	@ (800110c <SystemInit+0xec>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	61d3      	str	r3, [r2, #28]
  }
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00
 8001100:	44020c00 	.word	0x44020c00
 8001104:	eae2eae3 	.word	0xeae2eae3
 8001108:	01010280 	.word	0x01010280
 800110c:	40022000 	.word	0x40022000
 8001110:	08192a3b 	.word	0x08192a3b
 8001114:	4c5d6e7f 	.word	0x4c5d6e7f

08001118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001118:	480d      	ldr	r0, [pc, #52]	@ (8001150 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800111a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800111c:	f7ff ff80 	bl	8001020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <LoopForever+0x6>)
  ldr r1, =_edata
 8001122:	490d      	ldr	r1, [pc, #52]	@ (8001158 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001124:	4a0d      	ldr	r2, [pc, #52]	@ (800115c <LoopForever+0xe>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001138:	4c0a      	ldr	r4, [pc, #40]	@ (8001164 <LoopForever+0x16>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001146:	f00a fa57 	bl	800b5f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114a:	f7ff fc23 	bl	8000994 <main>

0800114e <LoopForever>:

LoopForever:
    b LoopForever
 800114e:	e7fe      	b.n	800114e <LoopForever>
  ldr   r0, =_estack
 8001150:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800115c:	0800c158 	.word	0x0800c158
  ldr r2, =_sbss
 8001160:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001164:	2000175c 	.word	0x2000175c

08001168 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_IRQHandler>
	...

0800116c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 f8f0 	bl	8001356 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001176:	f001 f92f 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 800117a:	4602      	mov	r2, r0
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <HAL_Init+0x44>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	490b      	ldr	r1, [pc, #44]	@ (80011b4 <HAL_Init+0x48>)
 8001186:	5ccb      	ldrb	r3, [r1, r3]
 8001188:	fa22 f303 	lsr.w	r3, r2, r3
 800118c:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <HAL_Init+0x4c>)
 800118e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001190:	2004      	movs	r0, #4
 8001192:	f000 f913 	bl	80013bc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001196:	200f      	movs	r0, #15
 8001198:	f7ff fdfc 	bl	8000d94 <HAL_InitTick>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e002      	b.n	80011ac <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011a6:	f7ff fd5f 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	44020c00 	.word	0x44020c00
 80011b4:	0800c0d4 	.word	0x0800c0d4
 80011b8:	20000000 	.word	0x20000000

080011bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_IncTick+0x20>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_IncTick+0x24>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <HAL_IncTick+0x24>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000da0 	.word	0x20000da0

080011e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <HAL_GetTick+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000da0 	.word	0x20000da0

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	@ (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	@ (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	@ (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	@ 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	@ 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff4c 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800137a:	f7ff ff63 	bl	8001244 <__NVIC_GetPriorityGrouping>
 800137e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	68b9      	ldr	r1, [r7, #8]
 8001384:	6978      	ldr	r0, [r7, #20]
 8001386:	f7ff ffb3 	bl	80012f0 <NVIC_EncodePriority>
 800138a:	4602      	mov	r2, r0
 800138c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff82 	bl	800129c <__NVIC_SetPriority>
}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff56 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d844      	bhi.n	8001454 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80013ca:	a201      	add	r2, pc, #4	@ (adr r2, 80013d0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80013cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d0:	080013f3 	.word	0x080013f3
 80013d4:	08001411 	.word	0x08001411
 80013d8:	08001433 	.word	0x08001433
 80013dc:	08001455 	.word	0x08001455
 80013e0:	080013e5 	.word	0x080013e5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80013e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6013      	str	r3, [r2, #0]
      break;
 80013f0:	e031      	b.n	8001456 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80013f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013f8:	f023 0304 	bic.w	r3, r3, #4
 80013fc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001400:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001404:	4a18      	ldr	r2, [pc, #96]	@ (8001468 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001406:	f023 030c 	bic.w	r3, r3, #12
 800140a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800140e:	e022      	b.n	8001456 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a13      	ldr	r2, [pc, #76]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001416:	f023 0304 	bic.w	r3, r3, #4
 800141a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800141e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001422:	f023 030c 	bic.w	r3, r3, #12
 8001426:	4a10      	ldr	r2, [pc, #64]	@ (8001468 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001430:	e011      	b.n	8001456 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a0b      	ldr	r2, [pc, #44]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001438:	f023 0304 	bic.w	r3, r3, #4
 800143c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800143e:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001440:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001444:	f023 030c 	bic.w	r3, r3, #12
 8001448:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001452:	e000      	b.n	8001456 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001454:	bf00      	nop
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010
 8001468:	44020c00 	.word	0x44020c00

0800146c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800147a:	e136      	b.n	80016ea <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	2101      	movs	r1, #1
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 8128 	beq.w	80016e4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x38>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b12      	cmp	r3, #18
 80014a2:	d125      	bne.n	80014f0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	220f      	movs	r2, #15
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4013      	ands	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	f003 020f 	and.w	r2, r3, #15
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	4313      	orrs	r3, r2
 80014e0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	08da      	lsrs	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3208      	adds	r2, #8
 80014ea:	6979      	ldr	r1, [r7, #20]
 80014ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4013      	ands	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0203 	and.w	r2, r3, #3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	4313      	orrs	r3, r2
 800151c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d00b      	beq.n	8001544 <HAL_GPIO_Init+0xd8>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d007      	beq.n	8001544 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001538:	2b11      	cmp	r3, #17
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b12      	cmp	r3, #18
 8001542:	d130      	bne.n	80015a6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4013      	ands	r3, r2
 800155a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	4313      	orrs	r3, r2
 800156c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800157a:	2201      	movs	r2, #1
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	4013      	ands	r3, r2
 8001588:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	091b      	lsrs	r3, r3, #4
 8001590:	f003 0201 	and.w	r2, r3, #1
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	4313      	orrs	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d017      	beq.n	80015de <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	2203      	movs	r2, #3
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	4013      	ands	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d07c      	beq.n	80016e4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80015ea:	4a47      	ldr	r2, [pc, #284]	@ (8001708 <HAL_GPIO_Init+0x29c>)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3318      	adds	r3, #24
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	4013      	ands	r3, r2
 800160c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	0a9a      	lsrs	r2, r3, #10
 8001612:	4b3e      	ldr	r3, [pc, #248]	@ (800170c <HAL_GPIO_Init+0x2a0>)
 8001614:	4013      	ands	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	f002 0203 	and.w	r2, r2, #3
 800161c:	00d2      	lsls	r2, r2, #3
 800161e:	4093      	lsls	r3, r2
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	4313      	orrs	r3, r2
 8001624:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001626:	4938      	ldr	r1, [pc, #224]	@ (8001708 <HAL_GPIO_Init+0x29c>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	3318      	adds	r3, #24
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001634:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <HAL_GPIO_Init+0x29c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	43db      	mvns	r3, r3
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4013      	ands	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001658:	4a2b      	ldr	r2, [pc, #172]	@ (8001708 <HAL_GPIO_Init+0x29c>)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800165e:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <HAL_GPIO_Init+0x29c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	43db      	mvns	r3, r3
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	4013      	ands	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001682:	4a21      	ldr	r2, [pc, #132]	@ (8001708 <HAL_GPIO_Init+0x29c>)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <HAL_GPIO_Init+0x29c>)
 800168a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800168e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43db      	mvns	r3, r3
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	4013      	ands	r3, r2
 8001698:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80016ae:	4a16      	ldr	r2, [pc, #88]	@ (8001708 <HAL_GPIO_Init+0x29c>)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80016b6:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <HAL_GPIO_Init+0x29c>)
 80016b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016bc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4013      	ands	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80016dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <HAL_GPIO_Init+0x29c>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	3301      	adds	r3, #1
 80016e8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f47f aec1 	bne.w	800147c <HAL_GPIO_Init+0x10>
  }
}
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	44022000 	.word	0x44022000
 800170c:	002f7f7f 	.word	0x002f7f7f

08001710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
 800171c:	4613      	mov	r3, r2
 800171e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800172c:	e002      	b.n	8001734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4013      	ands	r3, r2
 8001758:	041a      	lsls	r2, r3, #16
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43d9      	mvns	r1, r3
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	400b      	ands	r3, r1
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800177e:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	4013      	ands	r3, r2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d006      	beq.n	8001798 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800178a:	4a0c      	ldr	r2, [pc, #48]	@ (80017bc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	4618      	mov	r0, r3
 8001794:	f009 fbd2 	bl	800af3c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80017a4:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 f807 	bl	80017c0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	44022000 	.word	0x44022000

080017c0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <HAL_ICACHE_Enable+0x1c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <HAL_ICACHE_Enable+0x1c>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40030400 	.word	0x40030400

080017f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	f000 bc28 	b.w	800205c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800180c:	4b94      	ldr	r3, [pc, #592]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	f003 0318 	and.w	r3, r3, #24
 8001814:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001816:	4b92      	ldr	r3, [pc, #584]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	2b00      	cmp	r3, #0
 800182a:	d05b      	beq.n	80018e4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	2b08      	cmp	r3, #8
 8001830:	d005      	beq.n	800183e <HAL_RCC_OscConfig+0x46>
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	2b18      	cmp	r3, #24
 8001836:	d114      	bne.n	8001862 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d111      	bne.n	8001862 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	f000 bc08 	b.w	800205c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800184c:	4b84      	ldr	r3, [pc, #528]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	041b      	lsls	r3, r3, #16
 800185a:	4981      	ldr	r1, [pc, #516]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 800185c:	4313      	orrs	r3, r2
 800185e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001860:	e040      	b.n	80018e4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d023      	beq.n	80018b2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800186a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a7c      	ldr	r2, [pc, #496]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001876:	f7ff fcb5 	bl	80011e4 <HAL_GetTick>
 800187a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800187e:	f7ff fcb1 	bl	80011e4 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e3e5      	b.n	800205c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001890:	4b73      	ldr	r3, [pc, #460]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800189c:	4b70      	ldr	r3, [pc, #448]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	041b      	lsls	r3, r3, #16
 80018aa:	496d      	ldr	r1, [pc, #436]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	618b      	str	r3, [r1, #24]
 80018b0:	e018      	b.n	80018e4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a6a      	ldr	r2, [pc, #424]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 80018b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7ff fc91 	bl	80011e4 <HAL_GetTick>
 80018c2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80018c6:	f7ff fc8d 	bl	80011e4 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e3c1      	b.n	800205c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80018d8:	4b61      	ldr	r3, [pc, #388]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80a0 	beq.w	8001a32 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	2b10      	cmp	r3, #16
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_OscConfig+0x10c>
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	2b18      	cmp	r3, #24
 80018fc:	d109      	bne.n	8001912 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b03      	cmp	r3, #3
 8001902:	d106      	bne.n	8001912 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f040 8092 	bne.w	8001a32 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e3a4      	b.n	800205c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x132>
 800191c:	4b50      	ldr	r3, [pc, #320]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a4f      	ldr	r2, [pc, #316]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e058      	b.n	80019dc <HAL_RCC_OscConfig+0x1e4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d112      	bne.n	8001958 <HAL_RCC_OscConfig+0x160>
 8001932:	4b4b      	ldr	r3, [pc, #300]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a4a      	ldr	r2, [pc, #296]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b48      	ldr	r3, [pc, #288]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a47      	ldr	r2, [pc, #284]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001944:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b45      	ldr	r3, [pc, #276]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a44      	ldr	r2, [pc, #272]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001950:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e041      	b.n	80019dc <HAL_RCC_OscConfig+0x1e4>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001960:	d112      	bne.n	8001988 <HAL_RCC_OscConfig+0x190>
 8001962:	4b3f      	ldr	r3, [pc, #252]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a3e      	ldr	r2, [pc, #248]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a3b      	ldr	r2, [pc, #236]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001974:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a38      	ldr	r2, [pc, #224]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e029      	b.n	80019dc <HAL_RCC_OscConfig+0x1e4>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001990:	d112      	bne.n	80019b8 <HAL_RCC_OscConfig+0x1c0>
 8001992:	4b33      	ldr	r3, [pc, #204]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a32      	ldr	r2, [pc, #200]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 80019a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e011      	b.n	80019dc <HAL_RCC_OscConfig+0x1e4>
 80019b8:	4b29      	ldr	r3, [pc, #164]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a28      	ldr	r2, [pc, #160]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 80019be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a25      	ldr	r2, [pc, #148]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 80019ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b23      	ldr	r3, [pc, #140]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a22      	ldr	r2, [pc, #136]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 80019d6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80019da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff fbfe 	bl	80011e4 <HAL_GetTick>
 80019e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80019ec:	f7ff fbfa 	bl	80011e4 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	@ 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e32e      	b.n	800205c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x1f4>
 8001a0a:	e012      	b.n	8001a32 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fbea 	bl	80011e4 <HAL_GetTick>
 8001a10:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001a14:	f7ff fbe6 	bl	80011e4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	@ 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e31a      	b.n	800205c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <HAL_RCC_OscConfig+0x268>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 809a 	beq.w	8001b74 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <HAL_RCC_OscConfig+0x25a>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	2b18      	cmp	r3, #24
 8001a4a:	d149      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d146      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d104      	bne.n	8001a64 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e2fe      	b.n	800205c <HAL_RCC_OscConfig+0x864>
 8001a5e:	bf00      	nop
 8001a60:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d11c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001a6a:	4b9a      	ldr	r3, [pc, #616]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0218 	and.w	r2, r3, #24
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d014      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001a7a:	4b96      	ldr	r3, [pc, #600]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 0218 	bic.w	r2, r3, #24
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	4993      	ldr	r1, [pc, #588]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001a8c:	f000 fdd0 	bl	8002630 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a90:	4b91      	ldr	r3, [pc, #580]	@ (8001cd8 <HAL_RCC_OscConfig+0x4e0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff f97d 	bl	8000d94 <HAL_InitTick>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e2db      	b.n	800205c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fb9e 	bl	80011e4 <HAL_GetTick>
 8001aa8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001aac:	f7ff fb9a 	bl	80011e4 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e2ce      	b.n	800205c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001abe:	4b85      	ldr	r3, [pc, #532]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001aca:	4b82      	ldr	r3, [pc, #520]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	041b      	lsls	r3, r3, #16
 8001ad8:	497e      	ldr	r1, [pc, #504]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001ade:	e049      	b.n	8001b74 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d02c      	beq.n	8001b42 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001ae8:	4b7a      	ldr	r3, [pc, #488]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 0218 	bic.w	r2, r3, #24
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4977      	ldr	r1, [pc, #476]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001afa:	4b76      	ldr	r3, [pc, #472]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a75      	ldr	r2, [pc, #468]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff fb6d 	bl	80011e4 <HAL_GetTick>
 8001b0a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff fb69 	bl	80011e4 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e29d      	b.n	800205c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b20:	4b6c      	ldr	r3, [pc, #432]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001b2c:	4b69      	ldr	r3, [pc, #420]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	4966      	ldr	r1, [pc, #408]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	610b      	str	r3, [r1, #16]
 8001b40:	e018      	b.n	8001b74 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b42:	4b64      	ldr	r3, [pc, #400]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a63      	ldr	r2, [pc, #396]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fb49 	bl	80011e4 <HAL_GetTick>
 8001b52:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b56:	f7ff fb45 	bl	80011e4 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e279      	b.n	800205c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b68:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d03c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b88:	4b52      	ldr	r3, [pc, #328]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b8e:	4a51      	ldr	r2, [pc, #324]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001b90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001b94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7ff fb24 	bl	80011e4 <HAL_GetTick>
 8001b9c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fb20 	bl	80011e4 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e254      	b.n	800205c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001bb2:	4b48      	ldr	r3, [pc, #288]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0ef      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x3a8>
 8001bc0:	e01b      	b.n	8001bfa <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc2:	4b44      	ldr	r3, [pc, #272]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bc8:	4a42      	ldr	r2, [pc, #264]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001bca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001bce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7ff fb07 	bl	80011e4 <HAL_GetTick>
 8001bd6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001bda:	f7ff fb03 	bl	80011e4 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e237      	b.n	800205c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001bec:	4b39      	ldr	r3, [pc, #228]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ef      	bne.n	8001bda <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80d2 	beq.w	8001dac <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001c08:	4b34      	ldr	r3, [pc, #208]	@ (8001cdc <HAL_RCC_OscConfig+0x4e4>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d118      	bne.n	8001c46 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001c14:	4b31      	ldr	r3, [pc, #196]	@ (8001cdc <HAL_RCC_OscConfig+0x4e4>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	4a30      	ldr	r2, [pc, #192]	@ (8001cdc <HAL_RCC_OscConfig+0x4e4>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c20:	f7ff fae0 	bl	80011e4 <HAL_GetTick>
 8001c24:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c28:	f7ff fadc 	bl	80011e4 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e210      	b.n	800205c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001c3a:	4b28      	ldr	r3, [pc, #160]	@ (8001cdc <HAL_RCC_OscConfig+0x4e4>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d108      	bne.n	8001c60 <HAL_RCC_OscConfig+0x468>
 8001c4e:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c54:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c5e:	e074      	b.n	8001d4a <HAL_RCC_OscConfig+0x552>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d118      	bne.n	8001c9a <HAL_RCC_OscConfig+0x4a2>
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c6e:	4a19      	ldr	r2, [pc, #100]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c78:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c7e:	4a15      	ldr	r2, [pc, #84]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001c80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c88:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c8e:	4a11      	ldr	r2, [pc, #68]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c98:	e057      	b.n	8001d4a <HAL_RCC_OscConfig+0x552>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d11e      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x4e8>
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cb2:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cb8:	4a06      	ldr	r2, [pc, #24]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001cba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cc2:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cc8:	4a02      	ldr	r2, [pc, #8]	@ (8001cd4 <HAL_RCC_OscConfig+0x4dc>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cd2:	e03a      	b.n	8001d4a <HAL_RCC_OscConfig+0x552>
 8001cd4:	44020c00 	.word	0x44020c00
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	44020800 	.word	0x44020800
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b85      	cmp	r3, #133	@ 0x85
 8001ce6:	d118      	bne.n	8001d1a <HAL_RCC_OscConfig+0x522>
 8001ce8:	4ba2      	ldr	r3, [pc, #648]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cee:	4aa1      	ldr	r2, [pc, #644]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cf8:	4b9e      	ldr	r3, [pc, #632]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cfe:	4a9d      	ldr	r2, [pc, #628]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d08:	4b9a      	ldr	r3, [pc, #616]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d0e:	4a99      	ldr	r2, [pc, #612]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d18:	e017      	b.n	8001d4a <HAL_RCC_OscConfig+0x552>
 8001d1a:	4b96      	ldr	r3, [pc, #600]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d20:	4a94      	ldr	r2, [pc, #592]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d2a:	4b92      	ldr	r3, [pc, #584]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d30:	4a90      	ldr	r2, [pc, #576]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001d32:	f023 0304 	bic.w	r3, r3, #4
 8001d36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d3a:	4b8e      	ldr	r3, [pc, #568]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d40:	4a8c      	ldr	r2, [pc, #560]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001d42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d016      	beq.n	8001d80 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d52:	f7ff fa47 	bl	80011e4 <HAL_GetTick>
 8001d56:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7ff fa43 	bl	80011e4 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e175      	b.n	800205c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d70:	4b80      	ldr	r3, [pc, #512]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001d72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0ed      	beq.n	8001d5a <HAL_RCC_OscConfig+0x562>
 8001d7e:	e015      	b.n	8001dac <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d80:	f7ff fa30 	bl	80011e4 <HAL_GetTick>
 8001d84:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d88:	f7ff fa2c 	bl	80011e4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e15e      	b.n	800205c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d9e:	4b75      	ldr	r3, [pc, #468]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ed      	bne.n	8001d88 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d036      	beq.n	8001e26 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d019      	beq.n	8001df4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dc0:	4b6c      	ldr	r3, [pc, #432]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6b      	ldr	r2, [pc, #428]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001dc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7ff fa0a 	bl	80011e4 <HAL_GetTick>
 8001dd0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001dd4:	f7ff fa06 	bl	80011e4 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e13a      	b.n	800205c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001de6:	4b63      	ldr	r3, [pc, #396]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x5dc>
 8001df2:	e018      	b.n	8001e26 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001df4:	4b5f      	ldr	r3, [pc, #380]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a5e      	ldr	r2, [pc, #376]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001dfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff f9f0 	bl	80011e4 <HAL_GetTick>
 8001e04:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001e08:	f7ff f9ec 	bl	80011e4 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e120      	b.n	800205c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e1a:	4b56      	ldr	r3, [pc, #344]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8115 	beq.w	800205a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b18      	cmp	r3, #24
 8001e34:	f000 80af 	beq.w	8001f96 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	f040 8086 	bne.w	8001f4e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001e42:	4b4c      	ldr	r3, [pc, #304]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a4b      	ldr	r2, [pc, #300]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001e48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff f9c9 	bl	80011e4 <HAL_GetTick>
 8001e52:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e56:	f7ff f9c5 	bl	80011e4 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0f9      	b.n	800205c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e68:	4b42      	ldr	r3, [pc, #264]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001e74:	4b3f      	ldr	r3, [pc, #252]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e7c:	f023 0303 	bic.w	r3, r3, #3
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e88:	0212      	lsls	r2, r2, #8
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	4939      	ldr	r1, [pc, #228]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	025b      	lsls	r3, r3, #9
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eac:	3b01      	subs	r3, #1
 8001eae:	041b      	lsls	r3, r3, #16
 8001eb0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	061b      	lsls	r3, r3, #24
 8001ebe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001ec2:	492c      	ldr	r1, [pc, #176]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	4a29      	ldr	r2, [pc, #164]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001ece:	f023 0310 	bic.w	r3, r3, #16
 8001ed2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed8:	4a26      	ldr	r2, [pc, #152]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001ede:	4b25      	ldr	r3, [pc, #148]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee2:	4a24      	ldr	r2, [pc, #144]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001ee4:	f043 0310 	orr.w	r3, r3, #16
 8001ee8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001eea:	4b22      	ldr	r3, [pc, #136]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eee:	f023 020c 	bic.w	r2, r3, #12
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	491f      	ldr	r1, [pc, #124]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001efc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f00:	f023 0220 	bic.w	r2, r3, #32
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f08:	491a      	ldr	r1, [pc, #104]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f12:	4a18      	ldr	r2, [pc, #96]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f18:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001f1a:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a15      	ldr	r2, [pc, #84]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001f20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7ff f95d 	bl	80011e4 <HAL_GetTick>
 8001f2a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001f2e:	f7ff f959 	bl	80011e4 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e08d      	b.n	800205c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x736>
 8001f4c:	e085      	b.n	800205a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001f4e:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a08      	ldr	r2, [pc, #32]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001f54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f943 	bl	80011e4 <HAL_GetTick>
 8001f5e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001f62:	f7ff f93f 	bl	80011e4 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d903      	bls.n	8001f78 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e073      	b.n	800205c <HAL_RCC_OscConfig+0x864>
 8001f74:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f78:	4b3a      	ldr	r3, [pc, #232]	@ (8002064 <HAL_RCC_OscConfig+0x86c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ee      	bne.n	8001f62 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001f84:	4b37      	ldr	r3, [pc, #220]	@ (8002064 <HAL_RCC_OscConfig+0x86c>)
 8001f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f88:	4a36      	ldr	r2, [pc, #216]	@ (8002064 <HAL_RCC_OscConfig+0x86c>)
 8001f8a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001f8e:	f023 0303 	bic.w	r3, r3, #3
 8001f92:	6293      	str	r3, [r2, #40]	@ 0x28
 8001f94:	e061      	b.n	800205a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001f96:	4b33      	ldr	r3, [pc, #204]	@ (8002064 <HAL_RCC_OscConfig+0x86c>)
 8001f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f9c:	4b31      	ldr	r3, [pc, #196]	@ (8002064 <HAL_RCC_OscConfig+0x86c>)
 8001f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d031      	beq.n	800200e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f003 0203 	and.w	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d12a      	bne.n	800200e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d122      	bne.n	800200e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d11a      	bne.n	800200e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	0a5b      	lsrs	r3, r3, #9
 8001fdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d111      	bne.n	800200e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	0c1b      	lsrs	r3, r3, #16
 8001fee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d108      	bne.n	800200e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	0e1b      	lsrs	r3, r3, #24
 8002000:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e024      	b.n	800205c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002012:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <HAL_RCC_OscConfig+0x86c>)
 8002014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002016:	08db      	lsrs	r3, r3, #3
 8002018:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002020:	429a      	cmp	r2, r3
 8002022:	d01a      	beq.n	800205a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002024:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <HAL_RCC_OscConfig+0x86c>)
 8002026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002028:	4a0e      	ldr	r2, [pc, #56]	@ (8002064 <HAL_RCC_OscConfig+0x86c>)
 800202a:	f023 0310 	bic.w	r3, r3, #16
 800202e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7ff f8d8 	bl	80011e4 <HAL_GetTick>
 8002034:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002036:	bf00      	nop
 8002038:	f7ff f8d4 	bl	80011e4 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	4293      	cmp	r3, r2
 8002042:	d0f9      	beq.n	8002038 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002048:	4a06      	ldr	r2, [pc, #24]	@ (8002064 <HAL_RCC_OscConfig+0x86c>)
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800204e:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <HAL_RCC_OscConfig+0x86c>)
 8002050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002052:	4a04      	ldr	r2, [pc, #16]	@ (8002064 <HAL_RCC_OscConfig+0x86c>)
 8002054:	f043 0310 	orr.w	r3, r3, #16
 8002058:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	44020c00 	.word	0x44020c00

08002068 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e19e      	b.n	80023ba <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b83      	ldr	r3, [pc, #524]	@ (800228c <HAL_RCC_ClockConfig+0x224>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d910      	bls.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b80      	ldr	r3, [pc, #512]	@ (800228c <HAL_RCC_ClockConfig+0x224>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 020f 	bic.w	r2, r3, #15
 8002092:	497e      	ldr	r1, [pc, #504]	@ (800228c <HAL_RCC_ClockConfig+0x224>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b7c      	ldr	r3, [pc, #496]	@ (800228c <HAL_RCC_ClockConfig+0x224>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e186      	b.n	80023ba <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d012      	beq.n	80020de <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	4b74      	ldr	r3, [pc, #464]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d909      	bls.n	80020de <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80020ca:	4b71      	ldr	r3, [pc, #452]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	496d      	ldr	r1, [pc, #436]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d012      	beq.n	8002110 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	4b68      	ldr	r3, [pc, #416]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d909      	bls.n	8002110 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80020fc:	4b64      	ldr	r3, [pc, #400]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	4961      	ldr	r1, [pc, #388]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 800210c:	4313      	orrs	r3, r2
 800210e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d010      	beq.n	800213e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	4b5b      	ldr	r3, [pc, #364]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002128:	429a      	cmp	r2, r3
 800212a:	d908      	bls.n	800213e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800212c:	4b58      	ldr	r3, [pc, #352]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4955      	ldr	r1, [pc, #340]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 800213a:	4313      	orrs	r3, r2
 800213c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d010      	beq.n	800216c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	4b50      	ldr	r3, [pc, #320]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	429a      	cmp	r2, r3
 8002158:	d908      	bls.n	800216c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800215a:	4b4d      	ldr	r3, [pc, #308]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	f023 020f 	bic.w	r2, r3, #15
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	494a      	ldr	r1, [pc, #296]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 8002168:	4313      	orrs	r3, r2
 800216a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8093 	beq.w	80022a0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002182:	4b43      	ldr	r3, [pc, #268]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d121      	bne.n	80021d2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e113      	b.n	80023ba <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800219a:	4b3d      	ldr	r3, [pc, #244]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d115      	bne.n	80021d2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e107      	b.n	80023ba <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80021b2:	4b37      	ldr	r3, [pc, #220]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0fb      	b.n	80023ba <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c2:	4b33      	ldr	r3, [pc, #204]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0f3      	b.n	80023ba <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80021d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f023 0203 	bic.w	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	492c      	ldr	r1, [pc, #176]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e4:	f7fe fffe 	bl	80011e4 <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d112      	bne.n	8002218 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f2:	e00a      	b.n	800220a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021f4:	f7fe fff6 	bl	80011e4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e0d7      	b.n	80023ba <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800220a:	4b21      	ldr	r3, [pc, #132]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 0318 	and.w	r3, r3, #24
 8002212:	2b18      	cmp	r3, #24
 8002214:	d1ee      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x18c>
 8002216:	e043      	b.n	80022a0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d112      	bne.n	8002246 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002222:	f7fe ffdf 	bl	80011e4 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0c0      	b.n	80023ba <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	f003 0318 	and.w	r3, r3, #24
 8002240:	2b10      	cmp	r3, #16
 8002242:	d1ee      	bne.n	8002222 <HAL_RCC_ClockConfig+0x1ba>
 8002244:	e02c      	b.n	80022a0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d122      	bne.n	8002294 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800224e:	e00a      	b.n	8002266 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002250:	f7fe ffc8 	bl	80011e4 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e0a9      	b.n	80023ba <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002266:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <HAL_RCC_ClockConfig+0x228>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 0318 	and.w	r3, r3, #24
 800226e:	2b08      	cmp	r3, #8
 8002270:	d1ee      	bne.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
 8002272:	e015      	b.n	80022a0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7fe ffb6 	bl	80011e4 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d906      	bls.n	8002294 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e097      	b.n	80023ba <HAL_RCC_ClockConfig+0x352>
 800228a:	bf00      	nop
 800228c:	40022000 	.word	0x40022000
 8002290:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002294:	4b4b      	ldr	r3, [pc, #300]	@ (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f003 0318 	and.w	r3, r3, #24
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e9      	bne.n	8002274 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d010      	beq.n	80022ce <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	4b44      	ldr	r3, [pc, #272]	@ (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d208      	bcs.n	80022ce <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80022bc:	4b41      	ldr	r3, [pc, #260]	@ (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f023 020f 	bic.w	r2, r3, #15
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	493e      	ldr	r1, [pc, #248]	@ (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ce:	4b3e      	ldr	r3, [pc, #248]	@ (80023c8 <HAL_RCC_ClockConfig+0x360>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d210      	bcs.n	80022fe <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022dc:	4b3a      	ldr	r3, [pc, #232]	@ (80023c8 <HAL_RCC_ClockConfig+0x360>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f023 020f 	bic.w	r2, r3, #15
 80022e4:	4938      	ldr	r1, [pc, #224]	@ (80023c8 <HAL_RCC_ClockConfig+0x360>)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ec:	4b36      	ldr	r3, [pc, #216]	@ (80023c8 <HAL_RCC_ClockConfig+0x360>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e05d      	b.n	80023ba <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d010      	beq.n	800232c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	4b2d      	ldr	r3, [pc, #180]	@ (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002316:	429a      	cmp	r2, r3
 8002318:	d208      	bcs.n	800232c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800231a:	4b2a      	ldr	r3, [pc, #168]	@ (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	4927      	ldr	r1, [pc, #156]	@ (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 8002328:	4313      	orrs	r3, r2
 800232a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d012      	beq.n	800235e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	4b21      	ldr	r3, [pc, #132]	@ (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002346:	429a      	cmp	r2, r3
 8002348:	d209      	bcs.n	800235e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800234a:	4b1e      	ldr	r3, [pc, #120]	@ (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	491a      	ldr	r1, [pc, #104]	@ (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 800235a:	4313      	orrs	r3, r2
 800235c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d012      	beq.n	8002390 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002378:	429a      	cmp	r2, r3
 800237a:	d209      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800237c:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	490e      	ldr	r1, [pc, #56]	@ (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 800238c:	4313      	orrs	r3, r2
 800238e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002390:	f000 f822 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	490b      	ldr	r1, [pc, #44]	@ (80023cc <HAL_RCC_ClockConfig+0x364>)
 80023a0:	5ccb      	ldrb	r3, [r1, r3]
 80023a2:	fa22 f303 	lsr.w	r3, r2, r3
 80023a6:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <HAL_RCC_ClockConfig+0x368>)
 80023a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80023aa:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <HAL_RCC_ClockConfig+0x36c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fcf0 	bl	8000d94 <HAL_InitTick>
 80023b4:	4603      	mov	r3, r0
 80023b6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80023b8:	7afb      	ldrb	r3, [r7, #11]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	44020c00 	.word	0x44020c00
 80023c8:	40022000 	.word	0x40022000
 80023cc:	0800c0d4 	.word	0x0800c0d4
 80023d0:	20000000 	.word	0x20000000
 80023d4:	20000004 	.word	0x20000004

080023d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	@ 0x24
 80023dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80023de:	4b8c      	ldr	r3, [pc, #560]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 0318 	and.w	r3, r3, #24
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d102      	bne.n	80023f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023ea:	4b8a      	ldr	r3, [pc, #552]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x23c>)
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	e107      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023f0:	4b87      	ldr	r3, [pc, #540]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f003 0318 	and.w	r3, r3, #24
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d112      	bne.n	8002422 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80023fc:	4b84      	ldr	r3, [pc, #528]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002408:	4b81      	ldr	r3, [pc, #516]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	08db      	lsrs	r3, r3, #3
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	4a81      	ldr	r2, [pc, #516]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x240>)
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	e0f1      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800241c:	4b7e      	ldr	r3, [pc, #504]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x240>)
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	e0ee      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002422:	4b7b      	ldr	r3, [pc, #492]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f003 0318 	and.w	r3, r3, #24
 800242a:	2b10      	cmp	r3, #16
 800242c:	d102      	bne.n	8002434 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800242e:	4b7b      	ldr	r3, [pc, #492]	@ (800261c <HAL_RCC_GetSysClockFreq+0x244>)
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e0e5      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002434:	4b76      	ldr	r3, [pc, #472]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	f003 0318 	and.w	r3, r3, #24
 800243c:	2b18      	cmp	r3, #24
 800243e:	f040 80dd 	bne.w	80025fc <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002442:	4b73      	ldr	r3, [pc, #460]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 8002444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800244c:	4b70      	ldr	r3, [pc, #448]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002456:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002458:	4b6d      	ldr	r3, [pc, #436]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 800245a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002464:	4b6a      	ldr	r3, [pc, #424]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 8002466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002468:	08db      	lsrs	r3, r3, #3
 800246a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80b7 	beq.w	80025f6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0xbe>
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d056      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0x16a>
 8002494:	e077      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002496:	4b5e      	ldr	r3, [pc, #376]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d02d      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80024a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	08db      	lsrs	r3, r3, #3
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	4a5a      	ldr	r2, [pc, #360]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x240>)
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	ee07 3a90 	vmov	s15, r3
 80024c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024cc:	4b50      	ldr	r3, [pc, #320]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 80024ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80024dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80024e0:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002620 <HAL_RCC_GetSysClockFreq+0x248>
 80024e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80024ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80024fc:	e065      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	ee07 3a90 	vmov	s15, r3
 8002504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002508:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002624 <HAL_RCC_GetSysClockFreq+0x24c>
 800250c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002510:	4b3f      	ldr	r3, [pc, #252]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 8002512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002520:	ed97 6a02 	vldr	s12, [r7, #8]
 8002524:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002620 <HAL_RCC_GetSysClockFreq+0x248>
 8002528:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800252c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002530:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002534:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002540:	e043      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	ee07 3a90 	vmov	s15, r3
 8002548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800254c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002628 <HAL_RCC_GetSysClockFreq+0x250>
 8002550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002554:	4b2e      	ldr	r3, [pc, #184]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 8002556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002564:	ed97 6a02 	vldr	s12, [r7, #8]
 8002568:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002620 <HAL_RCC_GetSysClockFreq+0x248>
 800256c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002570:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002574:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002578:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800257c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002580:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002584:	e021      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002590:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800262c <HAL_RCC_GetSysClockFreq+0x254>
 8002594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002598:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 800259a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800259c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a0:	ee07 3a90 	vmov	s15, r3
 80025a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80025a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ac:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002620 <HAL_RCC_GetSysClockFreq+0x248>
 80025b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80025b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80025c8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80025ca:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x238>)
 80025cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ce:	0a5b      	lsrs	r3, r3, #9
 80025d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025d4:	3301      	adds	r3, #1
 80025d6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025e2:	edd7 6a06 	vldr	s13, [r7, #24]
 80025e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ee:	ee17 3a90 	vmov	r3, s15
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	e004      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e001      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x240>)
 80025fe:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002600:	69fb      	ldr	r3, [r7, #28]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3724      	adds	r7, #36	@ 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	44020c00 	.word	0x44020c00
 8002614:	003d0900 	.word	0x003d0900
 8002618:	03d09000 	.word	0x03d09000
 800261c:	017d7840 	.word	0x017d7840
 8002620:	46000000 	.word	0x46000000
 8002624:	4c742400 	.word	0x4c742400
 8002628:	4bbebc20 	.word	0x4bbebc20
 800262c:	4a742400 	.word	0x4a742400

08002630 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002634:	f7ff fed0 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b08      	ldr	r3, [pc, #32]	@ (800265c <HAL_RCC_GetHCLKFreq+0x2c>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800263e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002642:	4907      	ldr	r1, [pc, #28]	@ (8002660 <HAL_RCC_GetHCLKFreq+0x30>)
 8002644:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002646:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800264a:	fa22 f303 	lsr.w	r3, r2, r3
 800264e:	4a05      	ldr	r2, [pc, #20]	@ (8002664 <HAL_RCC_GetHCLKFreq+0x34>)
 8002650:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002652:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <HAL_RCC_GetHCLKFreq+0x34>)
 8002654:	681b      	ldr	r3, [r3, #0]
}
 8002656:	4618      	mov	r0, r3
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	44020c00 	.word	0x44020c00
 8002660:	0800c0d4 	.word	0x0800c0d4
 8002664:	20000000 	.word	0x20000000

08002668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800266c:	f7ff ffe0 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	@ (8002690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	44020c00 	.word	0x44020c00
 8002690:	0800c0e4 	.word	0x0800c0e4

08002694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002698:	f7ff ffca 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4904      	ldr	r1, [pc, #16]	@ (80026bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	44020c00 	.word	0x44020c00
 80026bc:	0800c0e4 	.word	0x0800c0e4

080026c0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80026c4:	f7ff ffb4 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	0b1b      	lsrs	r3, r3, #12
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4904      	ldr	r1, [pc, #16]	@ (80026e8 <HAL_RCC_GetPCLK3Freq+0x28>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	44020c00 	.word	0x44020c00
 80026e8:	0800c0e4 	.word	0x0800c0e4

080026ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	221f      	movs	r2, #31
 80026fa:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80026fc:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <HAL_RCC_GetClockConfig+0x68>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	f003 0203 	and.w	r2, r3, #3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8002708:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <HAL_RCC_GetClockConfig+0x68>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f003 020f 	and.w	r2, r3, #15
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800273a:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <HAL_RCC_GetClockConfig+0x6c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 020f 	and.w	r2, r3, #15
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	601a      	str	r2, [r3, #0]
}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	44020c00 	.word	0x44020c00
 8002758:	40022000 	.word	0x40022000

0800275c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800275c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002760:	b0d8      	sub	sp, #352	@ 0x160
 8002762:	af00      	add	r7, sp, #0
 8002764:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002768:	2300      	movs	r3, #0
 800276a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800276e:	2300      	movs	r3, #0
 8002770:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002774:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002780:	2500      	movs	r5, #0
 8002782:	ea54 0305 	orrs.w	r3, r4, r5
 8002786:	d00b      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002788:	4bcd      	ldr	r3, [pc, #820]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800278a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800278e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002792:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	4ac9      	ldr	r2, [pc, #804]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800279a:	430b      	orrs	r3, r1
 800279c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	f002 0801 	and.w	r8, r2, #1
 80027ac:	f04f 0900 	mov.w	r9, #0
 80027b0:	ea58 0309 	orrs.w	r3, r8, r9
 80027b4:	d042      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80027b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80027ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d823      	bhi.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80027c0:	a201      	add	r2, pc, #4	@ (adr r2, 80027c8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80027c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c6:	bf00      	nop
 80027c8:	08002811 	.word	0x08002811
 80027cc:	080027e1 	.word	0x080027e1
 80027d0:	080027f5 	.word	0x080027f5
 80027d4:	08002811 	.word	0x08002811
 80027d8:	08002811 	.word	0x08002811
 80027dc:	08002811 	.word	0x08002811
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80027e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80027e4:	3308      	adds	r3, #8
 80027e6:	4618      	mov	r0, r3
 80027e8:	f004 feda 	bl	80075a0 <RCCEx_PLL2_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80027f2:	e00e      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80027f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80027f8:	3330      	adds	r3, #48	@ 0x30
 80027fa:	4618      	mov	r0, r3
 80027fc:	f004 ff68 	bl	80076d0 <RCCEx_PLL3_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002806:	e004      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800280e:	e000      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002812:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10c      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800281a:	4ba9      	ldr	r3, [pc, #676]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800281c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002820:	f023 0107 	bic.w	r1, r3, #7
 8002824:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282a:	4aa5      	ldr	r2, [pc, #660]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800282c:	430b      	orrs	r3, r1
 800282e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002832:	e003      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002834:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002838:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800283c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	f002 0a02 	and.w	sl, r2, #2
 8002848:	f04f 0b00 	mov.w	fp, #0
 800284c:	ea5a 030b 	orrs.w	r3, sl, fp
 8002850:	f000 8088 	beq.w	8002964 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002854:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800285a:	2b28      	cmp	r3, #40	@ 0x28
 800285c:	d868      	bhi.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800285e:	a201      	add	r2, pc, #4	@ (adr r2, 8002864 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	08002939 	.word	0x08002939
 8002868:	08002931 	.word	0x08002931
 800286c:	08002931 	.word	0x08002931
 8002870:	08002931 	.word	0x08002931
 8002874:	08002931 	.word	0x08002931
 8002878:	08002931 	.word	0x08002931
 800287c:	08002931 	.word	0x08002931
 8002880:	08002931 	.word	0x08002931
 8002884:	08002909 	.word	0x08002909
 8002888:	08002931 	.word	0x08002931
 800288c:	08002931 	.word	0x08002931
 8002890:	08002931 	.word	0x08002931
 8002894:	08002931 	.word	0x08002931
 8002898:	08002931 	.word	0x08002931
 800289c:	08002931 	.word	0x08002931
 80028a0:	08002931 	.word	0x08002931
 80028a4:	0800291d 	.word	0x0800291d
 80028a8:	08002931 	.word	0x08002931
 80028ac:	08002931 	.word	0x08002931
 80028b0:	08002931 	.word	0x08002931
 80028b4:	08002931 	.word	0x08002931
 80028b8:	08002931 	.word	0x08002931
 80028bc:	08002931 	.word	0x08002931
 80028c0:	08002931 	.word	0x08002931
 80028c4:	08002939 	.word	0x08002939
 80028c8:	08002931 	.word	0x08002931
 80028cc:	08002931 	.word	0x08002931
 80028d0:	08002931 	.word	0x08002931
 80028d4:	08002931 	.word	0x08002931
 80028d8:	08002931 	.word	0x08002931
 80028dc:	08002931 	.word	0x08002931
 80028e0:	08002931 	.word	0x08002931
 80028e4:	08002939 	.word	0x08002939
 80028e8:	08002931 	.word	0x08002931
 80028ec:	08002931 	.word	0x08002931
 80028f0:	08002931 	.word	0x08002931
 80028f4:	08002931 	.word	0x08002931
 80028f8:	08002931 	.word	0x08002931
 80028fc:	08002931 	.word	0x08002931
 8002900:	08002931 	.word	0x08002931
 8002904:	08002939 	.word	0x08002939
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002908:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800290c:	3308      	adds	r3, #8
 800290e:	4618      	mov	r0, r3
 8002910:	f004 fe46 	bl	80075a0 <RCCEx_PLL2_Config>
 8002914:	4603      	mov	r3, r0
 8002916:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800291a:	e00e      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800291c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002920:	3330      	adds	r3, #48	@ 0x30
 8002922:	4618      	mov	r0, r3
 8002924:	f004 fed4 	bl	80076d0 <RCCEx_PLL3_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800292e:	e004      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002936:	e000      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800293a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10c      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002942:	4b5f      	ldr	r3, [pc, #380]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002948:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800294c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002952:	4a5b      	ldr	r2, [pc, #364]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002954:	430b      	orrs	r3, r1
 8002956:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800295a:	e003      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800295c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002960:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f002 0304 	and.w	r3, r2, #4
 8002970:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8002974:	2300      	movs	r3, #0
 8002976:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800297a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800297e:	460b      	mov	r3, r1
 8002980:	4313      	orrs	r3, r2
 8002982:	d04e      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002984:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002988:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800298a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800298e:	d02c      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002990:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002994:	d825      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800299a:	d028      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x292>
 800299c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029a0:	d81f      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80029a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80029a4:	d025      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80029a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80029a8:	d81b      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80029aa:	2b80      	cmp	r3, #128	@ 0x80
 80029ac:	d00f      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x272>
 80029ae:	2b80      	cmp	r3, #128	@ 0x80
 80029b0:	d817      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01f      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80029b6:	2b40      	cmp	r3, #64	@ 0x40
 80029b8:	d113      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80029be:	3308      	adds	r3, #8
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 fded 	bl	80075a0 <RCCEx_PLL2_Config>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80029cc:	e014      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80029ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80029d2:	3330      	adds	r3, #48	@ 0x30
 80029d4:	4618      	mov	r0, r3
 80029d6:	f004 fe7b 	bl	80076d0 <RCCEx_PLL3_Config>
 80029da:	4603      	mov	r3, r0
 80029dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80029e0:	e00a      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80029e8:	e006      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80029ea:	bf00      	nop
 80029ec:	e004      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80029ee:	bf00      	nop
 80029f0:	e002      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80029f2:	bf00      	nop
 80029f4:	e000      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80029f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10c      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002a00:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002a02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002a06:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002a0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a10:	4a2b      	ldr	r2, [pc, #172]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002a12:	430b      	orrs	r3, r1
 8002a14:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002a18:	e003      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002a1e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2a:	f002 0308 	and.w	r3, r2, #8
 8002a2e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002a38:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	d056      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002a42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002a46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a48:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002a4c:	d031      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002a4e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002a52:	d82a      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a58:	d02d      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002a5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a5e:	d824      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002a60:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002a64:	d029      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002a66:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002a6a:	d81e      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a70:	d011      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a76:	d818      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d023      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a80:	d113      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002a86:	3308      	adds	r3, #8
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f004 fd89 	bl	80075a0 <RCCEx_PLL2_Config>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002a94:	e017      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002a9a:	3330      	adds	r3, #48	@ 0x30
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f004 fe17 	bl	80076d0 <RCCEx_PLL3_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002aa8:	e00d      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002ab0:	e009      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002ab2:	bf00      	nop
 8002ab4:	e007      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002ab6:	bf00      	nop
 8002ab8:	e005      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002aba:	bf00      	nop
 8002abc:	e003      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002abe:	bf00      	nop
 8002ac0:	44020c00 	.word	0x44020c00
        break;
 8002ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ac6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002ace:	4bbb      	ldr	r3, [pc, #748]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002ad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ad4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002ad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002adc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ade:	4ab7      	ldr	r2, [pc, #732]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002ae6:	e003      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002aec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af8:	f002 0310 	and.w	r3, r2, #16
 8002afc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8002b06:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	d053      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002b10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002b14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b16:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002b1a:	d031      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002b1c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002b20:	d82a      	bhi.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002b22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b26:	d02d      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002b28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b2c:	d824      	bhi.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002b2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b32:	d029      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002b34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b38:	d81e      	bhi.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b3e:	d011      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b44:	d818      	bhi.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d020      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b4e:	d113      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002b54:	3308      	adds	r3, #8
 8002b56:	4618      	mov	r0, r3
 8002b58:	f004 fd22 	bl	80075a0 <RCCEx_PLL2_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002b62:	e014      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002b68:	3330      	adds	r3, #48	@ 0x30
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f004 fdb0 	bl	80076d0 <RCCEx_PLL3_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002b76:	e00a      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002b7e:	e006      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002b80:	bf00      	nop
 8002b82:	e004      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002b84:	bf00      	nop
 8002b86:	e002      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002b88:	bf00      	nop
 8002b8a:	e000      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002b96:	4b89      	ldr	r3, [pc, #548]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b9c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ba6:	4a85      	ldr	r2, [pc, #532]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002bae:	e003      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002bb4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc0:	f002 0320 	and.w	r3, r2, #32
 8002bc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002bce:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	d053      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bde:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002be2:	d031      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002be4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002be8:	d82a      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002bea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bee:	d02d      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bf4:	d824      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002bf6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002bfa:	d029      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002bfc:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002c00:	d81e      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c06:	d011      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c0c:	d818      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d020      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8002c12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c16:	d113      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f004 fcbe 	bl	80075a0 <RCCEx_PLL2_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002c2a:	e014      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002c30:	3330      	adds	r3, #48	@ 0x30
 8002c32:	4618      	mov	r0, r3
 8002c34:	f004 fd4c 	bl	80076d0 <RCCEx_PLL3_Config>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002c46:	e006      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002c48:	bf00      	nop
 8002c4a:	e004      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002c4c:	bf00      	nop
 8002c4e:	e002      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002c50:	bf00      	nop
 8002c52:	e000      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002c5e:	4b57      	ldr	r3, [pc, #348]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002c60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c64:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8002c68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6e:	4a53      	ldr	r2, [pc, #332]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002c70:	430b      	orrs	r3, r1
 8002c72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002c76:	e003      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002c7c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002c8c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002c96:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	d053      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8002ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002caa:	d031      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002cac:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002cb0:	d82a      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cb6:	d02d      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002cb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cbc:	d824      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002cbe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002cc2:	d029      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002cc4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002cc8:	d81e      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002cca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002cce:	d011      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002cd0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002cd4:	d818      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d020      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002cda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cde:	d113      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f004 fc5a 	bl	80075a0 <RCCEx_PLL2_Config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002cf2:	e014      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002cf8:	3330      	adds	r3, #48	@ 0x30
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f004 fce8 	bl	80076d0 <RCCEx_PLL3_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002d06:	e00a      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002d0e:	e006      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002d10:	bf00      	nop
 8002d12:	e004      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002d14:	bf00      	nop
 8002d16:	e002      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002d18:	bf00      	nop
 8002d1a:	e000      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8002d26:	4b25      	ldr	r3, [pc, #148]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002d28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d2c:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8002d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d36:	4a21      	ldr	r2, [pc, #132]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002d3e:	e003      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002d44:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002d54:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002d5e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8002d62:	460b      	mov	r3, r1
 8002d64:	4313      	orrs	r3, r2
 8002d66:	d055      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8002d68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002d6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d6e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002d72:	d033      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002d74:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002d78:	d82c      	bhi.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002d7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d7e:	d02f      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8002d80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d84:	d826      	bhi.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002d86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d8a:	d02b      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002d8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d90:	d820      	bhi.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002d92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d96:	d013      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002d98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d9c:	d81a      	bhi.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d022      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8002da2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002da6:	d115      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002da8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002dac:	3308      	adds	r3, #8
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 fbf6 	bl	80075a0 <RCCEx_PLL2_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002dba:	e016      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002dbc:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002dc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002dc4:	3330      	adds	r3, #48	@ 0x30
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f004 fc82 	bl	80076d0 <RCCEx_PLL3_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002dd2:	e00a      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002dda:	e006      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002ddc:	bf00      	nop
 8002dde:	e004      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002de0:	bf00      	nop
 8002de2:	e002      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002de4:	bf00      	nop
 8002de6:	e000      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8002df2:	4bbb      	ldr	r3, [pc, #748]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002df8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e02:	4ab7      	ldr	r2, [pc, #732]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002e04:	430b      	orrs	r3, r1
 8002e06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002e0a:	e003      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002e10:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8002e14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8002e20:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002e2a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4313      	orrs	r3, r2
 8002e32:	d053      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8002e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e3a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002e3e:	d031      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8002e40:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002e44:	d82a      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002e46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e4a:	d02d      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8002e4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e50:	d824      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002e52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e56:	d029      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x750>
 8002e58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e5c:	d81e      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002e5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e62:	d011      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8002e64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e68:	d818      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d020      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8002e6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e72:	d113      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e78:	3308      	adds	r3, #8
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f004 fb90 	bl	80075a0 <RCCEx_PLL2_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002e86:	e014      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e8c:	3330      	adds	r3, #48	@ 0x30
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f004 fc1e 	bl	80076d0 <RCCEx_PLL3_Config>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002ea2:	e006      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002ea4:	bf00      	nop
 8002ea6:	e004      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002ea8:	bf00      	nop
 8002eaa:	e002      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002eac:	bf00      	nop
 8002eae:	e000      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8002eba:	4b89      	ldr	r3, [pc, #548]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002ebc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ec0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002ec4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eca:	4a85      	ldr	r2, [pc, #532]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002ed2:	e003      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002ed8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8002edc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8002ee8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002ef2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	d055      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8002efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f04:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8002f08:	d031      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x812>
 8002f0a:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8002f0e:	d82a      	bhi.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002f10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f14:	d02d      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8002f16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f1a:	d824      	bhi.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002f1c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8002f20:	d029      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002f22:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8002f26:	d81e      	bhi.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002f28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f2c:	d011      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8002f2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f32:	d818      	bhi.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d020      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8002f38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f3c:	d113      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f42:	3308      	adds	r3, #8
 8002f44:	4618      	mov	r0, r3
 8002f46:	f004 fb2b 	bl	80075a0 <RCCEx_PLL2_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002f50:	e014      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f56:	3330      	adds	r3, #48	@ 0x30
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f004 fbb9 	bl	80076d0 <RCCEx_PLL3_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002f64:	e00a      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002f6c:	e006      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002f6e:	bf00      	nop
 8002f70:	e004      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002f72:	bf00      	nop
 8002f74:	e002      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002f76:	bf00      	nop
 8002f78:	e000      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10d      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8002f84:	4b56      	ldr	r3, [pc, #344]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002f86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f8a:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8002f8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f96:	4a52      	ldr	r2, [pc, #328]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002f9e:	e003      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002fa4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8002fa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002fb4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002fbe:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	d044      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8002fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fd0:	2b05      	cmp	r3, #5
 8002fd2:	d823      	bhi.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8002fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fdc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08003025 	.word	0x08003025
 8002fe0:	08002ff5 	.word	0x08002ff5
 8002fe4:	08003009 	.word	0x08003009
 8002fe8:	08003025 	.word	0x08003025
 8002fec:	08003025 	.word	0x08003025
 8002ff0:	08003025 	.word	0x08003025
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002ff8:	3308      	adds	r3, #8
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f004 fad0 	bl	80075a0 <RCCEx_PLL2_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003006:	e00e      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003008:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800300c:	3330      	adds	r3, #48	@ 0x30
 800300e:	4618      	mov	r0, r3
 8003010:	f004 fb5e 	bl	80076d0 <RCCEx_PLL3_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800301a:	e004      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003022:	e000      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003026:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10d      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800302e:	4b2c      	ldr	r3, [pc, #176]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003030:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003034:	f023 0107 	bic.w	r1, r3, #7
 8003038:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800303c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003040:	4a27      	ldr	r2, [pc, #156]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003042:	430b      	orrs	r3, r1
 8003044:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003048:	e003      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800304e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003052:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800305e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003062:	2300      	movs	r3, #0
 8003064:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003068:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800306c:	460b      	mov	r3, r1
 800306e:	4313      	orrs	r3, r2
 8003070:	d04f      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003072:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307a:	2b50      	cmp	r3, #80	@ 0x50
 800307c:	d029      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800307e:	2b50      	cmp	r3, #80	@ 0x50
 8003080:	d823      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003082:	2b40      	cmp	r3, #64	@ 0x40
 8003084:	d027      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003086:	2b40      	cmp	r3, #64	@ 0x40
 8003088:	d81f      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800308a:	2b30      	cmp	r3, #48	@ 0x30
 800308c:	d025      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800308e:	2b30      	cmp	r3, #48	@ 0x30
 8003090:	d81b      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003092:	2b20      	cmp	r3, #32
 8003094:	d00f      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003096:	2b20      	cmp	r3, #32
 8003098:	d817      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d022      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d113      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030a6:	3308      	adds	r3, #8
 80030a8:	4618      	mov	r0, r3
 80030aa:	f004 fa79 	bl	80075a0 <RCCEx_PLL2_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80030b4:	e017      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030ba:	3330      	adds	r3, #48	@ 0x30
 80030bc:	4618      	mov	r0, r3
 80030be:	f004 fb07 	bl	80076d0 <RCCEx_PLL3_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80030c8:	e00d      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80030d0:	e009      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80030d2:	bf00      	nop
 80030d4:	e007      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80030d6:	bf00      	nop
 80030d8:	e005      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80030da:	bf00      	nop
 80030dc:	e003      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80030de:	bf00      	nop
 80030e0:	44020c00 	.word	0x44020c00
        break;
 80030e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10d      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80030ee:	4baf      	ldr	r3, [pc, #700]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80030f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80030f4:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80030f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003100:	4aaa      	ldr	r2, [pc, #680]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003102:	430b      	orrs	r3, r1
 8003104:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003108:	e003      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800310e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003112:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800311e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003122:	2300      	movs	r3, #0
 8003124:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003128:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800312c:	460b      	mov	r3, r1
 800312e:	4313      	orrs	r3, r2
 8003130:	d055      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003132:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003136:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800313a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800313e:	d031      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003140:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003144:	d82a      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003146:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800314a:	d02d      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800314c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003150:	d824      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003152:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003156:	d029      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003158:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800315c:	d81e      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800315e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003162:	d011      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003164:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003168:	d818      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800316a:	2b00      	cmp	r3, #0
 800316c:	d020      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800316e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003172:	d113      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003174:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003178:	3308      	adds	r3, #8
 800317a:	4618      	mov	r0, r3
 800317c:	f004 fa10 	bl	80075a0 <RCCEx_PLL2_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003186:	e014      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003188:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800318c:	3330      	adds	r3, #48	@ 0x30
 800318e:	4618      	mov	r0, r3
 8003190:	f004 fa9e 	bl	80076d0 <RCCEx_PLL3_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800319a:	e00a      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80031a2:	e006      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80031a4:	bf00      	nop
 80031a6:	e004      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80031a8:	bf00      	nop
 80031aa:	e002      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80031ac:	bf00      	nop
 80031ae:	e000      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80031b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10d      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80031ba:	4b7c      	ldr	r3, [pc, #496]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80031bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80031c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031cc:	4a77      	ldr	r2, [pc, #476]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80031ce:	430b      	orrs	r3, r1
 80031d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031d4:	e003      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80031da:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80031ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80031f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80031f8:	460b      	mov	r3, r1
 80031fa:	4313      	orrs	r3, r2
 80031fc:	d03d      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80031fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003206:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800320a:	d01b      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 800320c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003210:	d814      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003212:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003216:	d017      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003218:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800321c:	d80e      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d014      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003226:	d109      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003228:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800322c:	3330      	adds	r3, #48	@ 0x30
 800322e:	4618      	mov	r0, r3
 8003230:	f004 fa4e 	bl	80076d0 <RCCEx_PLL3_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800323a:	e008      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003242:	e004      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003244:	bf00      	nop
 8003246:	e002      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003248:	bf00      	nop
 800324a:	e000      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800324c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10d      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003256:	4b55      	ldr	r3, [pc, #340]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003258:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800325c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003260:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003268:	4a50      	ldr	r2, [pc, #320]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800326a:	430b      	orrs	r3, r1
 800326c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003270:	e003      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003272:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003276:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800327a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800327e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003282:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003286:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800328a:	2300      	movs	r3, #0
 800328c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003290:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003294:	460b      	mov	r3, r1
 8003296:	4313      	orrs	r3, r2
 8003298:	d03d      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800329a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800329e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032a6:	d01b      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80032a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032ac:	d814      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80032ae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032b2:	d017      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80032b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032b8:	d80e      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d014      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80032be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032c2:	d109      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032c8:	3330      	adds	r3, #48	@ 0x30
 80032ca:	4618      	mov	r0, r3
 80032cc:	f004 fa00 	bl	80076d0 <RCCEx_PLL3_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80032d6:	e008      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80032de:	e004      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80032e0:	bf00      	nop
 80032e2:	e002      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80032e4:	bf00      	nop
 80032e6:	e000      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80032e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10d      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80032f2:	4b2e      	ldr	r3, [pc, #184]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80032f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032f8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80032fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003304:	4a29      	ldr	r2, [pc, #164]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003306:	430b      	orrs	r3, r1
 8003308:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800330c:	e003      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003312:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003316:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003322:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003326:	2300      	movs	r3, #0
 8003328:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800332c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003330:	460b      	mov	r3, r1
 8003332:	4313      	orrs	r3, r2
 8003334:	d040      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003336:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800333a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800333e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003342:	d01b      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003344:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003348:	d814      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800334a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800334e:	d017      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003350:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003354:	d80e      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d014      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800335a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800335e:	d109      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003360:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003364:	3330      	adds	r3, #48	@ 0x30
 8003366:	4618      	mov	r0, r3
 8003368:	f004 f9b2 	bl	80076d0 <RCCEx_PLL3_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003372:	e008      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800337a:	e004      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800337c:	bf00      	nop
 800337e:	e002      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003386:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800338a:	2b00      	cmp	r3, #0
 800338c:	d110      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800338e:	4b07      	ldr	r3, [pc, #28]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003390:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003394:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003398:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800339c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033a0:	4a02      	ldr	r2, [pc, #8]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80033a2:	430b      	orrs	r3, r1
 80033a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80033a8:	e006      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80033aa:	bf00      	nop
 80033ac:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80033b4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	2100      	movs	r1, #0
 80033c2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80033c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80033ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4313      	orrs	r3, r2
 80033d6:	d03d      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80033d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033e4:	d01b      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80033e6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033ea:	d814      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80033ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033f0:	d017      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80033f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033f6:	d80e      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d014      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80033fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003400:	d109      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003402:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003406:	3330      	adds	r3, #48	@ 0x30
 8003408:	4618      	mov	r0, r3
 800340a:	f004 f961 	bl	80076d0 <RCCEx_PLL3_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003414:	e008      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800341c:	e004      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800341e:	bf00      	nop
 8003420:	e002      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003428:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10d      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003430:	4bbe      	ldr	r3, [pc, #760]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003432:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003436:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800343a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800343e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003442:	4aba      	ldr	r2, [pc, #744]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003444:	430b      	orrs	r3, r1
 8003446:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800344a:	e003      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003450:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003454:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003460:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800346a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800346e:	460b      	mov	r3, r1
 8003470:	4313      	orrs	r3, r2
 8003472:	d035      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003474:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003478:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800347c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003480:	d015      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003482:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003486:	d80e      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d012      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003490:	d109      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003492:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003496:	3330      	adds	r3, #48	@ 0x30
 8003498:	4618      	mov	r0, r3
 800349a:	f004 f919 	bl	80076d0 <RCCEx_PLL3_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80034a4:	e006      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80034ac:	e002      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80034b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10d      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80034bc:	4b9b      	ldr	r3, [pc, #620]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80034be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034c2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80034c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80034ce:	4a97      	ldr	r2, [pc, #604]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80034d0:	430b      	orrs	r3, r1
 80034d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80034d6:	e003      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034dc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80034e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	2100      	movs	r1, #0
 80034ea:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80034ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4313      	orrs	r3, r2
 80034fe:	d00e      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003500:	4b8a      	ldr	r3, [pc, #552]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	4a89      	ldr	r2, [pc, #548]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003506:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800350a:	61d3      	str	r3, [r2, #28]
 800350c:	4b87      	ldr	r3, [pc, #540]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800350e:	69d9      	ldr	r1, [r3, #28]
 8003510:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003514:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003518:	4a84      	ldr	r2, [pc, #528]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800351a:	430b      	orrs	r3, r1
 800351c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800351e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800352a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003534:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003538:	460b      	mov	r3, r1
 800353a:	4313      	orrs	r3, r2
 800353c:	d055      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800353e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003542:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003546:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800354a:	d031      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800354c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003550:	d82a      	bhi.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003556:	d02d      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800355c:	d824      	bhi.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800355e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003562:	d029      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003564:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003568:	d81e      	bhi.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800356a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800356e:	d011      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003574:	d818      	bhi.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d020      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800357a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800357e:	d113      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003584:	3308      	adds	r3, #8
 8003586:	4618      	mov	r0, r3
 8003588:	f004 f80a 	bl	80075a0 <RCCEx_PLL2_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003592:	e014      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003594:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003598:	3330      	adds	r3, #48	@ 0x30
 800359a:	4618      	mov	r0, r3
 800359c:	f004 f898 	bl	80076d0 <RCCEx_PLL3_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80035a6:	e00a      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80035ae:	e006      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80035b0:	bf00      	nop
 80035b2:	e004      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80035b4:	bf00      	nop
 80035b6:	e002      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80035b8:	bf00      	nop
 80035ba:	e000      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80035bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10d      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80035c6:	4b59      	ldr	r3, [pc, #356]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80035c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80035cc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80035d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80035d8:	4a54      	ldr	r2, [pc, #336]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80035da:	430b      	orrs	r3, r1
 80035dc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80035e0:	e003      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80035e6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80035ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80035f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003600:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003604:	460b      	mov	r3, r1
 8003606:	4313      	orrs	r3, r2
 8003608:	d055      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800360a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800360e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003612:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003616:	d031      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003618:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800361c:	d82a      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800361e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003622:	d02d      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003624:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003628:	d824      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800362a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800362e:	d029      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003630:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003634:	d81e      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800363a:	d011      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800363c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003640:	d818      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d020      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800364a:	d113      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800364c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003650:	3308      	adds	r3, #8
 8003652:	4618      	mov	r0, r3
 8003654:	f003 ffa4 	bl	80075a0 <RCCEx_PLL2_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800365e:	e014      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003660:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003664:	3330      	adds	r3, #48	@ 0x30
 8003666:	4618      	mov	r0, r3
 8003668:	f004 f832 	bl	80076d0 <RCCEx_PLL3_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003672:	e00a      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800367a:	e006      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800367c:	bf00      	nop
 800367e:	e004      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003680:	bf00      	nop
 8003682:	e002      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003684:	bf00      	nop
 8003686:	e000      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10d      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003692:	4b26      	ldr	r3, [pc, #152]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003694:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003698:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800369c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036a4:	4a21      	ldr	r2, [pc, #132]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80036a6:	430b      	orrs	r3, r1
 80036a8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80036ac:	e003      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80036b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80036b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	2100      	movs	r1, #0
 80036c0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80036d0:	460b      	mov	r3, r1
 80036d2:	4313      	orrs	r3, r2
 80036d4:	d057      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80036d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036e2:	d033      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80036e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036e8:	d82c      	bhi.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80036ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036ee:	d02f      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80036f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036f4:	d826      	bhi.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80036f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036fa:	d02b      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80036fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003700:	d820      	bhi.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003706:	d013      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800370c:	d81a      	bhi.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d022      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8003712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003716:	d115      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003718:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800371c:	3308      	adds	r3, #8
 800371e:	4618      	mov	r0, r3
 8003720:	f003 ff3e 	bl	80075a0 <RCCEx_PLL2_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800372a:	e016      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800372c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003730:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003734:	3330      	adds	r3, #48	@ 0x30
 8003736:	4618      	mov	r0, r3
 8003738:	f003 ffca 	bl	80076d0 <RCCEx_PLL3_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003742:	e00a      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800374a:	e006      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800374c:	bf00      	nop
 800374e:	e004      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003750:	bf00      	nop
 8003752:	e002      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003754:	bf00      	nop
 8003756:	e000      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800375a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10d      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003762:	4bbb      	ldr	r3, [pc, #748]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003764:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003768:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800376c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003770:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003774:	4ab6      	ldr	r2, [pc, #728]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003776:	430b      	orrs	r3, r1
 8003778:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800377c:	e003      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003782:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003786:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	2100      	movs	r1, #0
 8003790:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800379c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4313      	orrs	r3, r2
 80037a4:	d055      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80037a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037ae:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80037b2:	d031      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80037b4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80037b8:	d82a      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80037ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037be:	d02d      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80037c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037c4:	d824      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80037c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037ca:	d029      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80037cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037d0:	d81e      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80037d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037d6:	d011      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80037d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037dc:	d818      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d020      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80037e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037e6:	d113      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037ec:	3308      	adds	r3, #8
 80037ee:	4618      	mov	r0, r3
 80037f0:	f003 fed6 	bl	80075a0 <RCCEx_PLL2_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80037fa:	e014      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003800:	3330      	adds	r3, #48	@ 0x30
 8003802:	4618      	mov	r0, r3
 8003804:	f003 ff64 	bl	80076d0 <RCCEx_PLL3_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800380e:	e00a      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003816:	e006      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003818:	bf00      	nop
 800381a:	e004      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800381c:	bf00      	nop
 800381e:	e002      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003820:	bf00      	nop
 8003822:	e000      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003826:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10d      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800382e:	4b88      	ldr	r3, [pc, #544]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003830:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003834:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8003838:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800383c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003840:	4a83      	ldr	r2, [pc, #524]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003842:	430b      	orrs	r3, r1
 8003844:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003848:	e003      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800384e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8003852:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	2100      	movs	r1, #0
 800385c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8003860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003864:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003868:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800386c:	460b      	mov	r3, r1
 800386e:	4313      	orrs	r3, r2
 8003870:	d055      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8003872:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003876:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800387a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800387e:	d031      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003880:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003884:	d82a      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003886:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800388a:	d02d      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800388c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003890:	d824      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003892:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003896:	d029      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8003898:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800389c:	d81e      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800389e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038a2:	d011      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80038a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038a8:	d818      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d020      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80038ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038b2:	d113      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038b8:	3308      	adds	r3, #8
 80038ba:	4618      	mov	r0, r3
 80038bc:	f003 fe70 	bl	80075a0 <RCCEx_PLL2_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80038c6:	e014      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038cc:	3330      	adds	r3, #48	@ 0x30
 80038ce:	4618      	mov	r0, r3
 80038d0:	f003 fefe 	bl	80076d0 <RCCEx_PLL3_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80038da:	e00a      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80038e2:	e006      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80038e4:	bf00      	nop
 80038e6:	e004      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80038e8:	bf00      	nop
 80038ea:	e002      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80038ec:	bf00      	nop
 80038ee:	e000      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80038f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80038fa:	4b55      	ldr	r3, [pc, #340]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80038fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003900:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003904:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003908:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800390c:	4a50      	ldr	r2, [pc, #320]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800390e:	430b      	orrs	r3, r1
 8003910:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003914:	e003      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003916:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800391a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800391e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	2100      	movs	r1, #0
 8003928:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800392c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003930:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003934:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003938:	460b      	mov	r3, r1
 800393a:	4313      	orrs	r3, r2
 800393c:	d055      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800393e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003942:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003946:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800394a:	d031      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800394c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003950:	d82a      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003956:	d02d      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8003958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800395c:	d824      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800395e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003962:	d029      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003964:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003968:	d81e      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800396a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800396e:	d011      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8003970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003974:	d818      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d020      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800397a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800397e:	d113      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003980:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003984:	3308      	adds	r3, #8
 8003986:	4618      	mov	r0, r3
 8003988:	f003 fe0a 	bl	80075a0 <RCCEx_PLL2_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003992:	e014      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003994:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003998:	3330      	adds	r3, #48	@ 0x30
 800399a:	4618      	mov	r0, r3
 800399c:	f003 fe98 	bl	80076d0 <RCCEx_PLL3_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80039a6:	e00a      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80039ae:	e006      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80039b0:	bf00      	nop
 80039b2:	e004      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80039b4:	bf00      	nop
 80039b6:	e002      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80039bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10d      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80039c6:	4b22      	ldr	r3, [pc, #136]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80039c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80039cc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80039d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80039d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80039da:	430b      	orrs	r3, r1
 80039dc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80039e0:	e003      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039e6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80039f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a00:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003a04:	460b      	mov	r3, r1
 8003a06:	4313      	orrs	r3, r2
 8003a08:	d055      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003a0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003a12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a16:	d035      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8003a18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a1c:	d82e      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003a1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a22:	d031      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8003a24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a28:	d828      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003a2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a2e:	d01b      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8003a30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a34:	d822      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8003a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a3e:	d009      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8003a40:	e01c      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a42:	4b03      	ldr	r3, [pc, #12]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	4a02      	ldr	r2, [pc, #8]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a4c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a4e:	e01c      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8003a50:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a58:	3308      	adds	r3, #8
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f003 fda0 	bl	80075a0 <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a66:	e010      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a6c:	3330      	adds	r3, #48	@ 0x30
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f003 fe2e 	bl	80076d0 <RCCEx_PLL3_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a7a:	e006      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a82:	e002      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003a84:	bf00      	nop
 8003a86:	e000      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10d      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003a92:	4bc3      	ldr	r3, [pc, #780]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003aa0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003aa4:	4abe      	ldr	r2, [pc, #760]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003aac:	e003      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ab2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8003ab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003ac2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003acc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	d051      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003ad6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ada:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003ade:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ae2:	d033      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003ae4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ae8:	d82c      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003aea:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003aee:	d02d      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003af0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003af4:	d826      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003afa:	d019      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8003afc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b00:	d820      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8003b06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b0a:	d007      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8003b0c:	e01a      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b0e:	4ba4      	ldr	r3, [pc, #656]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b12:	4aa3      	ldr	r2, [pc, #652]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b18:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b1a:	e018      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b20:	3308      	adds	r3, #8
 8003b22:	4618      	mov	r0, r3
 8003b24:	f003 fd3c 	bl	80075a0 <RCCEx_PLL2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b2e:	e00e      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b34:	3330      	adds	r3, #48	@ 0x30
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 fdca 	bl	80076d0 <RCCEx_PLL3_Config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b42:	e004      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b4a:	e000      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8003b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10d      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003b56:	4b92      	ldr	r3, [pc, #584]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b5c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8003b60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b64:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003b68:	4a8d      	ldr	r2, [pc, #564]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b70:	e003      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b76:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003b7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003b86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b88:	2300      	movs	r3, #0
 8003b8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b8c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b90:	460b      	mov	r3, r1
 8003b92:	4313      	orrs	r3, r2
 8003b94:	d032      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003b96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003b9e:	2b05      	cmp	r3, #5
 8003ba0:	d80f      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d211      	bcs.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d911      	bls.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d109      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f003 fcf3 	bl	80075a0 <RCCEx_PLL2_Config>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003bc0:	e006      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003bc8:	e002      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10d      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003bd8:	4b71      	ldr	r3, [pc, #452]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003bda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bde:	f023 0107 	bic.w	r1, r3, #7
 8003be2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003be6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003bea:	4a6d      	ldr	r2, [pc, #436]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003bec:	430b      	orrs	r3, r1
 8003bee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003bf2:	e003      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bf8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	2100      	movs	r1, #0
 8003c06:	6739      	str	r1, [r7, #112]	@ 0x70
 8003c08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c0e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003c12:	460b      	mov	r3, r1
 8003c14:	4313      	orrs	r3, r2
 8003c16:	d024      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d005      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c2e:	e002      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003c30:	bf00      	nop
 8003c32:	e000      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10d      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003c3e:	4b58      	ldr	r3, [pc, #352]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c44:	f023 0108 	bic.w	r1, r3, #8
 8003c48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c50:	4a53      	ldr	r2, [pc, #332]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003c52:	430b      	orrs	r3, r1
 8003c54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003c58:	e003      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c5e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003c6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c70:	2300      	movs	r3, #0
 8003c72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c74:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f000 80b9 	beq.w	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003c80:	4b48      	ldr	r3, [pc, #288]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	4a47      	ldr	r2, [pc, #284]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c8c:	f7fd faaa 	bl	80011e4 <HAL_GetTick>
 8003c90:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003c94:	e00b      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c96:	f7fd faa5 	bl	80011e4 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d903      	bls.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003cac:	e005      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003cae:	4b3d      	ldr	r3, [pc, #244]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0ed      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8003cba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 8093 	bne.w	8003dea <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cc4:	4b36      	ldr	r3, [pc, #216]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cce:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003cd2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d023      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8003cda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cde:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8003ce2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01b      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cea:	4b2d      	ldr	r3, [pc, #180]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cf8:	4b29      	ldr	r3, [pc, #164]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cfe:	4a28      	ldr	r2, [pc, #160]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d08:	4b25      	ldr	r3, [pc, #148]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d0e:	4a24      	ldr	r2, [pc, #144]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d18:	4a21      	ldr	r2, [pc, #132]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003d1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d22:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d019      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fd fa59 	bl	80011e4 <HAL_GetTick>
 8003d32:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d36:	e00d      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7fd fa54 	bl	80011e4 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003d42:	1ad2      	subs	r2, r2, r3
 8003d44:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d903      	bls.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8003d52:	e006      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d54:	4b12      	ldr	r3, [pc, #72]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0ea      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8003d62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d13a      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003d6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d6e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d7a:	d115      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8003d7c:	4b08      	ldr	r3, [pc, #32]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d88:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d92:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003d96:	4a02      	ldr	r2, [pc, #8]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	61d3      	str	r3, [r2, #28]
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8003d9e:	bf00      	nop
 8003da0:	44020c00 	.word	0x44020c00
 8003da4:	44020800 	.word	0x44020800
 8003da8:	4b9f      	ldr	r3, [pc, #636]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	4a9e      	ldr	r2, [pc, #632]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003dae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003db2:	61d3      	str	r3, [r2, #28]
 8003db4:	4b9c      	ldr	r3, [pc, #624]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dba:	4a9b      	ldr	r2, [pc, #620]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003dbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dc4:	4b98      	ldr	r3, [pc, #608]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003dc6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dce:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd6:	4a94      	ldr	r2, [pc, #592]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dde:	e008      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003de0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003de4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8003de8:	e003      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003dee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003df2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003dfe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e00:	2300      	movs	r3, #0
 8003e02:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	d035      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003e0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e12:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003e16:	2b30      	cmp	r3, #48	@ 0x30
 8003e18:	d014      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8003e1a:	2b30      	cmp	r3, #48	@ 0x30
 8003e1c:	d80e      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d012      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	d80a      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d010      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d106      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e2e:	4b7e      	ldr	r3, [pc, #504]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e32:	4a7d      	ldr	r2, [pc, #500]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e38:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003e3a:	e008      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e42:	e004      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003e44:	bf00      	nop
 8003e46:	e002      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003e48:	bf00      	nop
 8003e4a:	e000      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10d      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003e56:	4b74      	ldr	r3, [pc, #464]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e5c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003e60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e64:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003e68:	4a6f      	ldr	r2, [pc, #444]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003e70:	e003      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e76:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003e86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e88:	2300      	movs	r3, #0
 8003e8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e8c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003e90:	460b      	mov	r3, r1
 8003e92:	4313      	orrs	r3, r2
 8003e94:	d033      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8003e96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e9a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8003ea2:	2b40      	cmp	r3, #64	@ 0x40
 8003ea4:	d007      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8003ea6:	e010      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea8:	4b5f      	ldr	r3, [pc, #380]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eac:	4a5e      	ldr	r2, [pc, #376]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eb2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003eb4:	e00d      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003eb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003eba:	3308      	adds	r3, #8
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f003 fb6f 	bl	80075a0 <RCCEx_PLL2_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003ec8:	e003      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10d      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8003eda:	4b53      	ldr	r3, [pc, #332]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003edc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ee0:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8003ee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ee8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003eec:	4a4e      	ldr	r2, [pc, #312]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003ef4:	e003      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003efa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003efe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003f0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f10:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003f14:	460b      	mov	r3, r1
 8003f16:	4313      	orrs	r3, r2
 8003f18:	d033      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8003f1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f1e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8003f26:	2b80      	cmp	r3, #128	@ 0x80
 8003f28:	d007      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8003f2a:	e010      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f2c:	4b3e      	ldr	r3, [pc, #248]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	4a3d      	ldr	r2, [pc, #244]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f36:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003f38:	e00d      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f3e:	3308      	adds	r3, #8
 8003f40:	4618      	mov	r0, r3
 8003f42:	f003 fb2d 	bl	80075a0 <RCCEx_PLL2_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003f4c:	e003      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10d      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8003f5e:	4b32      	ldr	r3, [pc, #200]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f64:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003f68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f6c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003f70:	4a2d      	ldr	r2, [pc, #180]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f72:	430b      	orrs	r3, r1
 8003f74:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003f78:	e003      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f7e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003f82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f90:	2300      	movs	r3, #0
 8003f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f94:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	d04a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003f9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d827      	bhi.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8003faa:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08003fc5 	.word	0x08003fc5
 8003fb4:	08003fd3 	.word	0x08003fd3
 8003fb8:	08003fe7 	.word	0x08003fe7
 8003fbc:	08004003 	.word	0x08004003
 8003fc0:	08004003 	.word	0x08004003
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fc4:	4b18      	ldr	r3, [pc, #96]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc8:	4a17      	ldr	r2, [pc, #92]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fce:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003fd0:	e018      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f003 fae1 	bl	80075a0 <RCCEx_PLL2_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003fe4:	e00e      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fe6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fea:	3330      	adds	r3, #48	@ 0x30
 8003fec:	4618      	mov	r0, r3
 8003fee:	f003 fb6f 	bl	80076d0 <RCCEx_PLL3_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003ff8:	e004      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004000:	e000      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004004:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10f      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800400c:	4b06      	ldr	r3, [pc, #24]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800400e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004012:	f023 0107 	bic.w	r1, r3, #7
 8004016:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800401a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800401e:	4a02      	ldr	r2, [pc, #8]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004020:	430b      	orrs	r3, r1
 8004022:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004026:	e005      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004028:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004030:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004034:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004040:	643b      	str	r3, [r7, #64]	@ 0x40
 8004042:	2300      	movs	r3, #0
 8004044:	647b      	str	r3, [r7, #68]	@ 0x44
 8004046:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800404a:	460b      	mov	r3, r1
 800404c:	4313      	orrs	r3, r2
 800404e:	f000 8081 	beq.w	8004154 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004052:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004056:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800405a:	2b20      	cmp	r3, #32
 800405c:	d85f      	bhi.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800405e:	a201      	add	r2, pc, #4	@ (adr r2, 8004064 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004064:	080040e9 	.word	0x080040e9
 8004068:	0800411f 	.word	0x0800411f
 800406c:	0800411f 	.word	0x0800411f
 8004070:	0800411f 	.word	0x0800411f
 8004074:	0800411f 	.word	0x0800411f
 8004078:	0800411f 	.word	0x0800411f
 800407c:	0800411f 	.word	0x0800411f
 8004080:	0800411f 	.word	0x0800411f
 8004084:	080040f7 	.word	0x080040f7
 8004088:	0800411f 	.word	0x0800411f
 800408c:	0800411f 	.word	0x0800411f
 8004090:	0800411f 	.word	0x0800411f
 8004094:	0800411f 	.word	0x0800411f
 8004098:	0800411f 	.word	0x0800411f
 800409c:	0800411f 	.word	0x0800411f
 80040a0:	0800411f 	.word	0x0800411f
 80040a4:	0800410b 	.word	0x0800410b
 80040a8:	0800411f 	.word	0x0800411f
 80040ac:	0800411f 	.word	0x0800411f
 80040b0:	0800411f 	.word	0x0800411f
 80040b4:	0800411f 	.word	0x0800411f
 80040b8:	0800411f 	.word	0x0800411f
 80040bc:	0800411f 	.word	0x0800411f
 80040c0:	0800411f 	.word	0x0800411f
 80040c4:	08004127 	.word	0x08004127
 80040c8:	0800411f 	.word	0x0800411f
 80040cc:	0800411f 	.word	0x0800411f
 80040d0:	0800411f 	.word	0x0800411f
 80040d4:	0800411f 	.word	0x0800411f
 80040d8:	0800411f 	.word	0x0800411f
 80040dc:	0800411f 	.word	0x0800411f
 80040e0:	0800411f 	.word	0x0800411f
 80040e4:	08004127 	.word	0x08004127
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e8:	4bab      	ldr	r3, [pc, #684]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80040ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ec:	4aaa      	ldr	r2, [pc, #680]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80040ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040f2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80040f4:	e018      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040fa:	3308      	adds	r3, #8
 80040fc:	4618      	mov	r0, r3
 80040fe:	f003 fa4f 	bl	80075a0 <RCCEx_PLL2_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004108:	e00e      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800410a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800410e:	3330      	adds	r3, #48	@ 0x30
 8004110:	4618      	mov	r0, r3
 8004112:	f003 fadd 	bl	80076d0 <RCCEx_PLL3_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800411c:	e004      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004128:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10d      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004130:	4b99      	ldr	r3, [pc, #612]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004136:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800413a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800413e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004142:	4a95      	ldr	r2, [pc, #596]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004144:	430b      	orrs	r3, r1
 8004146:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800414a:	e003      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004150:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004154:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004160:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004162:	2300      	movs	r3, #0
 8004164:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004166:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800416a:	460b      	mov	r3, r1
 800416c:	4313      	orrs	r3, r2
 800416e:	d04e      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004170:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800417c:	d02e      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800417e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004182:	d827      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004184:	2bc0      	cmp	r3, #192	@ 0xc0
 8004186:	d02b      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004188:	2bc0      	cmp	r3, #192	@ 0xc0
 800418a:	d823      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800418c:	2b80      	cmp	r3, #128	@ 0x80
 800418e:	d017      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004190:	2b80      	cmp	r3, #128	@ 0x80
 8004192:	d81f      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004198:	2b40      	cmp	r3, #64	@ 0x40
 800419a:	d007      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800419c:	e01a      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800419e:	4b7e      	ldr	r3, [pc, #504]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80041a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a2:	4a7d      	ldr	r2, [pc, #500]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80041a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041a8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80041aa:	e01a      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041b0:	3308      	adds	r3, #8
 80041b2:	4618      	mov	r0, r3
 80041b4:	f003 f9f4 	bl	80075a0 <RCCEx_PLL2_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80041be:	e010      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041c4:	3330      	adds	r3, #48	@ 0x30
 80041c6:	4618      	mov	r0, r3
 80041c8:	f003 fa82 	bl	80076d0 <RCCEx_PLL3_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80041d2:	e006      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80041da:	e002      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80041dc:	bf00      	nop
 80041de:	e000      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80041e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10d      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80041ea:	4b6b      	ldr	r3, [pc, #428]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80041ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041f0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80041f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80041fc:	4a66      	ldr	r2, [pc, #408]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80041fe:	430b      	orrs	r3, r1
 8004200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004204:	e003      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004206:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800420a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800420e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800421a:	633b      	str	r3, [r7, #48]	@ 0x30
 800421c:	2300      	movs	r3, #0
 800421e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004220:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004224:	460b      	mov	r3, r1
 8004226:	4313      	orrs	r3, r2
 8004228:	d055      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800422a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800422e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004232:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004236:	d031      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004238:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800423c:	d82a      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800423e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004242:	d02d      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004248:	d824      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800424a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800424e:	d029      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004250:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004254:	d81e      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800425a:	d011      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800425c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004260:	d818      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d020      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800426a:	d113      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800426c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004270:	3308      	adds	r3, #8
 8004272:	4618      	mov	r0, r3
 8004274:	f003 f994 	bl	80075a0 <RCCEx_PLL2_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800427e:	e014      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004280:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004284:	3330      	adds	r3, #48	@ 0x30
 8004286:	4618      	mov	r0, r3
 8004288:	f003 fa22 	bl	80076d0 <RCCEx_PLL3_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004292:	e00a      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800429a:	e006      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800429c:	bf00      	nop
 800429e:	e004      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80042a0:	bf00      	nop
 80042a2:	e002      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80042a4:	bf00      	nop
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80042a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10d      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80042b2:	4b39      	ldr	r3, [pc, #228]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80042b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042b8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80042bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042c0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80042c4:	4a34      	ldr	r2, [pc, #208]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80042c6:	430b      	orrs	r3, r1
 80042c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80042cc:	e003      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80042d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80042e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042e4:	2300      	movs	r3, #0
 80042e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80042ec:	460b      	mov	r3, r1
 80042ee:	4313      	orrs	r3, r2
 80042f0:	d058      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80042f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80042fe:	d031      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004300:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004304:	d82a      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004306:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800430a:	d02d      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800430c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004310:	d824      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004312:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004316:	d029      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004318:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800431c:	d81e      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800431e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004322:	d011      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004328:	d818      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d020      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800432e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004332:	d113      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004334:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004338:	3308      	adds	r3, #8
 800433a:	4618      	mov	r0, r3
 800433c:	f003 f930 	bl	80075a0 <RCCEx_PLL2_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004346:	e014      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004348:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800434c:	3330      	adds	r3, #48	@ 0x30
 800434e:	4618      	mov	r0, r3
 8004350:	f003 f9be 	bl	80076d0 <RCCEx_PLL3_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800435a:	e00a      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004362:	e006      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004364:	bf00      	nop
 8004366:	e004      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004368:	bf00      	nop
 800436a:	e002      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800436c:	bf00      	nop
 800436e:	e000      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004372:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004376:	2b00      	cmp	r3, #0
 8004378:	d110      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800437a:	4b07      	ldr	r3, [pc, #28]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800437c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004380:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004384:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800438c:	4902      	ldr	r1, [pc, #8]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004394:	e006      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004396:	bf00      	nop
 8004398:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80043a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	2100      	movs	r1, #0
 80043ae:	6239      	str	r1, [r7, #32]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80043ba:	460b      	mov	r3, r1
 80043bc:	4313      	orrs	r3, r2
 80043be:	d055      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80043c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80043c8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80043cc:	d031      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80043ce:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80043d2:	d82a      	bhi.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80043d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043d8:	d02d      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80043da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043de:	d824      	bhi.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80043e0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80043e4:	d029      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80043e6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80043ea:	d81e      	bhi.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80043ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f0:	d011      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f6:	d818      	bhi.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80043fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004400:	d113      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004402:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004406:	3308      	adds	r3, #8
 8004408:	4618      	mov	r0, r3
 800440a:	f003 f8c9 	bl	80075a0 <RCCEx_PLL2_Config>
 800440e:	4603      	mov	r3, r0
 8004410:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004414:	e014      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004416:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800441a:	3330      	adds	r3, #48	@ 0x30
 800441c:	4618      	mov	r0, r3
 800441e:	f003 f957 	bl	80076d0 <RCCEx_PLL3_Config>
 8004422:	4603      	mov	r3, r0
 8004424:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004428:	e00a      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004430:	e006      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004432:	bf00      	nop
 8004434:	e004      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800443e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004440:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10d      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004448:	4b88      	ldr	r3, [pc, #544]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800444a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800444e:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8004452:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004456:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800445a:	4984      	ldr	r1, [pc, #528]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004462:	e003      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004468:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800446c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	2100      	movs	r1, #0
 8004476:	61b9      	str	r1, [r7, #24]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004482:	460b      	mov	r3, r1
 8004484:	4313      	orrs	r3, r2
 8004486:	d03d      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004488:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800448c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004490:	2b03      	cmp	r3, #3
 8004492:	d81c      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004494:	a201      	add	r2, pc, #4	@ (adr r2, 800449c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044d7 	.word	0x080044d7
 80044a0:	080044ad 	.word	0x080044ad
 80044a4:	080044bb 	.word	0x080044bb
 80044a8:	080044d7 	.word	0x080044d7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ac:	4b6f      	ldr	r3, [pc, #444]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80044ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b0:	4a6e      	ldr	r2, [pc, #440]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80044b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044b6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80044b8:	e00e      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044be:	3308      	adds	r3, #8
 80044c0:	4618      	mov	r0, r3
 80044c2:	f003 f86d 	bl	80075a0 <RCCEx_PLL2_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80044cc:	e004      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80044d4:	e000      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80044d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10d      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80044e0:	4b62      	ldr	r3, [pc, #392]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80044e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80044e6:	f023 0203 	bic.w	r2, r3, #3
 80044ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80044f2:	495e      	ldr	r1, [pc, #376]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80044fa:	e003      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004500:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	2100      	movs	r1, #0
 800450e:	6139      	str	r1, [r7, #16]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800451a:	460b      	mov	r3, r1
 800451c:	4313      	orrs	r3, r2
 800451e:	d03a      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004524:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800452c:	d00e      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800452e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004532:	d815      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d017      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800453c:	d110      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800453e:	4b4b      	ldr	r3, [pc, #300]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004542:	4a4a      	ldr	r2, [pc, #296]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004548:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800454a:	e00e      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800454c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004550:	3308      	adds	r3, #8
 8004552:	4618      	mov	r0, r3
 8004554:	f003 f824 	bl	80075a0 <RCCEx_PLL2_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800455e:	e004      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004566:	e000      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10d      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004572:	4b3e      	ldr	r3, [pc, #248]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800457c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004580:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004584:	4939      	ldr	r1, [pc, #228]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800458c:	e003      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004592:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004596:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	2100      	movs	r1, #0
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045ac:	460b      	mov	r3, r1
 80045ae:	4313      	orrs	r3, r2
 80045b0:	d038      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80045b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80045ba:	2b30      	cmp	r3, #48	@ 0x30
 80045bc:	d01b      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80045be:	2b30      	cmp	r3, #48	@ 0x30
 80045c0:	d815      	bhi.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80045c2:	2b10      	cmp	r3, #16
 80045c4:	d002      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d007      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80045ca:	e010      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045cc:	4b27      	ldr	r3, [pc, #156]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80045ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d0:	4a26      	ldr	r2, [pc, #152]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80045d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80045d8:	e00e      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045de:	3330      	adds	r3, #48	@ 0x30
 80045e0:	4618      	mov	r0, r3
 80045e2:	f003 f875 	bl	80076d0 <RCCEx_PLL3_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80045ec:	e004      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80045f4:	e000      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80045f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10d      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004600:	4b1a      	ldr	r3, [pc, #104]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004602:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004606:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800460a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800460e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004612:	4916      	ldr	r1, [pc, #88]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800461a:	e003      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004620:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004624:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	2100      	movs	r1, #0
 800462e:	6039      	str	r1, [r7, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	e9d7 1200 	ldrd	r1, r2, [r7]
 800463a:	460b      	mov	r3, r1
 800463c:	4313      	orrs	r3, r2
 800463e:	d00c      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004640:	4b0a      	ldr	r3, [pc, #40]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004642:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004646:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800464a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800464e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8004652:	4906      	ldr	r1, [pc, #24]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800465a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800465e:	4618      	mov	r0, r3
 8004660:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8004664:	46bd      	mov	sp, r7
 8004666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800466a:	bf00      	nop
 800466c:	44020c00 	.word	0x44020c00

08004670 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004670:	b480      	push	{r7}
 8004672:	b08b      	sub	sp, #44	@ 0x2c
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004678:	4bad      	ldr	r3, [pc, #692]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800467a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004680:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004682:	4bab      	ldr	r3, [pc, #684]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800468c:	4ba8      	ldr	r3, [pc, #672]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800468e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004690:	0a1b      	lsrs	r3, r3, #8
 8004692:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004696:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004698:	4ba5      	ldr	r3, [pc, #660]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800469a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80046a2:	4ba3      	ldr	r3, [pc, #652]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a6:	08db      	lsrs	r3, r3, #3
 80046a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ba:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 8126 	beq.w	8004912 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d053      	beq.n	8004774 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d86f      	bhi.n	80047b2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d003      	beq.n	80046e0 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d02b      	beq.n	8004736 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80046de:	e068      	b.n	80047b2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046e0:	4b93      	ldr	r3, [pc, #588]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	08db      	lsrs	r3, r3, #3
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	4a92      	ldr	r2, [pc, #584]	@ (8004934 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80046ec:	fa22 f303 	lsr.w	r3, r2, r3
 80046f0:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	ee07 3a90 	vmov	s15, r3
 80046f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004714:	ed97 6a04 	vldr	s12, [r7, #16]
 8004718:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8004938 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800471c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004720:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004724:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004730:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004734:	e068      	b.n	8004808 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	ee07 3a90 	vmov	s15, r3
 800473c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004740:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800493c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004752:	ed97 6a04 	vldr	s12, [r7, #16]
 8004756:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004938 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800475a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800475e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004772:	e049      	b.n	8004808 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004940 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	ee07 3a90 	vmov	s15, r3
 800478c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004790:	ed97 6a04 	vldr	s12, [r7, #16]
 8004794:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8004938 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80047b0:	e02a      	b.n	8004808 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	08db      	lsrs	r3, r3, #3
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	4a5d      	ldr	r2, [pc, #372]	@ (8004934 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80047be:	fa22 f303 	lsr.w	r3, r2, r3
 80047c2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	ee07 3a90 	vmov	s15, r3
 80047d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e6:	ed97 6a04 	vldr	s12, [r7, #16]
 80047ea:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004938 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80047ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004802:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004806:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004808:	4b49      	ldr	r3, [pc, #292]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004810:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004814:	d121      	bne.n	800485a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004816:	4b46      	ldr	r3, [pc, #280]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d017      	beq.n	8004852 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004822:	4b43      	ldr	r3, [pc, #268]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004826:	0a5b      	lsrs	r3, r3, #9
 8004828:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800482c:	ee07 3a90 	vmov	s15, r3
 8004830:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8004834:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004838:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800483c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004848:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	e006      	b.n	8004860 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e002      	b.n	8004860 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004860:	4b33      	ldr	r3, [pc, #204]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004868:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800486c:	d121      	bne.n	80048b2 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800486e:	4b30      	ldr	r3, [pc, #192]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d017      	beq.n	80048aa <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800487a:	4b2d      	ldr	r3, [pc, #180]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800487c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487e:	0c1b      	lsrs	r3, r3, #16
 8004880:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004884:	ee07 3a90 	vmov	s15, r3
 8004888:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800488c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004890:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004894:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800489c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	605a      	str	r2, [r3, #4]
 80048a8:	e006      	b.n	80048b8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	605a      	str	r2, [r3, #4]
 80048b0:	e002      	b.n	80048b8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048c4:	d121      	bne.n	800490a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80048c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d017      	beq.n	8004902 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80048d2:	4b17      	ldr	r3, [pc, #92]	@ (8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d6:	0e1b      	lsrs	r3, r3, #24
 80048d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048dc:	ee07 3a90 	vmov	s15, r3
 80048e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80048e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048e8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80048ec:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80048f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004900:	e010      	b.n	8004924 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	e00c      	b.n	8004924 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	609a      	str	r2, [r3, #8]
}
 8004910:	e008      	b.n	8004924 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	609a      	str	r2, [r3, #8]
}
 8004924:	bf00      	nop
 8004926:	372c      	adds	r7, #44	@ 0x2c
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	44020c00 	.word	0x44020c00
 8004934:	03d09000 	.word	0x03d09000
 8004938:	46000000 	.word	0x46000000
 800493c:	4a742400 	.word	0x4a742400
 8004940:	4bbebc20 	.word	0x4bbebc20

08004944 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004944:	b480      	push	{r7}
 8004946:	b08b      	sub	sp, #44	@ 0x2c
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800494c:	4bad      	ldr	r3, [pc, #692]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800494e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004954:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004956:	4bab      	ldr	r3, [pc, #684]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004960:	4ba8      	ldr	r3, [pc, #672]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800496a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800496c:	4ba5      	ldr	r3, [pc, #660]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004976:	4ba3      	ldr	r3, [pc, #652]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497a:	08db      	lsrs	r3, r3, #3
 800497c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8126 	beq.w	8004be6 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d053      	beq.n	8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d86f      	bhi.n	8004a86 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d003      	beq.n	80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d02b      	beq.n	8004a0a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80049b2:	e068      	b.n	8004a86 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80049b4:	4b93      	ldr	r3, [pc, #588]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	08db      	lsrs	r3, r3, #3
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	4a92      	ldr	r2, [pc, #584]	@ (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
 80049c4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80049ec:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80049f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a04:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004a08:	e068      	b.n	8004adc <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a14:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a26:	ed97 6a04 	vldr	s12, [r7, #16]
 8004a2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a42:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004a46:	e049      	b.n	8004adc <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a52:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a64:	ed97 6a04 	vldr	s12, [r7, #16]
 8004a68:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004a6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004a84:	e02a      	b.n	8004adc <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a86:	4b5f      	ldr	r3, [pc, #380]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	08db      	lsrs	r3, r3, #3
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	4a5d      	ldr	r2, [pc, #372]	@ (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004a92:	fa22 f303 	lsr.w	r3, r2, r3
 8004a96:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	ee07 3a90 	vmov	s15, r3
 8004aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aba:	ed97 6a04 	vldr	s12, [r7, #16]
 8004abe:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004ada:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004adc:	4b49      	ldr	r3, [pc, #292]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ae4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ae8:	d121      	bne.n	8004b2e <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004aea:	4b46      	ldr	r3, [pc, #280]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d017      	beq.n	8004b26 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004af6:	4b43      	ldr	r3, [pc, #268]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afa:	0a5b      	lsrs	r3, r3, #9
 8004afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004b08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b0c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004b10:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b1c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	e006      	b.n	8004b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	e002      	b.n	8004b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b34:	4b33      	ldr	r3, [pc, #204]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b40:	d121      	bne.n	8004b86 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004b42:	4b30      	ldr	r3, [pc, #192]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d017      	beq.n	8004b7e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b52:	0c1b      	lsrs	r3, r3, #16
 8004b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004b60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b64:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004b68:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b74:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	605a      	str	r2, [r3, #4]
 8004b7c:	e006      	b.n	8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	605a      	str	r2, [r3, #4]
 8004b84:	e002      	b.n	8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b98:	d121      	bne.n	8004bde <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d017      	beq.n	8004bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004ba6:	4b17      	ldr	r3, [pc, #92]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004baa:	0e1b      	lsrs	r3, r3, #24
 8004bac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bb0:	ee07 3a90 	vmov	s15, r3
 8004bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004bb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bbc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004bc0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bcc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004bd4:	e010      	b.n	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	609a      	str	r2, [r3, #8]
}
 8004bdc:	e00c      	b.n	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	609a      	str	r2, [r3, #8]
}
 8004be4:	e008      	b.n	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	609a      	str	r2, [r3, #8]
}
 8004bf8:	bf00      	nop
 8004bfa:	372c      	adds	r7, #44	@ 0x2c
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	44020c00 	.word	0x44020c00
 8004c08:	03d09000 	.word	0x03d09000
 8004c0c:	46000000 	.word	0x46000000
 8004c10:	4a742400 	.word	0x4a742400
 8004c14:	4bbebc20 	.word	0x4bbebc20

08004c18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b08b      	sub	sp, #44	@ 0x2c
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004c20:	4bad      	ldr	r3, [pc, #692]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c28:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004c2a:	4bab      	ldr	r3, [pc, #684]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8004c34:	4ba8      	ldr	r3, [pc, #672]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c38:	0a1b      	lsrs	r3, r3, #8
 8004c3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c3e:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8004c40:	4ba5      	ldr	r3, [pc, #660]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004c4a:	4ba3      	ldr	r3, [pc, #652]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c4e:	08db      	lsrs	r3, r3, #3
 8004c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c62:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8126 	beq.w	8004eba <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d053      	beq.n	8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d86f      	bhi.n	8004d5a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d003      	beq.n	8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d02b      	beq.n	8004cde <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8004c86:	e068      	b.n	8004d5a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c88:	4b93      	ldr	r3, [pc, #588]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	08db      	lsrs	r3, r3, #3
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	4a92      	ldr	r2, [pc, #584]	@ (8004edc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
 8004c98:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	ee07 3a90 	vmov	s15, r3
 8004ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	ee07 3a90 	vmov	s15, r3
 8004cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cbc:	ed97 6a04 	vldr	s12, [r7, #16]
 8004cc0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8004ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004cc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ccc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004cdc:	e068      	b.n	8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	ee07 3a90 	vmov	s15, r3
 8004ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8004ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfa:	ed97 6a04 	vldr	s12, [r7, #16]
 8004cfe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d16:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004d1a:	e049      	b.n	8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d26:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8004d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	ee07 3a90 	vmov	s15, r3
 8004d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d38:	ed97 6a04 	vldr	s12, [r7, #16]
 8004d3c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8004ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d54:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004d58:	e02a      	b.n	8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	08db      	lsrs	r3, r3, #3
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	4a5d      	ldr	r2, [pc, #372]	@ (8004edc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004d66:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	ee07 3a90 	vmov	s15, r3
 8004d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d8e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004d92:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004daa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004dae:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004db0:	4b49      	ldr	r3, [pc, #292]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dbc:	d121      	bne.n	8004e02 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004dbe:	4b46      	ldr	r3, [pc, #280]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d017      	beq.n	8004dfa <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004dca:	4b43      	ldr	r3, [pc, #268]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dce:	0a5b      	lsrs	r3, r3, #9
 8004dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dd4:	ee07 3a90 	vmov	s15, r3
 8004dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8004ddc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004de0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004de4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	e006      	b.n	8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	e002      	b.n	8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e08:	4b33      	ldr	r3, [pc, #204]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e14:	d121      	bne.n	8004e5a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004e16:	4b30      	ldr	r3, [pc, #192]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d017      	beq.n	8004e52 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004e22:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e26:	0c1b      	lsrs	r3, r3, #16
 8004e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004e34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e38:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004e3c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e48:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	605a      	str	r2, [r3, #4]
 8004e50:	e006      	b.n	8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	605a      	str	r2, [r3, #4]
 8004e58:	e002      	b.n	8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e60:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e6c:	d121      	bne.n	8004eb2 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d017      	beq.n	8004eaa <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004e7a:	4b17      	ldr	r3, [pc, #92]	@ (8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7e:	0e1b      	lsrs	r3, r3, #24
 8004e80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8004e8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e90:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004e94:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004ea8:	e010      	b.n	8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	609a      	str	r2, [r3, #8]
}
 8004eb0:	e00c      	b.n	8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	609a      	str	r2, [r3, #8]
}
 8004eb8:	e008      	b.n	8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	609a      	str	r2, [r3, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	372c      	adds	r7, #44	@ 0x2c
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	44020c00 	.word	0x44020c00
 8004edc:	03d09000 	.word	0x03d09000
 8004ee0:	46000000 	.word	0x46000000
 8004ee4:	4a742400 	.word	0x4a742400
 8004ee8:	4bbebc20 	.word	0x4bbebc20

08004eec <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b08f      	sub	sp, #60	@ 0x3c
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004ef6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004efa:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8004efe:	4321      	orrs	r1, r4
 8004f00:	d150      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004f02:	4b26      	ldr	r3, [pc, #152]	@ (8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f0c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004f0e:	4b23      	ldr	r3, [pc, #140]	@ (8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d108      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f22:	d104      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004f24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f2a:	f002 bb2a 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f3c:	d108      	bne.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f44:	d104      	bne.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8004f46:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f4c:	f002 bb19 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004f50:	4b12      	ldr	r3, [pc, #72]	@ (8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f5c:	d119      	bne.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f64:	d115      	bne.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004f66:	4b0d      	ldr	r3, [pc, #52]	@ (8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004f6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f72:	d30a      	bcc.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004f74:	4b09      	ldr	r3, [pc, #36]	@ (8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	0a1b      	lsrs	r3, r3, #8
 8004f7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f7e:	4a08      	ldr	r2, [pc, #32]	@ (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004f86:	f002 bafc 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004f8e:	f002 baf8 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f96:	f002 baf4 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004f9a:	bf00      	nop
 8004f9c:	44020c00 	.word	0x44020c00
 8004fa0:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fa8:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8004fac:	ea50 0104 	orrs.w	r1, r0, r4
 8004fb0:	f001 8275 	beq.w	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8004fb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fb8:	2801      	cmp	r0, #1
 8004fba:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8004fbe:	f082 82dd 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004fc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fc6:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8004fca:	ea50 0104 	orrs.w	r1, r0, r4
 8004fce:	f001 816c 	beq.w	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8004fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fd6:	2801      	cmp	r0, #1
 8004fd8:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8004fdc:	f082 82ce 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fe4:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8004fe8:	ea50 0104 	orrs.w	r1, r0, r4
 8004fec:	f001 8602 	beq.w	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8004ff0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ff4:	2801      	cmp	r0, #1
 8004ff6:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8004ffa:	f082 82bf 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005002:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8005006:	ea50 0104 	orrs.w	r1, r0, r4
 800500a:	f001 854c 	beq.w	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800500e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005012:	2801      	cmp	r0, #1
 8005014:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8005018:	f082 82b0 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800501c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005020:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8005024:	ea50 0104 	orrs.w	r1, r0, r4
 8005028:	f001 849e 	beq.w	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800502c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005030:	2801      	cmp	r0, #1
 8005032:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8005036:	f082 82a1 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800503a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800503e:	f1a1 0420 	sub.w	r4, r1, #32
 8005042:	ea50 0104 	orrs.w	r1, r0, r4
 8005046:	f001 83e8 	beq.w	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800504a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800504e:	2801      	cmp	r0, #1
 8005050:	f171 0120 	sbcs.w	r1, r1, #32
 8005054:	f082 8292 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800505c:	f1a1 0410 	sub.w	r4, r1, #16
 8005060:	ea50 0104 	orrs.w	r1, r0, r4
 8005064:	f002 8256 	beq.w	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800506c:	2801      	cmp	r0, #1
 800506e:	f171 0110 	sbcs.w	r1, r1, #16
 8005072:	f082 8283 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800507a:	f1a1 0408 	sub.w	r4, r1, #8
 800507e:	ea50 0104 	orrs.w	r1, r0, r4
 8005082:	f002 81cc 	beq.w	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8005086:	e9d7 0100 	ldrd	r0, r1, [r7]
 800508a:	2801      	cmp	r0, #1
 800508c:	f171 0108 	sbcs.w	r1, r1, #8
 8005090:	f082 8274 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005094:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005098:	1f0c      	subs	r4, r1, #4
 800509a:	ea50 0104 	orrs.w	r1, r0, r4
 800509e:	f001 8648 	beq.w	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80050a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050a6:	2801      	cmp	r0, #1
 80050a8:	f171 0104 	sbcs.w	r1, r1, #4
 80050ac:	f082 8266 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80050b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050b4:	1e8c      	subs	r4, r1, #2
 80050b6:	ea50 0104 	orrs.w	r1, r0, r4
 80050ba:	f002 8143 	beq.w	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80050be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050c2:	2801      	cmp	r0, #1
 80050c4:	f171 0102 	sbcs.w	r1, r1, #2
 80050c8:	f082 8258 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80050cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050d0:	1e4c      	subs	r4, r1, #1
 80050d2:	ea50 0104 	orrs.w	r1, r0, r4
 80050d6:	f002 80ce 	beq.w	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80050da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050de:	2801      	cmp	r0, #1
 80050e0:	f171 0101 	sbcs.w	r1, r1, #1
 80050e4:	f082 824a 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80050e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050ec:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80050f0:	4321      	orrs	r1, r4
 80050f2:	f002 8059 	beq.w	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80050f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050fa:	4cd9      	ldr	r4, [pc, #868]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80050fc:	42a0      	cmp	r0, r4
 80050fe:	f171 0100 	sbcs.w	r1, r1, #0
 8005102:	f082 823b 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800510a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800510e:	4321      	orrs	r1, r4
 8005110:	f001 87d9 	beq.w	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005114:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005118:	4cd2      	ldr	r4, [pc, #840]	@ (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800511a:	42a0      	cmp	r0, r4
 800511c:	f171 0100 	sbcs.w	r1, r1, #0
 8005120:	f082 822c 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005124:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005128:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800512c:	4321      	orrs	r1, r4
 800512e:	f001 8751 	beq.w	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005132:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005136:	4ccc      	ldr	r4, [pc, #816]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005138:	42a0      	cmp	r0, r4
 800513a:	f171 0100 	sbcs.w	r1, r1, #0
 800513e:	f082 821d 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005142:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005146:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800514a:	4321      	orrs	r1, r4
 800514c:	f001 869a 	beq.w	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005150:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005154:	4cc5      	ldr	r4, [pc, #788]	@ (800546c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005156:	42a0      	cmp	r0, r4
 8005158:	f171 0100 	sbcs.w	r1, r1, #0
 800515c:	f082 820e 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005160:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005164:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005168:	4321      	orrs	r1, r4
 800516a:	f001 8612 	beq.w	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800516e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005172:	4cbf      	ldr	r4, [pc, #764]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005174:	42a0      	cmp	r0, r4
 8005176:	f171 0100 	sbcs.w	r1, r1, #0
 800517a:	f082 81ff 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800517e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005182:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005186:	4321      	orrs	r1, r4
 8005188:	f002 817e 	beq.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800518c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005190:	4cb8      	ldr	r4, [pc, #736]	@ (8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005192:	42a0      	cmp	r0, r4
 8005194:	f171 0100 	sbcs.w	r1, r1, #0
 8005198:	f082 81f0 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800519c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051a0:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 80051a4:	4321      	orrs	r1, r4
 80051a6:	f000 829e 	beq.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80051aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ae:	4cb2      	ldr	r4, [pc, #712]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80051b0:	42a0      	cmp	r0, r4
 80051b2:	f171 0100 	sbcs.w	r1, r1, #0
 80051b6:	f082 81e1 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80051ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051be:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80051c2:	4321      	orrs	r1, r4
 80051c4:	f000 826d 	beq.w	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80051c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051cc:	4cab      	ldr	r4, [pc, #684]	@ (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80051ce:	42a0      	cmp	r0, r4
 80051d0:	f171 0100 	sbcs.w	r1, r1, #0
 80051d4:	f082 81d2 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80051d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051dc:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80051e0:	4321      	orrs	r1, r4
 80051e2:	f001 800d 	beq.w	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80051e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ea:	4ca5      	ldr	r4, [pc, #660]	@ (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80051ec:	42a0      	cmp	r0, r4
 80051ee:	f171 0100 	sbcs.w	r1, r1, #0
 80051f2:	f082 81c3 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80051f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051fa:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80051fe:	4321      	orrs	r1, r4
 8005200:	f000 81d0 	beq.w	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005204:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005208:	4c9e      	ldr	r4, [pc, #632]	@ (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800520a:	42a0      	cmp	r0, r4
 800520c:	f171 0100 	sbcs.w	r1, r1, #0
 8005210:	f082 81b4 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005214:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005218:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 800521c:	4321      	orrs	r1, r4
 800521e:	f000 8142 	beq.w	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005222:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005226:	4c98      	ldr	r4, [pc, #608]	@ (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005228:	42a0      	cmp	r0, r4
 800522a:	f171 0100 	sbcs.w	r1, r1, #0
 800522e:	f082 81a5 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005232:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005236:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800523a:	4321      	orrs	r1, r4
 800523c:	f001 824e 	beq.w	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005240:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005244:	4c91      	ldr	r4, [pc, #580]	@ (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005246:	42a0      	cmp	r0, r4
 8005248:	f171 0100 	sbcs.w	r1, r1, #0
 800524c:	f082 8196 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005250:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005254:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8005258:	4321      	orrs	r1, r4
 800525a:	f001 8197 	beq.w	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800525e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005262:	4c8b      	ldr	r4, [pc, #556]	@ (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005264:	42a0      	cmp	r0, r4
 8005266:	f171 0100 	sbcs.w	r1, r1, #0
 800526a:	f082 8187 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800526e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005272:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005276:	4321      	orrs	r1, r4
 8005278:	f001 8154 	beq.w	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800527c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005280:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005284:	f171 0100 	sbcs.w	r1, r1, #0
 8005288:	f082 8178 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800528c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005290:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005294:	4321      	orrs	r1, r4
 8005296:	f001 80b7 	beq.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800529a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800529e:	f248 0401 	movw	r4, #32769	@ 0x8001
 80052a2:	42a0      	cmp	r0, r4
 80052a4:	f171 0100 	sbcs.w	r1, r1, #0
 80052a8:	f082 8168 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80052ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052b0:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80052b4:	4321      	orrs	r1, r4
 80052b6:	f001 8064 	beq.w	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80052ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052be:	f244 0401 	movw	r4, #16385	@ 0x4001
 80052c2:	42a0      	cmp	r0, r4
 80052c4:	f171 0100 	sbcs.w	r1, r1, #0
 80052c8:	f082 8158 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80052cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052d0:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80052d4:	4321      	orrs	r1, r4
 80052d6:	f001 8011 	beq.w	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80052da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052de:	f242 0401 	movw	r4, #8193	@ 0x2001
 80052e2:	42a0      	cmp	r0, r4
 80052e4:	f171 0100 	sbcs.w	r1, r1, #0
 80052e8:	f082 8148 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80052ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052f0:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80052f4:	4321      	orrs	r1, r4
 80052f6:	f000 871e 	beq.w	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80052fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052fe:	f241 0401 	movw	r4, #4097	@ 0x1001
 8005302:	42a0      	cmp	r0, r4
 8005304:	f171 0100 	sbcs.w	r1, r1, #0
 8005308:	f082 8138 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800530c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005310:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8005314:	4321      	orrs	r1, r4
 8005316:	f000 86a8 	beq.w	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800531a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800531e:	f640 0401 	movw	r4, #2049	@ 0x801
 8005322:	42a0      	cmp	r0, r4
 8005324:	f171 0100 	sbcs.w	r1, r1, #0
 8005328:	f082 8128 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800532c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005330:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8005334:	4321      	orrs	r1, r4
 8005336:	f000 8632 	beq.w	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800533a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800533e:	f240 4401 	movw	r4, #1025	@ 0x401
 8005342:	42a0      	cmp	r0, r4
 8005344:	f171 0100 	sbcs.w	r1, r1, #0
 8005348:	f082 8118 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800534c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005350:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8005354:	4321      	orrs	r1, r4
 8005356:	f000 85b0 	beq.w	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800535a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800535e:	f240 2401 	movw	r4, #513	@ 0x201
 8005362:	42a0      	cmp	r0, r4
 8005364:	f171 0100 	sbcs.w	r1, r1, #0
 8005368:	f082 8108 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800536c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005370:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8005374:	4321      	orrs	r1, r4
 8005376:	f000 8535 	beq.w	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800537a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800537e:	f240 1401 	movw	r4, #257	@ 0x101
 8005382:	42a0      	cmp	r0, r4
 8005384:	f171 0100 	sbcs.w	r1, r1, #0
 8005388:	f082 80f8 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800538c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005390:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8005394:	4321      	orrs	r1, r4
 8005396:	f000 84ba 	beq.w	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800539a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800539e:	2881      	cmp	r0, #129	@ 0x81
 80053a0:	f171 0100 	sbcs.w	r1, r1, #0
 80053a4:	f082 80ea 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053ac:	2821      	cmp	r0, #33	@ 0x21
 80053ae:	f171 0100 	sbcs.w	r1, r1, #0
 80053b2:	d26f      	bcs.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80053b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053b8:	4301      	orrs	r1, r0
 80053ba:	f002 80df 	beq.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053c2:	1e42      	subs	r2, r0, #1
 80053c4:	f141 33ff 	adc.w	r3, r1, #4294967295
 80053c8:	2a20      	cmp	r2, #32
 80053ca:	f173 0100 	sbcs.w	r1, r3, #0
 80053ce:	f082 80d5 	bcs.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053d2:	2a1f      	cmp	r2, #31
 80053d4:	f202 80d2 	bhi.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053d8:	a101      	add	r1, pc, #4	@ (adr r1, 80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80053da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80053de:	bf00      	nop
 80053e0:	08005741 	.word	0x08005741
 80053e4:	0800580d 	.word	0x0800580d
 80053e8:	0800757d 	.word	0x0800757d
 80053ec:	080058cd 	.word	0x080058cd
 80053f0:	0800757d 	.word	0x0800757d
 80053f4:	0800757d 	.word	0x0800757d
 80053f8:	0800757d 	.word	0x0800757d
 80053fc:	0800599d 	.word	0x0800599d
 8005400:	0800757d 	.word	0x0800757d
 8005404:	0800757d 	.word	0x0800757d
 8005408:	0800757d 	.word	0x0800757d
 800540c:	0800757d 	.word	0x0800757d
 8005410:	0800757d 	.word	0x0800757d
 8005414:	0800757d 	.word	0x0800757d
 8005418:	0800757d 	.word	0x0800757d
 800541c:	08005a7f 	.word	0x08005a7f
 8005420:	0800757d 	.word	0x0800757d
 8005424:	0800757d 	.word	0x0800757d
 8005428:	0800757d 	.word	0x0800757d
 800542c:	0800757d 	.word	0x0800757d
 8005430:	0800757d 	.word	0x0800757d
 8005434:	0800757d 	.word	0x0800757d
 8005438:	0800757d 	.word	0x0800757d
 800543c:	0800757d 	.word	0x0800757d
 8005440:	0800757d 	.word	0x0800757d
 8005444:	0800757d 	.word	0x0800757d
 8005448:	0800757d 	.word	0x0800757d
 800544c:	0800757d 	.word	0x0800757d
 8005450:	0800757d 	.word	0x0800757d
 8005454:	0800757d 	.word	0x0800757d
 8005458:	0800757d 	.word	0x0800757d
 800545c:	08005b55 	.word	0x08005b55
 8005460:	80000001 	.word	0x80000001
 8005464:	40000001 	.word	0x40000001
 8005468:	20000001 	.word	0x20000001
 800546c:	10000001 	.word	0x10000001
 8005470:	08000001 	.word	0x08000001
 8005474:	04000001 	.word	0x04000001
 8005478:	00800001 	.word	0x00800001
 800547c:	00400001 	.word	0x00400001
 8005480:	00200001 	.word	0x00200001
 8005484:	00100001 	.word	0x00100001
 8005488:	00080001 	.word	0x00080001
 800548c:	00040001 	.word	0x00040001
 8005490:	00020001 	.word	0x00020001
 8005494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005498:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800549c:	430b      	orrs	r3, r1
 800549e:	f000 83c4 	beq.w	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80054a2:	f002 b86b 	b.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80054a6:	4ba1      	ldr	r3, [pc, #644]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80054a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054ac:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80054b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80054b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054b8:	d036      	beq.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054c0:	d86b      	bhi.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054c8:	d02b      	beq.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054d0:	d863      	bhi.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80054d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054d8:	d01b      	beq.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054e0:	d85b      	bhi.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80054e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ee:	d008      	beq.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80054f0:	e053      	b.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054f2:	f107 0320 	add.w	r3, r7, #32
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff f8ba 	bl	8004670 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005500:	e04e      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005502:	f107 0314 	add.w	r3, r7, #20
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff fa1c 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005510:	e046      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005512:	f107 0308 	add.w	r3, r7, #8
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fb7e 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005520:	e03e      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005522:	4b83      	ldr	r3, [pc, #524]	@ (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005524:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005526:	e03b      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005528:	4b80      	ldr	r3, [pc, #512]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800552a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800552e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005532:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005534:	4b7d      	ldr	r3, [pc, #500]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b02      	cmp	r3, #2
 800553e:	d10c      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005546:	4b79      	ldr	r3, [pc, #484]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	08db      	lsrs	r3, r3, #3
 800554c:	f003 0303 	and.w	r3, r3, #3
 8005550:	4a78      	ldr	r2, [pc, #480]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005552:	fa22 f303 	lsr.w	r3, r2, r3
 8005556:	637b      	str	r3, [r7, #52]	@ 0x34
 8005558:	e01e      	b.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800555a:	4b74      	ldr	r3, [pc, #464]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005566:	d106      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800556e:	d102      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005570:	4b71      	ldr	r3, [pc, #452]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005572:	637b      	str	r3, [r7, #52]	@ 0x34
 8005574:	e010      	b.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005576:	4b6d      	ldr	r3, [pc, #436]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800557e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005582:	d106      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800558a:	d102      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800558c:	4b6b      	ldr	r3, [pc, #428]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005590:	e002      	b.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005596:	e003      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005598:	e002      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800559e:	bf00      	nop
          }
        }
        break;
 80055a0:	f001 bfef 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80055a4:	4b61      	ldr	r3, [pc, #388]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80055a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055aa:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80055ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055b6:	d036      	beq.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80055b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055be:	d86b      	bhi.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80055c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80055c6:	d02b      	beq.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80055ce:	d863      	bhi.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80055d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055d6:	d01b      	beq.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80055d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055de:	d85b      	bhi.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80055e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d004      	beq.n	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80055ec:	d008      	beq.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80055ee:	e053      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055f0:	f107 0320 	add.w	r3, r7, #32
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff f83b 	bl	8004670 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055fe:	e04e      	b.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005600:	f107 0314 	add.w	r3, r7, #20
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff f99d 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800560e:	e046      	b.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff faff 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800561e:	e03e      	b.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005620:	4b43      	ldr	r3, [pc, #268]	@ (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005622:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005624:	e03b      	b.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005626:	4b41      	ldr	r3, [pc, #260]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800562c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005630:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005632:	4b3e      	ldr	r3, [pc, #248]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b02      	cmp	r3, #2
 800563c:	d10c      	bne.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800563e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005640:	2b00      	cmp	r3, #0
 8005642:	d109      	bne.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005644:	4b39      	ldr	r3, [pc, #228]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	08db      	lsrs	r3, r3, #3
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	4a39      	ldr	r2, [pc, #228]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
 8005654:	637b      	str	r3, [r7, #52]	@ 0x34
 8005656:	e01e      	b.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005658:	4b34      	ldr	r3, [pc, #208]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005664:	d106      	bne.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800566c:	d102      	bne.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800566e:	4b32      	ldr	r3, [pc, #200]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005670:	637b      	str	r3, [r7, #52]	@ 0x34
 8005672:	e010      	b.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005674:	4b2d      	ldr	r3, [pc, #180]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800567c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005680:	d106      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005688:	d102      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800568a:	4b2c      	ldr	r3, [pc, #176]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800568c:	637b      	str	r3, [r7, #52]	@ 0x34
 800568e:	e002      	b.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005694:	e003      	b.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8005696:	e002      	b.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800569c:	bf00      	nop
          }
        }
        break;
 800569e:	f001 bf70 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80056a2:	4b22      	ldr	r3, [pc, #136]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80056a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ac:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d108      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056b4:	f107 0320 	add.w	r3, r7, #32
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fe ffd9 	bl	8004670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80056c2:	f001 bf5e 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80056c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c8:	2b40      	cmp	r3, #64	@ 0x40
 80056ca:	d108      	bne.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056cc:	f107 0314 	add.w	r3, r7, #20
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff f937 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056da:	f001 bf52 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056e2:	f001 bf4e 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80056e6:	4b11      	ldr	r3, [pc, #68]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80056e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d108      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056f8:	f107 0320 	add.w	r3, r7, #32
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fe ffb7 	bl	8004670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005704:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005706:	f001 bf3c 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570c:	2b80      	cmp	r3, #128	@ 0x80
 800570e:	d108      	bne.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005710:	f107 0314 	add.w	r3, r7, #20
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff f915 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800571e:	f001 bf30 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005726:	f001 bf2c 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800572a:	bf00      	nop
 800572c:	44020c00 	.word	0x44020c00
 8005730:	00bb8000 	.word	0x00bb8000
 8005734:	03d09000 	.word	0x03d09000
 8005738:	003d0900 	.word	0x003d0900
 800573c:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005740:	4b9d      	ldr	r3, [pc, #628]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005742:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574e:	2b00      	cmp	r3, #0
 8005750:	d104      	bne.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005752:	f7fc ff9f 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 8005756:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005758:	f001 bf13 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800575c:	4b96      	ldr	r3, [pc, #600]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005768:	d10a      	bne.n	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800576a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576c:	2b01      	cmp	r3, #1
 800576e:	d107      	bne.n	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005770:	f107 0314 	add.w	r3, r7, #20
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff f8e5 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	637b      	str	r3, [r7, #52]	@ 0x34
 800577e:	e043      	b.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005780:	4b8d      	ldr	r3, [pc, #564]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800578c:	d10a      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005790:	2b02      	cmp	r3, #2
 8005792:	d107      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005794:	f107 0308 	add.w	r3, r7, #8
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff fa3d 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a2:	e031      	b.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80057a4:	4b84      	ldr	r3, [pc, #528]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d10c      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80057b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d109      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80057b6:	4b80      	ldr	r3, [pc, #512]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	08db      	lsrs	r3, r3, #3
 80057bc:	f003 0303 	and.w	r3, r3, #3
 80057c0:	4a7e      	ldr	r2, [pc, #504]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80057c2:	fa22 f303 	lsr.w	r3, r2, r3
 80057c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057c8:	e01e      	b.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80057ca:	4b7b      	ldr	r3, [pc, #492]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057d6:	d105      	bne.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d102      	bne.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80057de:	4b78      	ldr	r3, [pc, #480]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80057e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057e2:	e011      	b.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80057e4:	4b74      	ldr	r3, [pc, #464]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80057e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d106      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80057f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f4:	2b05      	cmp	r3, #5
 80057f6:	d103      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80057f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80057fe:	e003      	b.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005804:	f001 bebd 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005808:	f001 bebb 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800580c:	4b6a      	ldr	r3, [pc, #424]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800580e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005812:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005816:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581a:	2b00      	cmp	r3, #0
 800581c:	d104      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800581e:	f7fc ff23 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8005822:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005824:	f001 bead 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005828:	4b63      	ldr	r3, [pc, #396]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005830:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005834:	d10a      	bne.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005838:	2b08      	cmp	r3, #8
 800583a:	d107      	bne.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800583c:	f107 0314 	add.w	r3, r7, #20
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff f87f 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	637b      	str	r3, [r7, #52]	@ 0x34
 800584a:	e03d      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800584c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584e:	2b10      	cmp	r3, #16
 8005850:	d108      	bne.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005852:	f107 0308 	add.w	r3, r7, #8
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff f9de 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005860:	f001 be8f 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005864:	4b54      	ldr	r3, [pc, #336]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b02      	cmp	r3, #2
 800586e:	d10c      	bne.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005872:	2b18      	cmp	r3, #24
 8005874:	d109      	bne.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005876:	4b50      	ldr	r3, [pc, #320]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	08db      	lsrs	r3, r3, #3
 800587c:	f003 0303 	and.w	r3, r3, #3
 8005880:	4a4e      	ldr	r2, [pc, #312]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005882:	fa22 f303 	lsr.w	r3, r2, r3
 8005886:	637b      	str	r3, [r7, #52]	@ 0x34
 8005888:	e01e      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800588a:	4b4b      	ldr	r3, [pc, #300]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005896:	d105      	bne.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589a:	2b20      	cmp	r3, #32
 800589c:	d102      	bne.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800589e:	4b48      	ldr	r3, [pc, #288]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80058a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a2:	e011      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80058a4:	4b44      	ldr	r3, [pc, #272]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80058a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d106      	bne.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	2b28      	cmp	r3, #40	@ 0x28
 80058b6:	d103      	bne.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80058b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80058be:	e003      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058c4:	f001 be5d 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80058c8:	f001 be5b 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80058cc:	4b3a      	ldr	r3, [pc, #232]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80058ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80058d2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80058d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d104      	bne.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80058de:	f7fc fec3 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 80058e2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80058e4:	f001 be4d 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80058e8:	4b33      	ldr	r3, [pc, #204]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058f4:	d10a      	bne.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80058f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f8:	2b40      	cmp	r3, #64	@ 0x40
 80058fa:	d107      	bne.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058fc:	f107 0314 	add.w	r3, r7, #20
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff f81f 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	637b      	str	r3, [r7, #52]	@ 0x34
 800590a:	e045      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800590c:	4b2a      	ldr	r3, [pc, #168]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005918:	d10a      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800591a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591c:	2b80      	cmp	r3, #128	@ 0x80
 800591e:	d107      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005920:	f107 0308 	add.w	r3, r7, #8
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff f977 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	637b      	str	r3, [r7, #52]	@ 0x34
 800592e:	e033      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005930:	4b21      	ldr	r3, [pc, #132]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b02      	cmp	r3, #2
 800593a:	d10c      	bne.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005940:	d109      	bne.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005942:	4b1d      	ldr	r3, [pc, #116]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	08db      	lsrs	r3, r3, #3
 8005948:	f003 0303 	and.w	r3, r3, #3
 800594c:	4a1b      	ldr	r2, [pc, #108]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800594e:	fa22 f303 	lsr.w	r3, r2, r3
 8005952:	637b      	str	r3, [r7, #52]	@ 0x34
 8005954:	e020      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005956:	4b18      	ldr	r3, [pc, #96]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800595e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005962:	d106      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800596a:	d102      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800596c:	4b14      	ldr	r3, [pc, #80]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800596e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005970:	e012      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005972:	4b11      	ldr	r3, [pc, #68]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b02      	cmp	r3, #2
 800597e:	d107      	bne.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8005980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005982:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005986:	d103      	bne.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8005988:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
 800598e:	e003      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005994:	f001 bdf5 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005998:	f001 bdf3 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800599c:	4b06      	ldr	r3, [pc, #24]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800599e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80059a2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80059a6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10a      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80059ae:	f7fc fe5b 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 80059b2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80059b4:	f001 bde5 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80059b8:	44020c00 	.word	0x44020c00
 80059bc:	03d09000 	.word	0x03d09000
 80059c0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80059c4:	4ba0      	ldr	r3, [pc, #640]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059d0:	d10b      	bne.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80059d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059d8:	d107      	bne.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059da:	f107 0314 	add.w	r3, r7, #20
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe ffb0 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059e8:	e047      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80059ea:	4b97      	ldr	r3, [pc, #604]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059f6:	d10b      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80059f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059fe:	d107      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a00:	f107 0308 	add.w	r3, r7, #8
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff f907 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a0e:	e034      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005a10:	4b8d      	ldr	r3, [pc, #564]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d10d      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005a22:	d109      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a24:	4b88      	ldr	r3, [pc, #544]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	08db      	lsrs	r3, r3, #3
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	4a87      	ldr	r2, [pc, #540]	@ (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
 8005a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a36:	e020      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005a38:	4b83      	ldr	r3, [pc, #524]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a44:	d106      	bne.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a4c:	d102      	bne.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8005a4e:	4b80      	ldr	r3, [pc, #512]	@ (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a52:	e012      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005a54:	4b7c      	ldr	r3, [pc, #496]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d107      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005a68:	d103      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8005a6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a70:	e003      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a76:	f001 bd84 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005a7a:	f001 bd82 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005a7e:	4b72      	ldr	r3, [pc, #456]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a84:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005a88:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d104      	bne.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a90:	f7fc fdea 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8005a94:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8005a96:	f001 bd74 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8005a9a:	4b6b      	ldr	r3, [pc, #428]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aa6:	d10b      	bne.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aae:	d107      	bne.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ab0:	f107 0314 	add.w	r3, r7, #20
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe ff45 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005abe:	e047      	b.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005ac0:	4b61      	ldr	r3, [pc, #388]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ac8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005acc:	d10b      	bne.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad4:	d107      	bne.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ad6:	f107 0308 	add.w	r3, r7, #8
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff f89c 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ae4:	e034      	b.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005ae6:	4b58      	ldr	r3, [pc, #352]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d10d      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8005af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005af8:	d109      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005afa:	4b53      	ldr	r3, [pc, #332]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	08db      	lsrs	r3, r3, #3
 8005b00:	f003 0303 	and.w	r3, r3, #3
 8005b04:	4a51      	ldr	r2, [pc, #324]	@ (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005b06:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b0c:	e020      	b.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8005b0e:	4b4e      	ldr	r3, [pc, #312]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b1a:	d106      	bne.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b22:	d102      	bne.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8005b24:	4b4a      	ldr	r3, [pc, #296]	@ (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b28:	e012      	b.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005b2a:	4b47      	ldr	r3, [pc, #284]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d107      	bne.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8005b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005b3e:	d103      	bne.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8005b40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b46:	e003      	b.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b4c:	f001 bd19 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005b50:	f001 bd17 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8005b54:	4b3c      	ldr	r3, [pc, #240]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b5a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8005b5e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d104      	bne.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b66:	f7fc fd7f 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8005b6a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8005b6c:	f001 bd09 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8005b70:	4b35      	ldr	r3, [pc, #212]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b7c:	d10b      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b84:	d107      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b86:	f107 0314 	add.w	r3, r7, #20
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe feda 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b94:	e047      	b.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8005b96:	4b2c      	ldr	r3, [pc, #176]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ba2:	d10b      	bne.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005baa:	d107      	bne.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bac:	f107 0308 	add.w	r3, r7, #8
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff f831 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bba:	e034      	b.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8005bbc:	4b22      	ldr	r3, [pc, #136]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d10d      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bca:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005bce:	d109      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	08db      	lsrs	r3, r3, #3
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	4a1c      	ldr	r2, [pc, #112]	@ (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005be2:	e020      	b.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8005be4:	4b18      	ldr	r3, [pc, #96]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bf0:	d106      	bne.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bf8:	d102      	bne.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8005bfa:	4b15      	ldr	r3, [pc, #84]	@ (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bfe:	e012      	b.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8005c00:	4b11      	ldr	r3, [pc, #68]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d107      	bne.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c10:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005c14:	d103      	bne.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8005c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c1c:	e003      	b.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c22:	f001 bcae 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005c26:	f001 bcac 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8005c2a:	4b07      	ldr	r3, [pc, #28]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c30:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8005c34:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8005c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10b      	bne.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c3c:	f7fc fd14 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8005c40:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8005c42:	f001 bc9e 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005c46:	bf00      	nop
 8005c48:	44020c00 	.word	0x44020c00
 8005c4c:	03d09000 	.word	0x03d09000
 8005c50:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8005c54:	4ba0      	ldr	r3, [pc, #640]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c60:	d10b      	bne.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c68:	d107      	bne.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c6a:	f107 0314 	add.w	r3, r7, #20
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fe fe68 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c78:	e047      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8005c7a:	4b97      	ldr	r3, [pc, #604]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c86:	d10b      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8005c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c8e:	d107      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c90:	f107 0308 	add.w	r3, r7, #8
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fe ffbf 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c9e:	e034      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8005ca0:	4b8d      	ldr	r3, [pc, #564]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d10d      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005cb2:	d109      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005cb4:	4b88      	ldr	r3, [pc, #544]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	08db      	lsrs	r3, r3, #3
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	4a87      	ldr	r2, [pc, #540]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cc6:	e020      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8005cc8:	4b83      	ldr	r3, [pc, #524]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cd4:	d106      	bne.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cdc:	d102      	bne.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8005cde:	4b80      	ldr	r3, [pc, #512]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ce2:	e012      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8005ce4:	4b7c      	ldr	r3, [pc, #496]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d107      	bne.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005cf8:	d103      	bne.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8005cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d00:	e003      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d06:	f001 bc3c 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005d0a:	f001 bc3a 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8005d0e:	4b72      	ldr	r3, [pc, #456]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005d10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d14:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005d18:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d104      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d20:	f7fc fca2 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8005d24:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8005d26:	f001 bc2c 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8005d2a:	4b6b      	ldr	r3, [pc, #428]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d36:	d10b      	bne.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d3e:	d107      	bne.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d40:	f107 0314 	add.w	r3, r7, #20
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fe fdfd 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d4e:	e047      	b.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8005d50:	4b61      	ldr	r3, [pc, #388]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d5c:	d10b      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d64:	d107      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d66:	f107 0308 	add.w	r3, r7, #8
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe ff54 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d74:	e034      	b.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8005d76:	4b58      	ldr	r3, [pc, #352]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d10d      	bne.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d88:	d109      	bne.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d8a:	4b53      	ldr	r3, [pc, #332]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	08db      	lsrs	r3, r3, #3
 8005d90:	f003 0303 	and.w	r3, r3, #3
 8005d94:	4a51      	ldr	r2, [pc, #324]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005d96:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d9c:	e020      	b.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8005d9e:	4b4e      	ldr	r3, [pc, #312]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005da6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005daa:	d106      	bne.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8005dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005db2:	d102      	bne.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8005db4:	4b4a      	ldr	r3, [pc, #296]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005db8:	e012      	b.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8005dba:	4b47      	ldr	r3, [pc, #284]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d107      	bne.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dca:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005dce:	d103      	bne.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8005dd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dd6:	e003      	b.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ddc:	f001 bbd1 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005de0:	f001 bbcf 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8005de4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005dea:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005dee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8005df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d104      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005df6:	f7fc fc37 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8005dfa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8005dfc:	f001 bbc1 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8005e00:	4b35      	ldr	r3, [pc, #212]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e0c:	d10b      	bne.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e14:	d107      	bne.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e16:	f107 0314 	add.w	r3, r7, #20
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fe fd92 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e24:	e047      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8005e26:	4b2c      	ldr	r3, [pc, #176]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e32:	d10b      	bne.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e3a:	d107      	bne.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e3c:	f107 0308 	add.w	r3, r7, #8
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe fee9 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e4a:	e034      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8005e4c:	4b22      	ldr	r3, [pc, #136]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d10d      	bne.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e5e:	d109      	bne.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e60:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	08db      	lsrs	r3, r3, #3
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e72:	e020      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8005e74:	4b18      	ldr	r3, [pc, #96]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e80:	d106      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e88:	d102      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8005e8a:	4b15      	ldr	r3, [pc, #84]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e8e:	e012      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8005e90:	4b11      	ldr	r3, [pc, #68]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d107      	bne.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005ea4:	d103      	bne.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8005ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eac:	e003      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eb2:	f001 bb66 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005eb6:	f001 bb64 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8005eba:	4b07      	ldr	r3, [pc, #28]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005ebc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ec0:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8005ec4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10b      	bne.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ecc:	f7fc fbcc 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8005ed0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8005ed2:	f001 bb56 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005ed6:	bf00      	nop
 8005ed8:	44020c00 	.word	0x44020c00
 8005edc:	03d09000 	.word	0x03d09000
 8005ee0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8005ee4:	4ba1      	ldr	r3, [pc, #644]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ef0:	d10b      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ef8:	d107      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005efa:	f107 0314 	add.w	r3, r7, #20
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe fd20 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f08:	e047      	b.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8005f0a:	4b98      	ldr	r3, [pc, #608]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f16:	d10b      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8005f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f1e:	d107      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f20:	f107 0308 	add.w	r3, r7, #8
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe fe77 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f2e:	e034      	b.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8005f30:	4b8e      	ldr	r3, [pc, #568]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d10d      	bne.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005f42:	d109      	bne.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f44:	4b89      	ldr	r3, [pc, #548]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	08db      	lsrs	r3, r3, #3
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	4a88      	ldr	r2, [pc, #544]	@ (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
 8005f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f56:	e020      	b.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8005f58:	4b84      	ldr	r3, [pc, #528]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f64:	d106      	bne.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8005f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f6c:	d102      	bne.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8005f6e:	4b81      	ldr	r3, [pc, #516]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8005f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f72:	e012      	b.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8005f74:	4b7d      	ldr	r3, [pc, #500]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d107      	bne.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8005f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f84:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005f88:	d103      	bne.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8005f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f90:	e003      	b.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f96:	f001 baf4 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005f9a:	f001 baf2 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8005f9e:	4b73      	ldr	r3, [pc, #460]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005fa0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8005faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fb0:	f7fc fb5a 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8005fb4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8005fb6:	f001 bae4 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8005fba:	4b6c      	ldr	r3, [pc, #432]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fc6:	d10a      	bne.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d107      	bne.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fce:	f107 0314 	add.w	r3, r7, #20
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe fcb6 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fdc:	e043      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8005fde:	4b63      	ldr	r3, [pc, #396]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fea:	d10a      	bne.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8005fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d107      	bne.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ff2:	f107 0308 	add.w	r3, r7, #8
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fe fe0e 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006000:	e031      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006002:	4b5a      	ldr	r3, [pc, #360]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b02      	cmp	r3, #2
 800600c:	d10c      	bne.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	2b03      	cmp	r3, #3
 8006012:	d109      	bne.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006014:	4b55      	ldr	r3, [pc, #340]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	08db      	lsrs	r3, r3, #3
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	4a54      	ldr	r2, [pc, #336]	@ (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006020:	fa22 f303 	lsr.w	r3, r2, r3
 8006024:	637b      	str	r3, [r7, #52]	@ 0x34
 8006026:	e01e      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006028:	4b50      	ldr	r3, [pc, #320]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006034:	d105      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8006036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006038:	2b04      	cmp	r3, #4
 800603a:	d102      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800603c:	4b4d      	ldr	r3, [pc, #308]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800603e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006040:	e011      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8006042:	4b4a      	ldr	r3, [pc, #296]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b02      	cmp	r3, #2
 800604e:	d106      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8006050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006052:	2b05      	cmp	r3, #5
 8006054:	d103      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8006056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800605a:	637b      	str	r3, [r7, #52]	@ 0x34
 800605c:	e003      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006062:	f001 ba8e 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006066:	f001 ba8c 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800606a:	4b40      	ldr	r3, [pc, #256]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800606c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006070:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006074:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8006076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006078:	2b00      	cmp	r3, #0
 800607a:	d104      	bne.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800607c:	f7fc faf4 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8006080:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8006082:	f001 ba7e 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8006086:	4b39      	ldr	r3, [pc, #228]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800608e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006092:	d10a      	bne.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	2b10      	cmp	r3, #16
 8006098:	d107      	bne.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800609a:	f107 0314 	add.w	r3, r7, #20
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe fc50 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a8:	e043      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80060aa:	4b30      	ldr	r3, [pc, #192]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b6:	d10a      	bne.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80060b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	d107      	bne.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060be:	f107 0308 	add.w	r3, r7, #8
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fe fda8 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80060cc:	e031      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80060ce:	4b27      	ldr	r3, [pc, #156]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d10c      	bne.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80060da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060dc:	2b30      	cmp	r3, #48	@ 0x30
 80060de:	d109      	bne.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80060e0:	4b22      	ldr	r3, [pc, #136]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	08db      	lsrs	r3, r3, #3
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	4a21      	ldr	r2, [pc, #132]	@ (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80060ec:	fa22 f303 	lsr.w	r3, r2, r3
 80060f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80060f2:	e01e      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80060f4:	4b1d      	ldr	r3, [pc, #116]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006100:	d105      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	2b40      	cmp	r3, #64	@ 0x40
 8006106:	d102      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006108:	4b1a      	ldr	r3, [pc, #104]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800610a:	637b      	str	r3, [r7, #52]	@ 0x34
 800610c:	e011      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800610e:	4b17      	ldr	r3, [pc, #92]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d106      	bne.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	2b50      	cmp	r3, #80	@ 0x50
 8006120:	d103      	bne.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8006122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006126:	637b      	str	r3, [r7, #52]	@ 0x34
 8006128:	e003      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800612e:	f001 ba28 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006132:	f001 ba26 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006136:	4b0d      	ldr	r3, [pc, #52]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800613c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006140:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006144:	2b00      	cmp	r3, #0
 8006146:	d104      	bne.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006148:	f7fc faba 	bl	80026c0 <HAL_RCC_GetPCLK3Freq>
 800614c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800614e:	f001 ba18 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006158:	d10e      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800615a:	f107 0314 	add.w	r3, r7, #20
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fbf0 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006168:	f001 ba0b 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800616c:	44020c00 	.word	0x44020c00
 8006170:	03d09000 	.word	0x03d09000
 8006174:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800617e:	d108      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006180:	f107 0308 	add.w	r3, r7, #8
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe fd47 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800618e:	f001 b9f8 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006192:	4ba4      	ldr	r3, [pc, #656]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b02      	cmp	r3, #2
 800619c:	d10d      	bne.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80061a4:	d109      	bne.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061a6:	4b9f      	ldr	r3, [pc, #636]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	08db      	lsrs	r3, r3, #3
 80061ac:	f003 0303 	and.w	r3, r3, #3
 80061b0:	4a9d      	ldr	r2, [pc, #628]	@ (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80061b2:	fa22 f303 	lsr.w	r3, r2, r3
 80061b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80061b8:	e020      	b.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80061ba:	4b9a      	ldr	r3, [pc, #616]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061c6:	d106      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80061c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061ce:	d102      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80061d0:	4b96      	ldr	r3, [pc, #600]	@ (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80061d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061d4:	e012      	b.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80061d6:	4b93      	ldr	r3, [pc, #588]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80061d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d107      	bne.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80061e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80061ea:	d103      	bne.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80061ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f2:	e003      	b.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061f8:	f001 b9c3 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80061fc:	f001 b9c1 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006200:	4b88      	ldr	r3, [pc, #544]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800620c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620e:	2b00      	cmp	r3, #0
 8006210:	d104      	bne.n	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006212:	f7fc fa0d 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8006216:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006218:	f001 b9b3 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800621c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621e:	2b01      	cmp	r3, #1
 8006220:	d104      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006222:	f7fc f8d9 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8006226:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006228:	f001 b9ab 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	2b02      	cmp	r3, #2
 8006230:	d108      	bne.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006232:	f107 0314 	add.w	r3, r7, #20
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe fb84 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006240:	f001 b99f 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006244:	4b77      	ldr	r3, [pc, #476]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800624c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006250:	d105      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	2b03      	cmp	r3, #3
 8006256:	d102      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006258:	4b75      	ldr	r3, [pc, #468]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800625a:	637b      	str	r3, [r7, #52]	@ 0x34
 800625c:	e023      	b.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800625e:	4b71      	ldr	r3, [pc, #452]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d10c      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800626a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626c:	2b04      	cmp	r3, #4
 800626e:	d109      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006270:	4b6c      	ldr	r3, [pc, #432]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	08db      	lsrs	r3, r3, #3
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	4a6b      	ldr	r2, [pc, #428]	@ (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800627c:	fa22 f303 	lsr.w	r3, r2, r3
 8006280:	637b      	str	r3, [r7, #52]	@ 0x34
 8006282:	e010      	b.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006284:	4b67      	ldr	r3, [pc, #412]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800628c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006290:	d105      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006294:	2b05      	cmp	r3, #5
 8006296:	d102      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8006298:	4b64      	ldr	r3, [pc, #400]	@ (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800629a:	637b      	str	r3, [r7, #52]	@ 0x34
 800629c:	e003      	b.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062a2:	f001 b96e 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80062a6:	f001 b96c 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80062aa:	4b5e      	ldr	r3, [pc, #376]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80062ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80062b6:	4b5b      	ldr	r3, [pc, #364]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80062b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d106      	bne.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80062c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d103      	bne.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80062ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d0:	e012      	b.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80062d2:	4b54      	ldr	r3, [pc, #336]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80062d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062e0:	d106      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80062e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d103      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80062e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80062ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ee:	e003      	b.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80062f4:	f001 b945 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80062f8:	f001 b943 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80062fc:	4b49      	ldr	r3, [pc, #292]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80062fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006302:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006306:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630a:	2b00      	cmp	r3, #0
 800630c:	d104      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800630e:	f7fc f9ab 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8006312:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006314:	f001 b935 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800631e:	d108      	bne.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006320:	f107 0308 	add.w	r3, r7, #8
 8006324:	4618      	mov	r0, r3
 8006326:	f7fe fc77 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800632e:	f001 b928 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006332:	4b3c      	ldr	r3, [pc, #240]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b02      	cmp	r3, #2
 800633c:	d10d      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006344:	d109      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006346:	4b37      	ldr	r3, [pc, #220]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	08db      	lsrs	r3, r3, #3
 800634c:	f003 0303 	and.w	r3, r3, #3
 8006350:	4a35      	ldr	r2, [pc, #212]	@ (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006352:	fa22 f303 	lsr.w	r3, r2, r3
 8006356:	637b      	str	r3, [r7, #52]	@ 0x34
 8006358:	e011      	b.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800635a:	4b32      	ldr	r3, [pc, #200]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006366:	d106      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800636e:	d102      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006370:	4b2e      	ldr	r3, [pc, #184]	@ (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006372:	637b      	str	r3, [r7, #52]	@ 0x34
 8006374:	e003      	b.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800637a:	f001 b902 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800637e:	f001 b900 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006382:	4b28      	ldr	r3, [pc, #160]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006384:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006388:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800638c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	2b00      	cmp	r3, #0
 8006392:	d104      	bne.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006394:	f7fc f968 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8006398:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800639a:	f001 b8f2 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063a4:	d108      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063a6:	f107 0308 	add.w	r3, r7, #8
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe fc34 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063b4:	f001 b8e5 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80063b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d10d      	bne.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80063c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80063ca:	d109      	bne.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063cc:	4b15      	ldr	r3, [pc, #84]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	08db      	lsrs	r3, r3, #3
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	4a14      	ldr	r2, [pc, #80]	@ (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80063d8:	fa22 f303 	lsr.w	r3, r2, r3
 80063dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80063de:	e011      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80063e0:	4b10      	ldr	r3, [pc, #64]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ec:	d106      	bne.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80063f4:	d102      	bne.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80063f6:	4b0d      	ldr	r3, [pc, #52]	@ (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80063f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063fa:	e003      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006400:	f001 b8bf 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006404:	f001 b8bd 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006408:	4b06      	ldr	r3, [pc, #24]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800640a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800640e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006412:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10c      	bne.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800641a:	f7fc f951 	bl	80026c0 <HAL_RCC_GetPCLK3Freq>
 800641e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006420:	f001 b8af 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006424:	44020c00 	.word	0x44020c00
 8006428:	03d09000 	.word	0x03d09000
 800642c:	003d0900 	.word	0x003d0900
 8006430:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800643a:	d108      	bne.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800643c:	f107 0308 	add.w	r3, r7, #8
 8006440:	4618      	mov	r0, r3
 8006442:	f7fe fbe9 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800644a:	f001 b89a 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800644e:	4b9f      	ldr	r3, [pc, #636]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b02      	cmp	r3, #2
 8006458:	d10d      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006460:	d109      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006462:	4b9a      	ldr	r3, [pc, #616]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	08db      	lsrs	r3, r3, #3
 8006468:	f003 0303 	and.w	r3, r3, #3
 800646c:	4a98      	ldr	r2, [pc, #608]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800646e:	fa22 f303 	lsr.w	r3, r2, r3
 8006472:	637b      	str	r3, [r7, #52]	@ 0x34
 8006474:	e011      	b.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006476:	4b95      	ldr	r3, [pc, #596]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800647e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006482:	d106      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006486:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800648a:	d102      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800648c:	4b91      	ldr	r3, [pc, #580]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800648e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006490:	e003      	b.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006496:	f001 b874 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800649a:	f001 b872 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800649e:	4b8b      	ldr	r3, [pc, #556]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80064a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064a4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80064a8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d104      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80064b0:	f7fc f906 	bl	80026c0 <HAL_RCC_GetPCLK3Freq>
 80064b4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80064b6:	f001 b864 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80064ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064c0:	d108      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c2:	f107 0308 	add.w	r3, r7, #8
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fba6 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064d0:	f001 b857 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80064d4:	4b7d      	ldr	r3, [pc, #500]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d10d      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80064e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064e6:	d109      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064e8:	4b78      	ldr	r3, [pc, #480]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	08db      	lsrs	r3, r3, #3
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	4a77      	ldr	r2, [pc, #476]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80064f4:	fa22 f303 	lsr.w	r3, r2, r3
 80064f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064fa:	e011      	b.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 80064fc:	4b73      	ldr	r3, [pc, #460]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006508:	d106      	bne.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006510:	d102      	bne.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006512:	4b70      	ldr	r3, [pc, #448]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006514:	637b      	str	r3, [r7, #52]	@ 0x34
 8006516:	e003      	b.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800651c:	f001 b831 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006520:	f001 b82f 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006524:	4b69      	ldr	r3, [pc, #420]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006526:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800652a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800652e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006532:	2b00      	cmp	r3, #0
 8006534:	d104      	bne.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006536:	f7fc f897 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 800653a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800653c:	f001 b821 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006542:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006546:	d108      	bne.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006548:	f107 0308 	add.w	r3, r7, #8
 800654c:	4618      	mov	r0, r3
 800654e:	f7fe fb63 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006556:	f001 b814 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800655a:	4b5c      	ldr	r3, [pc, #368]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b02      	cmp	r3, #2
 8006564:	d10e      	bne.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8006566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006568:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800656c:	d10a      	bne.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800656e:	4b57      	ldr	r3, [pc, #348]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	08db      	lsrs	r3, r3, #3
 8006574:	f003 0303 	and.w	r3, r3, #3
 8006578:	4a55      	ldr	r2, [pc, #340]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800657a:	fa22 f303 	lsr.w	r3, r2, r3
 800657e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006580:	f000 bfff 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006588:	f000 bffb 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800658c:	4b4f      	ldr	r3, [pc, #316]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800658e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006592:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006596:	633b      	str	r3, [r7, #48]	@ 0x30
 8006598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800659e:	d056      	beq.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80065a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80065a6:	f200 808b 	bhi.w	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80065aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065b0:	d03e      	beq.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80065b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065b8:	f200 8082 	bhi.w	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80065bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065c2:	d027      	beq.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80065c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065ca:	d879      	bhi.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80065cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065d2:	d017      	beq.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80065d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065da:	d871      	bhi.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80065dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d004      	beq.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80065e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e8:	d004      	beq.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80065ea:	e069      	b.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80065ec:	f7fc f868 	bl	80026c0 <HAL_RCC_GetPCLK3Freq>
 80065f0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80065f2:	e068      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065f4:	f107 0314 	add.w	r3, r7, #20
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe f9a3 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006602:	e060      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006604:	f107 0308 	add.w	r3, r7, #8
 8006608:	4618      	mov	r0, r3
 800660a:	f7fe fb05 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006612:	e058      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006614:	4b2d      	ldr	r3, [pc, #180]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b02      	cmp	r3, #2
 8006620:	d103      	bne.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8006622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006626:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006628:	e04d      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800662e:	e04a      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006630:	4b26      	ldr	r3, [pc, #152]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006636:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800663a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800663e:	d103      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8006640:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006644:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006646:	e03e      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800664c:	e03b      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800664e:	4b1f      	ldr	r3, [pc, #124]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006654:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006658:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800665a:	4b1c      	ldr	r3, [pc, #112]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b02      	cmp	r3, #2
 8006664:	d10c      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8006666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d109      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800666c:	4b17      	ldr	r3, [pc, #92]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	08db      	lsrs	r3, r3, #3
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	4a16      	ldr	r2, [pc, #88]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006678:	fa22 f303 	lsr.w	r3, r2, r3
 800667c:	637b      	str	r3, [r7, #52]	@ 0x34
 800667e:	e01e      	b.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006680:	4b12      	ldr	r3, [pc, #72]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800668c:	d106      	bne.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800668e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006694:	d102      	bne.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006696:	4b0f      	ldr	r3, [pc, #60]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006698:	637b      	str	r3, [r7, #52]	@ 0x34
 800669a:	e010      	b.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800669c:	4b0b      	ldr	r3, [pc, #44]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066a8:	d106      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80066aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066b0:	d102      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80066b2:	4b09      	ldr	r3, [pc, #36]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80066b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066b6:	e002      	b.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80066bc:	e003      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80066be:	e002      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80066c4:	bf00      	nop
          }
        }
        break;
 80066c6:	f000 bf5c 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066ca:	bf00      	nop
 80066cc:	44020c00 	.word	0x44020c00
 80066d0:	03d09000 	.word	0x03d09000
 80066d4:	003d0900 	.word	0x003d0900
 80066d8:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80066dc:	4b9e      	ldr	r3, [pc, #632]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80066de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80066e2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80066e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80066e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066ee:	d056      	beq.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 80066f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066f6:	f200 808b 	bhi.w	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80066fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006700:	d03e      	beq.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006708:	f200 8082 	bhi.w	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800670c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006712:	d027      	beq.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8006714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006716:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800671a:	d879      	bhi.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006722:	d017      	beq.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8006724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800672a:	d871      	bhi.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800672c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006738:	d004      	beq.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800673a:	e069      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800673c:	f7fb ff94 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8006740:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006742:	e068      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006744:	f107 0314 	add.w	r3, r7, #20
 8006748:	4618      	mov	r0, r3
 800674a:	f7fe f8fb 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006752:	e060      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006754:	f107 0308 	add.w	r3, r7, #8
 8006758:	4618      	mov	r0, r3
 800675a:	f7fe fa5d 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006762:	e058      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006764:	4b7c      	ldr	r3, [pc, #496]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b02      	cmp	r3, #2
 8006770:	d103      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8006772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006776:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006778:	e04d      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800677a:	2300      	movs	r3, #0
 800677c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800677e:	e04a      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006780:	4b75      	ldr	r3, [pc, #468]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006786:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800678a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800678e:	d103      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8006790:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006794:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006796:	e03e      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800679c:	e03b      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800679e:	4b6e      	ldr	r3, [pc, #440]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80067a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067a4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80067a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067aa:	4b6b      	ldr	r3, [pc, #428]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d10c      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80067b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d109      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067bc:	4b66      	ldr	r3, [pc, #408]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	08db      	lsrs	r3, r3, #3
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	4a65      	ldr	r2, [pc, #404]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80067c8:	fa22 f303 	lsr.w	r3, r2, r3
 80067cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ce:	e01e      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067d0:	4b61      	ldr	r3, [pc, #388]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067dc:	d106      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80067de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e4:	d102      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80067e6:	4b5e      	ldr	r3, [pc, #376]	@ (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80067e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ea:	e010      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067ec:	4b5a      	ldr	r3, [pc, #360]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067f8:	d106      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 80067fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006800:	d102      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006802:	4b58      	ldr	r3, [pc, #352]	@ (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006804:	637b      	str	r3, [r7, #52]	@ 0x34
 8006806:	e002      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800680c:	e003      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800680e:	e002      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006814:	bf00      	nop
          }
        }
        break;
 8006816:	f000 beb4 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800681a:	4b4f      	ldr	r3, [pc, #316]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800681c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006820:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006824:	633b      	str	r3, [r7, #48]	@ 0x30
 8006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800682c:	d056      	beq.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006834:	f200 808b 	bhi.w	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800683e:	d03e      	beq.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8006840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006842:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006846:	f200 8082 	bhi.w	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006850:	d027      	beq.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006858:	d879      	bhi.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006860:	d017      	beq.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006868:	d871      	bhi.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	2b00      	cmp	r3, #0
 800686e:	d004      	beq.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8006870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006876:	d004      	beq.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8006878:	e069      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800687a:	f7fb ff21 	bl	80026c0 <HAL_RCC_GetPCLK3Freq>
 800687e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006880:	e068      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006882:	f107 0314 	add.w	r3, r7, #20
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe f85c 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006890:	e060      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006892:	f107 0308 	add.w	r3, r7, #8
 8006896:	4618      	mov	r0, r3
 8006898:	f7fe f9be 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80068a0:	e058      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80068a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80068a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d103      	bne.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80068b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068b4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80068b6:	e04d      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80068bc:	e04a      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80068be:	4b26      	ldr	r3, [pc, #152]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80068c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068cc:	d103      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80068ce:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80068d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80068d4:	e03e      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80068da:	e03b      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80068de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068e2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80068e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d10c      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80068f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068fa:	4b17      	ldr	r3, [pc, #92]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	08db      	lsrs	r3, r3, #3
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	4a15      	ldr	r2, [pc, #84]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006906:	fa22 f303 	lsr.w	r3, r2, r3
 800690a:	637b      	str	r3, [r7, #52]	@ 0x34
 800690c:	e01e      	b.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800690e:	4b12      	ldr	r3, [pc, #72]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800691a:	d106      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800691c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006922:	d102      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006924:	4b0e      	ldr	r3, [pc, #56]	@ (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
 8006928:	e010      	b.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800692a:	4b0b      	ldr	r3, [pc, #44]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006932:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006936:	d106      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8006938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800693e:	d102      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006940:	4b08      	ldr	r3, [pc, #32]	@ (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006942:	637b      	str	r3, [r7, #52]	@ 0x34
 8006944:	e002      	b.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800694a:	e003      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800694c:	e002      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006952:	bf00      	nop
          }
        }
        break;
 8006954:	f000 be15 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006958:	44020c00 	.word	0x44020c00
 800695c:	03d09000 	.word	0x03d09000
 8006960:	003d0900 	.word	0x003d0900
 8006964:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8006968:	4b9e      	ldr	r3, [pc, #632]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800696a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800696e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8006972:	633b      	str	r3, [r7, #48]	@ 0x30
 8006974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006976:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800697a:	d056      	beq.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006982:	f200 808b 	bhi.w	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006988:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800698c:	d03e      	beq.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006994:	f200 8082 	bhi.w	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800699e:	d027      	beq.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069a6:	d879      	bhi.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80069a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069ae:	d017      	beq.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80069b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069b6:	d871      	bhi.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80069b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d004      	beq.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069c4:	d004      	beq.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80069c6:	e069      	b.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80069c8:	f7fb fe7a 	bl	80026c0 <HAL_RCC_GetPCLK3Freq>
 80069cc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80069ce:	e068      	b.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069d0:	f107 0314 	add.w	r3, r7, #20
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fd ffb5 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80069de:	e060      	b.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069e0:	f107 0308 	add.w	r3, r7, #8
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fe f917 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80069ee:	e058      	b.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80069f0:	4b7c      	ldr	r3, [pc, #496]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80069f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d103      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80069fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a02:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006a04:	e04d      	b.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a0a:	e04a      	b.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006a0c:	4b75      	ldr	r3, [pc, #468]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a1a:	d103      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8006a1c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a20:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006a22:	e03e      	b.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8006a24:	2300      	movs	r3, #0
 8006a26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a28:	e03b      	b.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a2a:	4b6e      	ldr	r3, [pc, #440]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a30:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006a34:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a36:	4b6b      	ldr	r3, [pc, #428]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d10c      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8006a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d109      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a48:	4b66      	ldr	r3, [pc, #408]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	08db      	lsrs	r3, r3, #3
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	4a65      	ldr	r2, [pc, #404]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006a54:	fa22 f303 	lsr.w	r3, r2, r3
 8006a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5a:	e01e      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a5c:	4b61      	ldr	r3, [pc, #388]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a68:	d106      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8006a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a70:	d102      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006a72:	4b5e      	ldr	r3, [pc, #376]	@ (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a76:	e010      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a78:	4b5a      	ldr	r3, [pc, #360]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a84:	d106      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8006a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a8c:	d102      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006a8e:	4b58      	ldr	r3, [pc, #352]	@ (8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a92:	e002      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006a98:	e003      	b.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8006a9a:	e002      	b.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006aa0:	bf00      	nop
          }
        }
        break;
 8006aa2:	f000 bd6e 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8006aa6:	4b4f      	ldr	r3, [pc, #316]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006aa8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006aac:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006ab8:	d056      	beq.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8006aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006ac0:	f200 808b 	bhi.w	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006aca:	d03e      	beq.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8006acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ace:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ad2:	f200 8082 	bhi.w	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006adc:	d027      	beq.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8006ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ae4:	d879      	bhi.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006aec:	d017      	beq.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006af4:	d871      	bhi.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d004      	beq.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8006afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b02:	d004      	beq.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8006b04:	e069      	b.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006b06:	f7fb fddb 	bl	80026c0 <HAL_RCC_GetPCLK3Freq>
 8006b0a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006b0c:	e068      	b.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b0e:	f107 0314 	add.w	r3, r7, #20
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fd ff16 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b1c:	e060      	b.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b1e:	f107 0308 	add.w	r3, r7, #8
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fe f878 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b2c:	e058      	b.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d103      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8006b3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b40:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b42:	e04d      	b.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b48:	e04a      	b.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006b4a:	4b26      	ldr	r3, [pc, #152]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b58:	d103      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8006b5a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b5e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b60:	e03e      	b.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b66:	e03b      	b.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b68:	4b1e      	ldr	r3, [pc, #120]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b6e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006b72:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b74:	4b1b      	ldr	r3, [pc, #108]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d10c      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8006b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d109      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b86:	4b17      	ldr	r3, [pc, #92]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	08db      	lsrs	r3, r3, #3
 8006b8c:	f003 0303 	and.w	r3, r3, #3
 8006b90:	4a15      	ldr	r2, [pc, #84]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006b92:	fa22 f303 	lsr.w	r3, r2, r3
 8006b96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b98:	e01e      	b.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b9a:	4b12      	ldr	r3, [pc, #72]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ba6:	d106      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8006ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bae:	d102      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb4:	e010      	b.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bc2:	d106      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8006bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bca:	d102      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006bcc:	4b08      	ldr	r3, [pc, #32]	@ (8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd0:	e002      	b.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006bd6:	e003      	b.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8006bd8:	e002      	b.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006bde:	bf00      	nop
          }
        }
        break;
 8006be0:	f000 bccf 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006be4:	44020c00 	.word	0x44020c00
 8006be8:	03d09000 	.word	0x03d09000
 8006bec:	003d0900 	.word	0x003d0900
 8006bf0:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8006bf4:	4b9e      	ldr	r3, [pc, #632]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006bf6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006bfa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006bfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c06:	d056      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c0e:	f200 808b 	bhi.w	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c18:	d03e      	beq.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c20:	f200 8082 	bhi.w	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c2a:	d027      	beq.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c32:	d879      	bhi.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c3a:	d017      	beq.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c42:	d871      	bhi.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c50:	d004      	beq.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8006c52:	e069      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006c54:	f7fb fd34 	bl	80026c0 <HAL_RCC_GetPCLK3Freq>
 8006c58:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006c5a:	e068      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c5c:	f107 0314 	add.w	r3, r7, #20
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fd fe6f 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006c6a:	e060      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c6c:	f107 0308 	add.w	r3, r7, #8
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fd ffd1 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006c7a:	e058      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c7c:	4b7c      	ldr	r3, [pc, #496]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d103      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8006c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c8e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006c90:	e04d      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006c96:	e04a      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006c98:	4b75      	ldr	r3, [pc, #468]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ca6:	d103      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8006ca8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006cac:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006cae:	e03e      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006cb4:	e03b      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cbc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cc2:	4b6b      	ldr	r3, [pc, #428]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d10c      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8006cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cd4:	4b66      	ldr	r3, [pc, #408]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	08db      	lsrs	r3, r3, #3
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	4a65      	ldr	r2, [pc, #404]	@ (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8006ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce6:	e01e      	b.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ce8:	4b61      	ldr	r3, [pc, #388]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cf4:	d106      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8006cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cfc:	d102      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006cfe:	4b5e      	ldr	r3, [pc, #376]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8006d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d02:	e010      	b.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d04:	4b5a      	ldr	r3, [pc, #360]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d10:	d106      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8006d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d18:	d102      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006d1a:	4b58      	ldr	r3, [pc, #352]	@ (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8006d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d1e:	e002      	b.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006d24:	e003      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8006d26:	e002      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006d2c:	bf00      	nop
          }
        }
        break;
 8006d2e:	f000 bc28 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006d32:	4b4f      	ldr	r3, [pc, #316]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006d34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d3c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006d3e:	4b4c      	ldr	r3, [pc, #304]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d4a:	d106      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d103      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8006d52:	4b4a      	ldr	r3, [pc, #296]	@ (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8006d54:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006d56:	f000 bc14 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d60:	d108      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d62:	f107 0320 	add.w	r3, r7, #32
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fd fc82 	bl	8004670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d70:	f000 bc07 	b.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d7a:	d107      	bne.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d7c:	f107 0314 	add.w	r3, r7, #20
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fd fddf 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d8a:	e3fa      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d90:	e3f7      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006d92:	4b37      	ldr	r3, [pc, #220]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d861      	bhi.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8006da4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8006da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006daa:	bf00      	nop
 8006dac:	08006dc1 	.word	0x08006dc1
 8006db0:	08006dd1 	.word	0x08006dd1
 8006db4:	08006de1 	.word	0x08006de1
 8006db8:	08006df1 	.word	0x08006df1
 8006dbc:	08006df7 	.word	0x08006df7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dc0:	f107 0320 	add.w	r3, r7, #32
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fd fc53 	bl	8004670 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006dce:	e04e      	b.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dd0:	f107 0314 	add.w	r3, r7, #20
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fd fdb5 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006dde:	e046      	b.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006de0:	f107 0308 	add.w	r3, r7, #8
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fd ff17 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006dee:	e03e      	b.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006df0:	4b23      	ldr	r3, [pc, #140]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8006df2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006df4:	e03b      	b.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006df6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dfc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006e00:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e02:	4b1b      	ldr	r3, [pc, #108]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8006e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d109      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e14:	4b16      	ldr	r3, [pc, #88]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	08db      	lsrs	r3, r3, #3
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	4a15      	ldr	r2, [pc, #84]	@ (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
 8006e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e26:	e01e      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e28:	4b11      	ldr	r3, [pc, #68]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e34:	d106      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8006e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e3c:	d102      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8006e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e42:	e010      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e44:	4b0a      	ldr	r3, [pc, #40]	@ (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e50:	d106      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8006e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e58:	d102      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e5a:	4b08      	ldr	r3, [pc, #32]	@ (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8006e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e5e:	e002      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006e64:	e003      	b.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8006e66:	e002      	b.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e6c:	bf00      	nop
          }
        }
        break;
 8006e6e:	e388      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e70:	44020c00 	.word	0x44020c00
 8006e74:	03d09000 	.word	0x03d09000
 8006e78:	003d0900 	.word	0x003d0900
 8006e7c:	017d7840 	.word	0x017d7840
 8006e80:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006e84:	4ba9      	ldr	r3, [pc, #676]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e92:	2b20      	cmp	r3, #32
 8006e94:	f200 809a 	bhi.w	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8006e98:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006f25 	.word	0x08006f25
 8006ea4:	08006fcd 	.word	0x08006fcd
 8006ea8:	08006fcd 	.word	0x08006fcd
 8006eac:	08006fcd 	.word	0x08006fcd
 8006eb0:	08006fcd 	.word	0x08006fcd
 8006eb4:	08006fcd 	.word	0x08006fcd
 8006eb8:	08006fcd 	.word	0x08006fcd
 8006ebc:	08006fcd 	.word	0x08006fcd
 8006ec0:	08006f35 	.word	0x08006f35
 8006ec4:	08006fcd 	.word	0x08006fcd
 8006ec8:	08006fcd 	.word	0x08006fcd
 8006ecc:	08006fcd 	.word	0x08006fcd
 8006ed0:	08006fcd 	.word	0x08006fcd
 8006ed4:	08006fcd 	.word	0x08006fcd
 8006ed8:	08006fcd 	.word	0x08006fcd
 8006edc:	08006fcd 	.word	0x08006fcd
 8006ee0:	08006f45 	.word	0x08006f45
 8006ee4:	08006fcd 	.word	0x08006fcd
 8006ee8:	08006fcd 	.word	0x08006fcd
 8006eec:	08006fcd 	.word	0x08006fcd
 8006ef0:	08006fcd 	.word	0x08006fcd
 8006ef4:	08006fcd 	.word	0x08006fcd
 8006ef8:	08006fcd 	.word	0x08006fcd
 8006efc:	08006fcd 	.word	0x08006fcd
 8006f00:	08006f55 	.word	0x08006f55
 8006f04:	08006fcd 	.word	0x08006fcd
 8006f08:	08006fcd 	.word	0x08006fcd
 8006f0c:	08006fcd 	.word	0x08006fcd
 8006f10:	08006fcd 	.word	0x08006fcd
 8006f14:	08006fcd 	.word	0x08006fcd
 8006f18:	08006fcd 	.word	0x08006fcd
 8006f1c:	08006fcd 	.word	0x08006fcd
 8006f20:	08006f5b 	.word	0x08006f5b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f24:	f107 0320 	add.w	r3, r7, #32
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fd fba1 	bl	8004670 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f32:	e04e      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f34:	f107 0314 	add.w	r3, r7, #20
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fd fd03 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f42:	e046      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f44:	f107 0308 	add.w	r3, r7, #8
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fd fe65 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f52:	e03e      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006f54:	4b76      	ldr	r3, [pc, #472]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8006f56:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f58:	e03b      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f5a:	4b74      	ldr	r3, [pc, #464]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f60:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006f64:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f66:	4b71      	ldr	r3, [pc, #452]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d10c      	bne.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8006f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d109      	bne.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f78:	4b6c      	ldr	r3, [pc, #432]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	08db      	lsrs	r3, r3, #3
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	4a6c      	ldr	r2, [pc, #432]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8006f84:	fa22 f303 	lsr.w	r3, r2, r3
 8006f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f8a:	e01e      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f8c:	4b67      	ldr	r3, [pc, #412]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f98:	d106      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8006f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fa0:	d102      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006fa2:	4b65      	ldr	r3, [pc, #404]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8006fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa6:	e010      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fa8:	4b60      	ldr	r3, [pc, #384]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fb4:	d106      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8006fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fbc:	d102      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006fbe:	4b5f      	ldr	r3, [pc, #380]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8006fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fc2:	e002      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006fc8:	e003      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8006fca:	e002      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fd0:	bf00      	nop
          }
        }
        break;
 8006fd2:	e2d6      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006fd4:	4b55      	ldr	r3, [pc, #340]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fda:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006fde:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fe6:	d031      	beq.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fee:	d866      	bhi.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ff4:	d027      	beq.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ffa:	d860      	bhi.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffe:	2b80      	cmp	r3, #128	@ 0x80
 8007000:	d019      	beq.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007004:	2b80      	cmp	r3, #128	@ 0x80
 8007006:	d85a      	bhi.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	2b40      	cmp	r3, #64	@ 0x40
 8007012:	d008      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007014:	e053      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007016:	f107 0320 	add.w	r3, r7, #32
 800701a:	4618      	mov	r0, r3
 800701c:	f7fd fb28 	bl	8004670 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007022:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007024:	e04e      	b.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007026:	f107 0314 	add.w	r3, r7, #20
 800702a:	4618      	mov	r0, r3
 800702c:	f7fd fc8a 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007034:	e046      	b.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007036:	f107 0308 	add.w	r3, r7, #8
 800703a:	4618      	mov	r0, r3
 800703c:	f7fd fdec 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007044:	e03e      	b.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007046:	4b3a      	ldr	r3, [pc, #232]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007048:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800704a:	e03b      	b.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800704c:	4b37      	ldr	r3, [pc, #220]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800704e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007052:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007056:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007058:	4b34      	ldr	r3, [pc, #208]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b02      	cmp	r3, #2
 8007062:	d10c      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8007064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d109      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800706a:	4b30      	ldr	r3, [pc, #192]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	08db      	lsrs	r3, r3, #3
 8007070:	f003 0303 	and.w	r3, r3, #3
 8007074:	4a2f      	ldr	r2, [pc, #188]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007076:	fa22 f303 	lsr.w	r3, r2, r3
 800707a:	637b      	str	r3, [r7, #52]	@ 0x34
 800707c:	e01e      	b.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800707e:	4b2b      	ldr	r3, [pc, #172]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800708a:	d106      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800708c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007092:	d102      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007094:	4b28      	ldr	r3, [pc, #160]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007096:	637b      	str	r3, [r7, #52]	@ 0x34
 8007098:	e010      	b.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800709a:	4b24      	ldr	r3, [pc, #144]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070a6:	d106      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80070a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070ae:	d102      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80070b0:	4b22      	ldr	r3, [pc, #136]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80070b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070b4:	e002      	b.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80070ba:	e003      	b.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80070bc:	e002      	b.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070c2:	bf00      	nop
          }
        }
        break;
 80070c4:	e25d      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80070c6:	4b19      	ldr	r3, [pc, #100]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80070c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070cc:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80070d0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d103      	bne.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80070d8:	f7fb fadc 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 80070dc:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80070de:	e250      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80070e0:	4b12      	ldr	r3, [pc, #72]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070ec:	d10b      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070f4:	d107      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070f6:	f107 0314 	add.w	r3, r7, #20
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fd fc22 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	637b      	str	r3, [r7, #52]	@ 0x34
 8007104:	e04f      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007106:	4b09      	ldr	r3, [pc, #36]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800710e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007112:	d115      	bne.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800711a:	d111      	bne.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800711c:	f107 0308 	add.w	r3, r7, #8
 8007120:	4618      	mov	r0, r3
 8007122:	f7fd fd79 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	637b      	str	r3, [r7, #52]	@ 0x34
 800712a:	e03c      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800712c:	44020c00 	.word	0x44020c00
 8007130:	00bb8000 	.word	0x00bb8000
 8007134:	03d09000 	.word	0x03d09000
 8007138:	003d0900 	.word	0x003d0900
 800713c:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007140:	4b94      	ldr	r3, [pc, #592]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b02      	cmp	r3, #2
 800714a:	d10d      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800714c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007152:	d109      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007154:	4b8f      	ldr	r3, [pc, #572]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	08db      	lsrs	r3, r3, #3
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	4a8e      	ldr	r2, [pc, #568]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007160:	fa22 f303 	lsr.w	r3, r2, r3
 8007164:	637b      	str	r3, [r7, #52]	@ 0x34
 8007166:	e01e      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007168:	4b8a      	ldr	r3, [pc, #552]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007174:	d106      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8007176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800717c:	d102      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800717e:	4b87      	ldr	r3, [pc, #540]	@ (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007180:	637b      	str	r3, [r7, #52]	@ 0x34
 8007182:	e010      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007184:	4b83      	ldr	r3, [pc, #524]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800718c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007190:	d106      	bne.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8007192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007194:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007198:	d102      	bne.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800719a:	4b81      	ldr	r3, [pc, #516]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800719c:	637b      	str	r3, [r7, #52]	@ 0x34
 800719e:	e002      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071a4:	e1ed      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80071a6:	e1ec      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80071a8:	4b7a      	ldr	r3, [pc, #488]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80071aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071ae:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80071b2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80071b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80071ba:	f7fb fa81 	bl	80026c0 <HAL_RCC_GetPCLK3Freq>
 80071be:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80071c0:	e1df      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80071c2:	4b74      	ldr	r3, [pc, #464]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071ce:	d10b      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d6:	d107      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071d8:	f107 0314 	add.w	r3, r7, #20
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fd fbb1 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e6:	e045      	b.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80071e8:	4b6a      	ldr	r3, [pc, #424]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071f4:	d10b      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80071f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071fc:	d107      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071fe:	f107 0308 	add.w	r3, r7, #8
 8007202:	4618      	mov	r0, r3
 8007204:	f7fd fd08 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	637b      	str	r3, [r7, #52]	@ 0x34
 800720c:	e032      	b.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800720e:	4b61      	ldr	r3, [pc, #388]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b02      	cmp	r3, #2
 8007218:	d10d      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800721a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007220:	d109      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007222:	4b5c      	ldr	r3, [pc, #368]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	08db      	lsrs	r3, r3, #3
 8007228:	f003 0303 	and.w	r3, r3, #3
 800722c:	4a5a      	ldr	r2, [pc, #360]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800722e:	fa22 f303 	lsr.w	r3, r2, r3
 8007232:	637b      	str	r3, [r7, #52]	@ 0x34
 8007234:	e01e      	b.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007236:	4b57      	ldr	r3, [pc, #348]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800723e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007242:	d106      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800724a:	d102      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800724c:	4b53      	ldr	r3, [pc, #332]	@ (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800724e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007250:	e010      	b.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007252:	4b50      	ldr	r3, [pc, #320]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800725a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800725e:	d106      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007262:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007266:	d102      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007268:	4b4d      	ldr	r3, [pc, #308]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800726a:	637b      	str	r3, [r7, #52]	@ 0x34
 800726c:	e002      	b.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007272:	e186      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007274:	e185      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007276:	4b47      	ldr	r3, [pc, #284]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800727c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007280:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	2b00      	cmp	r3, #0
 8007286:	d103      	bne.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007288:	f7fb fa04 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 800728c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800728e:	e178      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007290:	4b40      	ldr	r3, [pc, #256]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007298:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800729c:	d10b      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800729e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072a4:	d107      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072a6:	f107 0314 	add.w	r3, r7, #20
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fd fb4a 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072b4:	e045      	b.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80072b6:	4b37      	ldr	r3, [pc, #220]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072c2:	d10b      	bne.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072ca:	d107      	bne.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072cc:	f107 0308 	add.w	r3, r7, #8
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fd fca1 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072da:	e032      	b.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80072dc:	4b2d      	ldr	r3, [pc, #180]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d10d      	bne.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80072ee:	d109      	bne.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072f0:	4b28      	ldr	r3, [pc, #160]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	08db      	lsrs	r3, r3, #3
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	4a27      	ldr	r2, [pc, #156]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80072fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007300:	637b      	str	r3, [r7, #52]	@ 0x34
 8007302:	e01e      	b.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007304:	4b23      	ldr	r3, [pc, #140]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800730c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007310:	d106      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007318:	d102      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800731a:	4b20      	ldr	r3, [pc, #128]	@ (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800731c:	637b      	str	r3, [r7, #52]	@ 0x34
 800731e:	e010      	b.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007320:	4b1c      	ldr	r3, [pc, #112]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007328:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800732c:	d106      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007330:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007334:	d102      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8007336:	4b1a      	ldr	r3, [pc, #104]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007338:	637b      	str	r3, [r7, #52]	@ 0x34
 800733a:	e002      	b.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007340:	e11f      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007342:	e11e      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007344:	4b13      	ldr	r3, [pc, #76]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007346:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007352:	2b03      	cmp	r3, #3
 8007354:	d85f      	bhi.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8007356:	a201      	add	r2, pc, #4	@ (adr r2, 800735c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	0800736d 	.word	0x0800736d
 8007360:	08007375 	.word	0x08007375
 8007364:	08007385 	.word	0x08007385
 8007368:	080073a5 	.word	0x080073a5

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800736c:	f7fb f960 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8007370:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007372:	e053      	b.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007374:	f107 0320 	add.w	r3, r7, #32
 8007378:	4618      	mov	r0, r3
 800737a:	f7fd f979 	bl	8004670 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007382:	e04b      	b.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007384:	f107 0314 	add.w	r3, r7, #20
 8007388:	4618      	mov	r0, r3
 800738a:	f7fd fadb 	bl	8004944 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007392:	e043      	b.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007394:	44020c00 	.word	0x44020c00
 8007398:	03d09000 	.word	0x03d09000
 800739c:	003d0900 	.word	0x003d0900
 80073a0:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073a4:	4b79      	ldr	r3, [pc, #484]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80073a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073aa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80073ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073b0:	4b76      	ldr	r3, [pc, #472]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d10c      	bne.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 80073bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d109      	bne.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073c2:	4b72      	ldr	r3, [pc, #456]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	08db      	lsrs	r3, r3, #3
 80073c8:	f003 0303 	and.w	r3, r3, #3
 80073cc:	4a70      	ldr	r2, [pc, #448]	@ (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 80073ce:	fa22 f303 	lsr.w	r3, r2, r3
 80073d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073d4:	e01e      	b.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073d6:	4b6d      	ldr	r3, [pc, #436]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073e2:	d106      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 80073e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ea:	d102      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073ec:	4b69      	ldr	r3, [pc, #420]	@ (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 80073ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80073f0:	e010      	b.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073f2:	4b66      	ldr	r3, [pc, #408]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073fe:	d106      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007402:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007406:	d102      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007408:	4b63      	ldr	r3, [pc, #396]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800740a:	637b      	str	r3, [r7, #52]	@ 0x34
 800740c:	e002      	b.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007412:	e003      	b.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007414:	e002      	b.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800741a:	bf00      	nop
          }
        }
        break;
 800741c:	e0b1      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800741e:	4b5b      	ldr	r3, [pc, #364]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007424:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007428:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800742a:	4b58      	ldr	r3, [pc, #352]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800742c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b02      	cmp	r3, #2
 8007436:	d106      	bne.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743a:	2b00      	cmp	r3, #0
 800743c:	d103      	bne.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800743e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007442:	637b      	str	r3, [r7, #52]	@ 0x34
 8007444:	e01f      	b.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007446:	4b51      	ldr	r3, [pc, #324]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800744c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007454:	d106      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	2b40      	cmp	r3, #64	@ 0x40
 800745a:	d103      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800745c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
 8007462:	e010      	b.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007464:	4b49      	ldr	r3, [pc, #292]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800746c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007470:	d106      	bne.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007474:	2b80      	cmp	r3, #128	@ 0x80
 8007476:	d103      	bne.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007478:	f248 0312 	movw	r3, #32786	@ 0x8012
 800747c:	637b      	str	r3, [r7, #52]	@ 0x34
 800747e:	e002      	b.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007484:	e07d      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007486:	e07c      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007488:	4b40      	ldr	r3, [pc, #256]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800748a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800748e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007492:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007494:	4b3d      	ldr	r3, [pc, #244]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800749c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074a0:	d105      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80074a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d102      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80074a8:	4b3c      	ldr	r3, [pc, #240]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80074aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ac:	e031      	b.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80074ae:	4b37      	ldr	r3, [pc, #220]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074ba:	d10a      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	2b10      	cmp	r3, #16
 80074c0:	d107      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074c2:	f107 0320 	add.w	r3, r7, #32
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fd f8d2 	bl	8004670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d0:	e01f      	b.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80074d2:	4b2e      	ldr	r3, [pc, #184]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80074d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d106      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	2b20      	cmp	r3, #32
 80074e4:	d103      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 80074e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ec:	e011      	b.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80074ee:	4b27      	ldr	r3, [pc, #156]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80074f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074fc:	d106      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 80074fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007500:	2b30      	cmp	r3, #48	@ 0x30
 8007502:	d103      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007504:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007508:	637b      	str	r3, [r7, #52]	@ 0x34
 800750a:	e002      	b.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007510:	e037      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007512:	e036      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007514:	4b1d      	ldr	r3, [pc, #116]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007516:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800751a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800751e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007522:	2b10      	cmp	r3, #16
 8007524:	d107      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007526:	f107 0320 	add.w	r3, r7, #32
 800752a:	4618      	mov	r0, r3
 800752c:	f7fd f8a0 	bl	8004670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007532:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007534:	e025      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007536:	4b15      	ldr	r3, [pc, #84]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800753e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007542:	d10a      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8007544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007546:	2b20      	cmp	r3, #32
 8007548:	d107      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800754a:	f107 0308 	add.w	r3, r7, #8
 800754e:	4618      	mov	r0, r3
 8007550:	f7fd fb62 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	637b      	str	r3, [r7, #52]	@ 0x34
 8007558:	e00f      	b.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800755a:	4b0c      	ldr	r3, [pc, #48]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007566:	d105      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8007568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756a:	2b30      	cmp	r3, #48	@ 0x30
 800756c:	d102      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800756e:	4b0b      	ldr	r3, [pc, #44]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007570:	637b      	str	r3, [r7, #52]	@ 0x34
 8007572:	e002      	b.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8007578:	e003      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800757a:	e002      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007580:	bf00      	nop
    }
  }

  return (frequency);
 8007582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007584:	4618      	mov	r0, r3
 8007586:	373c      	adds	r7, #60	@ 0x3c
 8007588:	46bd      	mov	sp, r7
 800758a:	bd90      	pop	{r4, r7, pc}
 800758c:	44020c00 	.word	0x44020c00
 8007590:	03d09000 	.word	0x03d09000
 8007594:	003d0900 	.word	0x003d0900
 8007598:	017d7840 	.word	0x017d7840
 800759c:	02dc6c00 	.word	0x02dc6c00

080075a0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80075a8:	4b48      	ldr	r3, [pc, #288]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a47      	ldr	r2, [pc, #284]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 80075ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075b4:	f7f9 fe16 	bl	80011e4 <HAL_GetTick>
 80075b8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075ba:	e008      	b.n	80075ce <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075bc:	f7f9 fe12 	bl	80011e4 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d901      	bls.n	80075ce <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e07a      	b.n	80076c4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075ce:	4b3f      	ldr	r3, [pc, #252]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1f0      	bne.n	80075bc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80075da:	4b3c      	ldr	r3, [pc, #240]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 80075dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80075e2:	f023 0303 	bic.w	r3, r3, #3
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6811      	ldr	r1, [r2, #0]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	6852      	ldr	r2, [r2, #4]
 80075ee:	0212      	lsls	r2, r2, #8
 80075f0:	430a      	orrs	r2, r1
 80075f2:	4936      	ldr	r1, [pc, #216]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	3b01      	subs	r3, #1
 8007608:	025b      	lsls	r3, r3, #9
 800760a:	b29b      	uxth	r3, r3
 800760c:	431a      	orrs	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	3b01      	subs	r3, #1
 8007614:	041b      	lsls	r3, r3, #16
 8007616:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800761a:	431a      	orrs	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	3b01      	subs	r3, #1
 8007622:	061b      	lsls	r3, r3, #24
 8007624:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007628:	4928      	ldr	r1, [pc, #160]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 800762a:	4313      	orrs	r3, r2
 800762c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800762e:	4b27      	ldr	r3, [pc, #156]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 8007630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007632:	f023 020c 	bic.w	r2, r3, #12
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	4924      	ldr	r1, [pc, #144]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 800763c:	4313      	orrs	r3, r2
 800763e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007640:	4b22      	ldr	r3, [pc, #136]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 8007642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007644:	f023 0220 	bic.w	r2, r3, #32
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	491f      	ldr	r1, [pc, #124]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 800764e:	4313      	orrs	r3, r2
 8007650:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007652:	4b1e      	ldr	r3, [pc, #120]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 8007654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765a:	491c      	ldr	r1, [pc, #112]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 800765c:	4313      	orrs	r3, r2
 800765e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007660:	4b1a      	ldr	r3, [pc, #104]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 8007662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007664:	4a19      	ldr	r2, [pc, #100]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 8007666:	f023 0310 	bic.w	r3, r3, #16
 800766a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800766c:	4b17      	ldr	r3, [pc, #92]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 800766e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007670:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007674:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	6a12      	ldr	r2, [r2, #32]
 800767c:	00d2      	lsls	r2, r2, #3
 800767e:	4913      	ldr	r1, [pc, #76]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 8007680:	4313      	orrs	r3, r2
 8007682:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007684:	4b11      	ldr	r3, [pc, #68]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 8007686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007688:	4a10      	ldr	r2, [pc, #64]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 800768a:	f043 0310 	orr.w	r3, r3, #16
 800768e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007690:	4b0e      	ldr	r3, [pc, #56]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a0d      	ldr	r2, [pc, #52]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 8007696:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800769a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800769c:	f7f9 fda2 	bl	80011e4 <HAL_GetTick>
 80076a0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076a2:	e008      	b.n	80076b6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076a4:	f7f9 fd9e 	bl	80011e4 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d901      	bls.n	80076b6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e006      	b.n	80076c4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076b6:	4b05      	ldr	r3, [pc, #20]	@ (80076cc <RCCEx_PLL2_Config+0x12c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0f0      	beq.n	80076a4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80076c2:	2300      	movs	r3, #0

}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	44020c00 	.word	0x44020c00

080076d0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80076d8:	4b48      	ldr	r3, [pc, #288]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a47      	ldr	r2, [pc, #284]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 80076de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076e4:	f7f9 fd7e 	bl	80011e4 <HAL_GetTick>
 80076e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076ea:	e008      	b.n	80076fe <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076ec:	f7f9 fd7a 	bl	80011e4 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e07a      	b.n	80077f4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076fe:	4b3f      	ldr	r3, [pc, #252]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1f0      	bne.n	80076ec <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800770a:	4b3c      	ldr	r3, [pc, #240]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 800770c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007712:	f023 0303 	bic.w	r3, r3, #3
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	6811      	ldr	r1, [r2, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6852      	ldr	r2, [r2, #4]
 800771e:	0212      	lsls	r2, r2, #8
 8007720:	430a      	orrs	r2, r1
 8007722:	4936      	ldr	r1, [pc, #216]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 8007724:	4313      	orrs	r3, r2
 8007726:	630b      	str	r3, [r1, #48]	@ 0x30
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	3b01      	subs	r3, #1
 800772e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	3b01      	subs	r3, #1
 8007738:	025b      	lsls	r3, r3, #9
 800773a:	b29b      	uxth	r3, r3
 800773c:	431a      	orrs	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	3b01      	subs	r3, #1
 8007744:	041b      	lsls	r3, r3, #16
 8007746:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800774a:	431a      	orrs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	3b01      	subs	r3, #1
 8007752:	061b      	lsls	r3, r3, #24
 8007754:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007758:	4928      	ldr	r1, [pc, #160]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 800775a:	4313      	orrs	r3, r2
 800775c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800775e:	4b27      	ldr	r3, [pc, #156]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 8007760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007762:	f023 020c 	bic.w	r2, r3, #12
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	4924      	ldr	r1, [pc, #144]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 800776c:	4313      	orrs	r3, r2
 800776e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007770:	4b22      	ldr	r3, [pc, #136]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 8007772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007774:	f023 0220 	bic.w	r2, r3, #32
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	491f      	ldr	r1, [pc, #124]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 800777e:	4313      	orrs	r3, r2
 8007780:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007782:	4b1e      	ldr	r3, [pc, #120]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 8007784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800778a:	491c      	ldr	r1, [pc, #112]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 800778c:	4313      	orrs	r3, r2
 800778e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007790:	4b1a      	ldr	r3, [pc, #104]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 8007792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007794:	4a19      	ldr	r2, [pc, #100]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 8007796:	f023 0310 	bic.w	r3, r3, #16
 800779a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800779c:	4b17      	ldr	r3, [pc, #92]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 800779e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077a4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	6a12      	ldr	r2, [r2, #32]
 80077ac:	00d2      	lsls	r2, r2, #3
 80077ae:	4913      	ldr	r1, [pc, #76]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80077b4:	4b11      	ldr	r3, [pc, #68]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 80077b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b8:	4a10      	ldr	r2, [pc, #64]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 80077ba:	f043 0310 	orr.w	r3, r3, #16
 80077be:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80077c0:	4b0e      	ldr	r3, [pc, #56]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a0d      	ldr	r2, [pc, #52]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 80077c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80077cc:	f7f9 fd0a 	bl	80011e4 <HAL_GetTick>
 80077d0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077d2:	e008      	b.n	80077e6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077d4:	f7f9 fd06 	bl	80011e4 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d901      	bls.n	80077e6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e006      	b.n	80077f4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077e6:	4b05      	ldr	r3, [pc, #20]	@ (80077fc <RCCEx_PLL3_Config+0x12c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0f0      	beq.n	80077d4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	44020c00 	.word	0x44020c00

08007800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e049      	b.n	80078a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d106      	bne.n	800782c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f841 	bl	80078ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3304      	adds	r3, #4
 800783c:	4619      	mov	r1, r3
 800783e:	4610      	mov	r0, r2
 8007840:	f000 fa66 	bl	8007d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
	...

080078c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d001      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e07c      	b.n	80079d6 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0201 	orr.w	r2, r2, #1
 80078f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a3a      	ldr	r2, [pc, #232]	@ (80079e4 <HAL_TIM_Base_Start_IT+0x120>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d04a      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a39      	ldr	r2, [pc, #228]	@ (80079e8 <HAL_TIM_Base_Start_IT+0x124>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d045      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007910:	d040      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800791a:	d03b      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a32      	ldr	r2, [pc, #200]	@ (80079ec <HAL_TIM_Base_Start_IT+0x128>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d036      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a31      	ldr	r2, [pc, #196]	@ (80079f0 <HAL_TIM_Base_Start_IT+0x12c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d031      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a2f      	ldr	r2, [pc, #188]	@ (80079f4 <HAL_TIM_Base_Start_IT+0x130>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d02c      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a2e      	ldr	r2, [pc, #184]	@ (80079f8 <HAL_TIM_Base_Start_IT+0x134>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d027      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a2c      	ldr	r2, [pc, #176]	@ (80079fc <HAL_TIM_Base_Start_IT+0x138>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d022      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a2b      	ldr	r2, [pc, #172]	@ (8007a00 <HAL_TIM_Base_Start_IT+0x13c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d01d      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a29      	ldr	r2, [pc, #164]	@ (8007a04 <HAL_TIM_Base_Start_IT+0x140>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d018      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a28      	ldr	r2, [pc, #160]	@ (8007a08 <HAL_TIM_Base_Start_IT+0x144>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d013      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a26      	ldr	r2, [pc, #152]	@ (8007a0c <HAL_TIM_Base_Start_IT+0x148>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d00e      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a25      	ldr	r2, [pc, #148]	@ (8007a10 <HAL_TIM_Base_Start_IT+0x14c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d009      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a23      	ldr	r2, [pc, #140]	@ (8007a14 <HAL_TIM_Base_Start_IT+0x150>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d004      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xd0>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a22      	ldr	r2, [pc, #136]	@ (8007a18 <HAL_TIM_Base_Start_IT+0x154>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d115      	bne.n	80079c0 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	4b20      	ldr	r3, [pc, #128]	@ (8007a1c <HAL_TIM_Base_Start_IT+0x158>)
 800799c:	4013      	ands	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b06      	cmp	r3, #6
 80079a4:	d015      	beq.n	80079d2 <HAL_TIM_Base_Start_IT+0x10e>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079ac:	d011      	beq.n	80079d2 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f042 0201 	orr.w	r2, r2, #1
 80079bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079be:	e008      	b.n	80079d2 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f042 0201 	orr.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	e000      	b.n	80079d4 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	40012c00 	.word	0x40012c00
 80079e8:	50012c00 	.word	0x50012c00
 80079ec:	40000400 	.word	0x40000400
 80079f0:	50000400 	.word	0x50000400
 80079f4:	40000800 	.word	0x40000800
 80079f8:	50000800 	.word	0x50000800
 80079fc:	40000c00 	.word	0x40000c00
 8007a00:	50000c00 	.word	0x50000c00
 8007a04:	40013400 	.word	0x40013400
 8007a08:	50013400 	.word	0x50013400
 8007a0c:	40001800 	.word	0x40001800
 8007a10:	50001800 	.word	0x50001800
 8007a14:	40014000 	.word	0x40014000
 8007a18:	50014000 	.word	0x50014000
 8007a1c:	00010007 	.word	0x00010007

08007a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d020      	beq.n	8007a84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d01b      	beq.n	8007a84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f06f 0202 	mvn.w	r2, #2
 8007a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f931 	bl	8007cd2 <HAL_TIM_IC_CaptureCallback>
 8007a70:	e005      	b.n	8007a7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f923 	bl	8007cbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f934 	bl	8007ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f003 0304 	and.w	r3, r3, #4
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d020      	beq.n	8007ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d01b      	beq.n	8007ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f06f 0204 	mvn.w	r2, #4
 8007aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f90b 	bl	8007cd2 <HAL_TIM_IC_CaptureCallback>
 8007abc:	e005      	b.n	8007aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f8fd 	bl	8007cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f90e 	bl	8007ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d020      	beq.n	8007b1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f003 0308 	and.w	r3, r3, #8
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d01b      	beq.n	8007b1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f06f 0208 	mvn.w	r2, #8
 8007aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2204      	movs	r2, #4
 8007af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f8e5 	bl	8007cd2 <HAL_TIM_IC_CaptureCallback>
 8007b08:	e005      	b.n	8007b16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f8d7 	bl	8007cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f8e8 	bl	8007ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f003 0310 	and.w	r3, r3, #16
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d020      	beq.n	8007b68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f003 0310 	and.w	r3, r3, #16
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01b      	beq.n	8007b68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f06f 0210 	mvn.w	r2, #16
 8007b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2208      	movs	r2, #8
 8007b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f8bf 	bl	8007cd2 <HAL_TIM_IC_CaptureCallback>
 8007b54:	e005      	b.n	8007b62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f8b1 	bl	8007cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f8c2 	bl	8007ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00c      	beq.n	8007b8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d007      	beq.n	8007b8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f06f 0201 	mvn.w	r2, #1
 8007b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7f9 f856 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d104      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00c      	beq.n	8007bba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d007      	beq.n	8007bba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f9df 	bl	8007f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00c      	beq.n	8007bde <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d007      	beq.n	8007bde <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f9d7 	bl	8007f8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00c      	beq.n	8007c02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d007      	beq.n	8007c02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f87c 	bl	8007cfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f003 0320 	and.w	r3, r3, #32
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00c      	beq.n	8007c26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d007      	beq.n	8007c26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f06f 0220 	mvn.w	r2, #32
 8007c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f99f 	bl	8007f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00c      	beq.n	8007c4a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d007      	beq.n	8007c4a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f9ab 	bl	8007fa0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00c      	beq.n	8007c6e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d007      	beq.n	8007c6e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f9a3 	bl	8007fb4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00c      	beq.n	8007c92 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f99b 	bl	8007fc8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00c      	beq.n	8007cb6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d007      	beq.n	8007cb6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f993 	bl	8007fdc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cb6:	bf00      	nop
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
	...

08007d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a7a      	ldr	r2, [pc, #488]	@ (8007f0c <TIM_Base_SetConfig+0x1fc>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d02b      	beq.n	8007d80 <TIM_Base_SetConfig+0x70>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a79      	ldr	r2, [pc, #484]	@ (8007f10 <TIM_Base_SetConfig+0x200>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d027      	beq.n	8007d80 <TIM_Base_SetConfig+0x70>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d36:	d023      	beq.n	8007d80 <TIM_Base_SetConfig+0x70>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d3e:	d01f      	beq.n	8007d80 <TIM_Base_SetConfig+0x70>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a74      	ldr	r2, [pc, #464]	@ (8007f14 <TIM_Base_SetConfig+0x204>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d01b      	beq.n	8007d80 <TIM_Base_SetConfig+0x70>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a73      	ldr	r2, [pc, #460]	@ (8007f18 <TIM_Base_SetConfig+0x208>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d017      	beq.n	8007d80 <TIM_Base_SetConfig+0x70>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a72      	ldr	r2, [pc, #456]	@ (8007f1c <TIM_Base_SetConfig+0x20c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d013      	beq.n	8007d80 <TIM_Base_SetConfig+0x70>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a71      	ldr	r2, [pc, #452]	@ (8007f20 <TIM_Base_SetConfig+0x210>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d00f      	beq.n	8007d80 <TIM_Base_SetConfig+0x70>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a70      	ldr	r2, [pc, #448]	@ (8007f24 <TIM_Base_SetConfig+0x214>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d00b      	beq.n	8007d80 <TIM_Base_SetConfig+0x70>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a6f      	ldr	r2, [pc, #444]	@ (8007f28 <TIM_Base_SetConfig+0x218>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d007      	beq.n	8007d80 <TIM_Base_SetConfig+0x70>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a6e      	ldr	r2, [pc, #440]	@ (8007f2c <TIM_Base_SetConfig+0x21c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d003      	beq.n	8007d80 <TIM_Base_SetConfig+0x70>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a6d      	ldr	r2, [pc, #436]	@ (8007f30 <TIM_Base_SetConfig+0x220>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d108      	bne.n	8007d92 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a5d      	ldr	r2, [pc, #372]	@ (8007f0c <TIM_Base_SetConfig+0x1fc>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d05b      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a5c      	ldr	r2, [pc, #368]	@ (8007f10 <TIM_Base_SetConfig+0x200>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d057      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007da8:	d053      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007db0:	d04f      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a57      	ldr	r2, [pc, #348]	@ (8007f14 <TIM_Base_SetConfig+0x204>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d04b      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a56      	ldr	r2, [pc, #344]	@ (8007f18 <TIM_Base_SetConfig+0x208>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d047      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a55      	ldr	r2, [pc, #340]	@ (8007f1c <TIM_Base_SetConfig+0x20c>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d043      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a54      	ldr	r2, [pc, #336]	@ (8007f20 <TIM_Base_SetConfig+0x210>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d03f      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a53      	ldr	r2, [pc, #332]	@ (8007f24 <TIM_Base_SetConfig+0x214>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d03b      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a52      	ldr	r2, [pc, #328]	@ (8007f28 <TIM_Base_SetConfig+0x218>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d037      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a51      	ldr	r2, [pc, #324]	@ (8007f2c <TIM_Base_SetConfig+0x21c>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d033      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a50      	ldr	r2, [pc, #320]	@ (8007f30 <TIM_Base_SetConfig+0x220>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d02f      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a4f      	ldr	r2, [pc, #316]	@ (8007f34 <TIM_Base_SetConfig+0x224>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d02b      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a4e      	ldr	r2, [pc, #312]	@ (8007f38 <TIM_Base_SetConfig+0x228>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d027      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a4d      	ldr	r2, [pc, #308]	@ (8007f3c <TIM_Base_SetConfig+0x22c>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d023      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a4c      	ldr	r2, [pc, #304]	@ (8007f40 <TIM_Base_SetConfig+0x230>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d01f      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a4b      	ldr	r2, [pc, #300]	@ (8007f44 <TIM_Base_SetConfig+0x234>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d01b      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a4a      	ldr	r2, [pc, #296]	@ (8007f48 <TIM_Base_SetConfig+0x238>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d017      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a49      	ldr	r2, [pc, #292]	@ (8007f4c <TIM_Base_SetConfig+0x23c>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d013      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a48      	ldr	r2, [pc, #288]	@ (8007f50 <TIM_Base_SetConfig+0x240>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d00f      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a47      	ldr	r2, [pc, #284]	@ (8007f54 <TIM_Base_SetConfig+0x244>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d00b      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a46      	ldr	r2, [pc, #280]	@ (8007f58 <TIM_Base_SetConfig+0x248>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d007      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a45      	ldr	r2, [pc, #276]	@ (8007f5c <TIM_Base_SetConfig+0x24c>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d003      	beq.n	8007e52 <TIM_Base_SetConfig+0x142>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a44      	ldr	r2, [pc, #272]	@ (8007f60 <TIM_Base_SetConfig+0x250>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d108      	bne.n	8007e64 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a20      	ldr	r2, [pc, #128]	@ (8007f0c <TIM_Base_SetConfig+0x1fc>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d023      	beq.n	8007ed8 <TIM_Base_SetConfig+0x1c8>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a1f      	ldr	r2, [pc, #124]	@ (8007f10 <TIM_Base_SetConfig+0x200>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d01f      	beq.n	8007ed8 <TIM_Base_SetConfig+0x1c8>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a24      	ldr	r2, [pc, #144]	@ (8007f2c <TIM_Base_SetConfig+0x21c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d01b      	beq.n	8007ed8 <TIM_Base_SetConfig+0x1c8>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a23      	ldr	r2, [pc, #140]	@ (8007f30 <TIM_Base_SetConfig+0x220>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d017      	beq.n	8007ed8 <TIM_Base_SetConfig+0x1c8>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a28      	ldr	r2, [pc, #160]	@ (8007f4c <TIM_Base_SetConfig+0x23c>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d013      	beq.n	8007ed8 <TIM_Base_SetConfig+0x1c8>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a27      	ldr	r2, [pc, #156]	@ (8007f50 <TIM_Base_SetConfig+0x240>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d00f      	beq.n	8007ed8 <TIM_Base_SetConfig+0x1c8>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a26      	ldr	r2, [pc, #152]	@ (8007f54 <TIM_Base_SetConfig+0x244>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00b      	beq.n	8007ed8 <TIM_Base_SetConfig+0x1c8>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a25      	ldr	r2, [pc, #148]	@ (8007f58 <TIM_Base_SetConfig+0x248>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d007      	beq.n	8007ed8 <TIM_Base_SetConfig+0x1c8>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a24      	ldr	r2, [pc, #144]	@ (8007f5c <TIM_Base_SetConfig+0x24c>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d003      	beq.n	8007ed8 <TIM_Base_SetConfig+0x1c8>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a23      	ldr	r2, [pc, #140]	@ (8007f60 <TIM_Base_SetConfig+0x250>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d103      	bne.n	8007ee0 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	691a      	ldr	r2, [r3, #16]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d105      	bne.n	8007efe <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	f023 0201 	bic.w	r2, r3, #1
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	611a      	str	r2, [r3, #16]
  }
}
 8007efe:	bf00      	nop
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	40012c00 	.word	0x40012c00
 8007f10:	50012c00 	.word	0x50012c00
 8007f14:	40000400 	.word	0x40000400
 8007f18:	50000400 	.word	0x50000400
 8007f1c:	40000800 	.word	0x40000800
 8007f20:	50000800 	.word	0x50000800
 8007f24:	40000c00 	.word	0x40000c00
 8007f28:	50000c00 	.word	0x50000c00
 8007f2c:	40013400 	.word	0x40013400
 8007f30:	50013400 	.word	0x50013400
 8007f34:	40001800 	.word	0x40001800
 8007f38:	50001800 	.word	0x50001800
 8007f3c:	40001c00 	.word	0x40001c00
 8007f40:	50001c00 	.word	0x50001c00
 8007f44:	40002000 	.word	0x40002000
 8007f48:	50002000 	.word	0x50002000
 8007f4c:	40014000 	.word	0x40014000
 8007f50:	50014000 	.word	0x50014000
 8007f54:	40014400 	.word	0x40014400
 8007f58:	50014400 	.word	0x50014400
 8007f5c:	40014800 	.word	0x40014800
 8007f60:	50014800 	.word	0x50014800

08007f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e042      	b.n	8008088 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008008:	2b00      	cmp	r3, #0
 800800a:	d106      	bne.n	800801a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7f8 fe2f 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2224      	movs	r2, #36	@ 0x24
 800801e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0201 	bic.w	r2, r2, #1
 8008030:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fab4 	bl	80085a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f8c3 	bl	80081cc <UART_SetConfig>
 8008046:	4603      	mov	r3, r0
 8008048:	2b01      	cmp	r3, #1
 800804a:	d101      	bne.n	8008050 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e01b      	b.n	8008088 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800805e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800806e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f042 0201 	orr.w	r2, r2, #1
 800807e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fb33 	bl	80086ec <UART_CheckIdleState>
 8008086:	4603      	mov	r3, r0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08a      	sub	sp, #40	@ 0x28
 8008094:	af02      	add	r7, sp, #8
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	4613      	mov	r3, r2
 800809e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080a6:	2b20      	cmp	r3, #32
 80080a8:	f040 808b 	bne.w	80081c2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <HAL_UART_Transmit+0x28>
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e083      	b.n	80081c4 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080c6:	2b80      	cmp	r3, #128	@ 0x80
 80080c8:	d107      	bne.n	80080da <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80080d8:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2221      	movs	r2, #33	@ 0x21
 80080e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080ea:	f7f9 f87b 	bl	80011e4 <HAL_GetTick>
 80080ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	88fa      	ldrh	r2, [r7, #6]
 80080f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	88fa      	ldrh	r2, [r7, #6]
 80080fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008108:	d108      	bne.n	800811c <HAL_UART_Transmit+0x8c>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d104      	bne.n	800811c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008112:	2300      	movs	r3, #0
 8008114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	61bb      	str	r3, [r7, #24]
 800811a:	e003      	b.n	8008124 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008120:	2300      	movs	r3, #0
 8008122:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008124:	e030      	b.n	8008188 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2200      	movs	r2, #0
 800812e:	2180      	movs	r1, #128	@ 0x80
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 fb85 	bl	8008840 <UART_WaitOnFlagUntilTimeout>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d005      	beq.n	8008148 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e03d      	b.n	80081c4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10b      	bne.n	8008166 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800815c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	3302      	adds	r3, #2
 8008162:	61bb      	str	r3, [r7, #24]
 8008164:	e007      	b.n	8008176 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	781a      	ldrb	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	3301      	adds	r3, #1
 8008174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b01      	subs	r3, #1
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800818e:	b29b      	uxth	r3, r3
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1c8      	bne.n	8008126 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	2200      	movs	r2, #0
 800819c:	2140      	movs	r1, #64	@ 0x40
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 fb4e 	bl	8008840 <UART_WaitOnFlagUntilTimeout>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d005      	beq.n	80081b6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e006      	b.n	80081c4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	e000      	b.n	80081c4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80081c2:	2302      	movs	r3, #2
  }
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3720      	adds	r7, #32
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081d0:	b094      	sub	sp, #80	@ 0x50
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80081dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	4b78      	ldr	r3, [pc, #480]	@ (80083c4 <UART_SetConfig+0x1f8>)
 80081e2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	431a      	orrs	r2, r3
 80081ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	431a      	orrs	r2, r3
 80081f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4971      	ldr	r1, [pc, #452]	@ (80083c8 <UART_SetConfig+0x1fc>)
 8008204:	4019      	ands	r1, r3
 8008206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800820c:	430b      	orrs	r3, r1
 800820e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800821a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821c:	68d9      	ldr	r1, [r3, #12]
 800821e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	ea40 0301 	orr.w	r3, r0, r1
 8008226:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800822e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	4b64      	ldr	r3, [pc, #400]	@ (80083c4 <UART_SetConfig+0x1f8>)
 8008234:	429a      	cmp	r2, r3
 8008236:	d009      	beq.n	800824c <UART_SetConfig+0x80>
 8008238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	4b63      	ldr	r3, [pc, #396]	@ (80083cc <UART_SetConfig+0x200>)
 800823e:	429a      	cmp	r2, r3
 8008240:	d004      	beq.n	800824c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008244:	6a1a      	ldr	r2, [r3, #32]
 8008246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008248:	4313      	orrs	r3, r2
 800824a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800824c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008256:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800825a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008260:	430b      	orrs	r3, r1
 8008262:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826a:	f023 000f 	bic.w	r0, r3, #15
 800826e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008270:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	ea40 0301 	orr.w	r3, r0, r1
 800827a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800827c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	4b53      	ldr	r3, [pc, #332]	@ (80083d0 <UART_SetConfig+0x204>)
 8008282:	429a      	cmp	r2, r3
 8008284:	d102      	bne.n	800828c <UART_SetConfig+0xc0>
 8008286:	2301      	movs	r3, #1
 8008288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800828a:	e066      	b.n	800835a <UART_SetConfig+0x18e>
 800828c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	4b50      	ldr	r3, [pc, #320]	@ (80083d4 <UART_SetConfig+0x208>)
 8008292:	429a      	cmp	r2, r3
 8008294:	d102      	bne.n	800829c <UART_SetConfig+0xd0>
 8008296:	2302      	movs	r3, #2
 8008298:	64bb      	str	r3, [r7, #72]	@ 0x48
 800829a:	e05e      	b.n	800835a <UART_SetConfig+0x18e>
 800829c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	4b4d      	ldr	r3, [pc, #308]	@ (80083d8 <UART_SetConfig+0x20c>)
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d102      	bne.n	80082ac <UART_SetConfig+0xe0>
 80082a6:	2304      	movs	r3, #4
 80082a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082aa:	e056      	b.n	800835a <UART_SetConfig+0x18e>
 80082ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	4b4a      	ldr	r3, [pc, #296]	@ (80083dc <UART_SetConfig+0x210>)
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d102      	bne.n	80082bc <UART_SetConfig+0xf0>
 80082b6:	2308      	movs	r3, #8
 80082b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082ba:	e04e      	b.n	800835a <UART_SetConfig+0x18e>
 80082bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	4b47      	ldr	r3, [pc, #284]	@ (80083e0 <UART_SetConfig+0x214>)
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d102      	bne.n	80082cc <UART_SetConfig+0x100>
 80082c6:	2310      	movs	r3, #16
 80082c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082ca:	e046      	b.n	800835a <UART_SetConfig+0x18e>
 80082cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	4b44      	ldr	r3, [pc, #272]	@ (80083e4 <UART_SetConfig+0x218>)
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d102      	bne.n	80082dc <UART_SetConfig+0x110>
 80082d6:	2320      	movs	r3, #32
 80082d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082da:	e03e      	b.n	800835a <UART_SetConfig+0x18e>
 80082dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	4b41      	ldr	r3, [pc, #260]	@ (80083e8 <UART_SetConfig+0x21c>)
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d102      	bne.n	80082ec <UART_SetConfig+0x120>
 80082e6:	2340      	movs	r3, #64	@ 0x40
 80082e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082ea:	e036      	b.n	800835a <UART_SetConfig+0x18e>
 80082ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	4b3e      	ldr	r3, [pc, #248]	@ (80083ec <UART_SetConfig+0x220>)
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d102      	bne.n	80082fc <UART_SetConfig+0x130>
 80082f6:	2380      	movs	r3, #128	@ 0x80
 80082f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082fa:	e02e      	b.n	800835a <UART_SetConfig+0x18e>
 80082fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	4b3b      	ldr	r3, [pc, #236]	@ (80083f0 <UART_SetConfig+0x224>)
 8008302:	429a      	cmp	r2, r3
 8008304:	d103      	bne.n	800830e <UART_SetConfig+0x142>
 8008306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800830a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800830c:	e025      	b.n	800835a <UART_SetConfig+0x18e>
 800830e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	4b38      	ldr	r3, [pc, #224]	@ (80083f4 <UART_SetConfig+0x228>)
 8008314:	429a      	cmp	r2, r3
 8008316:	d103      	bne.n	8008320 <UART_SetConfig+0x154>
 8008318:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800831c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800831e:	e01c      	b.n	800835a <UART_SetConfig+0x18e>
 8008320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	4b34      	ldr	r3, [pc, #208]	@ (80083f8 <UART_SetConfig+0x22c>)
 8008326:	429a      	cmp	r2, r3
 8008328:	d103      	bne.n	8008332 <UART_SetConfig+0x166>
 800832a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800832e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008330:	e013      	b.n	800835a <UART_SetConfig+0x18e>
 8008332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	4b31      	ldr	r3, [pc, #196]	@ (80083fc <UART_SetConfig+0x230>)
 8008338:	429a      	cmp	r2, r3
 800833a:	d103      	bne.n	8008344 <UART_SetConfig+0x178>
 800833c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008340:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008342:	e00a      	b.n	800835a <UART_SetConfig+0x18e>
 8008344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	4b1e      	ldr	r3, [pc, #120]	@ (80083c4 <UART_SetConfig+0x1f8>)
 800834a:	429a      	cmp	r2, r3
 800834c:	d103      	bne.n	8008356 <UART_SetConfig+0x18a>
 800834e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008354:	e001      	b.n	800835a <UART_SetConfig+0x18e>
 8008356:	2300      	movs	r3, #0
 8008358:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800835a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	4b19      	ldr	r3, [pc, #100]	@ (80083c4 <UART_SetConfig+0x1f8>)
 8008360:	429a      	cmp	r2, r3
 8008362:	d005      	beq.n	8008370 <UART_SetConfig+0x1a4>
 8008364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	4b18      	ldr	r3, [pc, #96]	@ (80083cc <UART_SetConfig+0x200>)
 800836a:	429a      	cmp	r2, r3
 800836c:	f040 8094 	bne.w	8008498 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008372:	2200      	movs	r2, #0
 8008374:	623b      	str	r3, [r7, #32]
 8008376:	627a      	str	r2, [r7, #36]	@ 0x24
 8008378:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800837c:	f7fc fdb6 	bl	8004eec <HAL_RCCEx_GetPeriphCLKFreq>
 8008380:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 80f7 	beq.w	8008578 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800838a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800838c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838e:	4a1c      	ldr	r2, [pc, #112]	@ (8008400 <UART_SetConfig+0x234>)
 8008390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008394:	461a      	mov	r2, r3
 8008396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008398:	fbb3 f3f2 	udiv	r3, r3, r2
 800839c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800839e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	4613      	mov	r3, r2
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	4413      	add	r3, r2
 80083a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d305      	bcc.n	80083ba <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d924      	bls.n	8008404 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80083c0:	e069      	b.n	8008496 <UART_SetConfig+0x2ca>
 80083c2:	bf00      	nop
 80083c4:	44002400 	.word	0x44002400
 80083c8:	cfff69f3 	.word	0xcfff69f3
 80083cc:	54002400 	.word	0x54002400
 80083d0:	40013800 	.word	0x40013800
 80083d4:	40004400 	.word	0x40004400
 80083d8:	40004800 	.word	0x40004800
 80083dc:	40004c00 	.word	0x40004c00
 80083e0:	40005000 	.word	0x40005000
 80083e4:	40006400 	.word	0x40006400
 80083e8:	40007800 	.word	0x40007800
 80083ec:	40007c00 	.word	0x40007c00
 80083f0:	40008000 	.word	0x40008000
 80083f4:	40006800 	.word	0x40006800
 80083f8:	40006c00 	.word	0x40006c00
 80083fc:	40008400 	.word	0x40008400
 8008400:	0800c0ec 	.word	0x0800c0ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008406:	2200      	movs	r2, #0
 8008408:	61bb      	str	r3, [r7, #24]
 800840a:	61fa      	str	r2, [r7, #28]
 800840c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008410:	4a64      	ldr	r2, [pc, #400]	@ (80085a4 <UART_SetConfig+0x3d8>)
 8008412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008416:	b29b      	uxth	r3, r3
 8008418:	2200      	movs	r2, #0
 800841a:	613b      	str	r3, [r7, #16]
 800841c:	617a      	str	r2, [r7, #20]
 800841e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008422:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008426:	f7f8 f84f 	bl	80004c8 <__aeabi_uldivmod>
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	4610      	mov	r0, r2
 8008430:	4619      	mov	r1, r3
 8008432:	f04f 0200 	mov.w	r2, #0
 8008436:	f04f 0300 	mov.w	r3, #0
 800843a:	020b      	lsls	r3, r1, #8
 800843c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008440:	0202      	lsls	r2, r0, #8
 8008442:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008444:	6849      	ldr	r1, [r1, #4]
 8008446:	0849      	lsrs	r1, r1, #1
 8008448:	2000      	movs	r0, #0
 800844a:	460c      	mov	r4, r1
 800844c:	4605      	mov	r5, r0
 800844e:	eb12 0804 	adds.w	r8, r2, r4
 8008452:	eb43 0905 	adc.w	r9, r3, r5
 8008456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	60bb      	str	r3, [r7, #8]
 800845e:	60fa      	str	r2, [r7, #12]
 8008460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008464:	4640      	mov	r0, r8
 8008466:	4649      	mov	r1, r9
 8008468:	f7f8 f82e 	bl	80004c8 <__aeabi_uldivmod>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	4613      	mov	r3, r2
 8008472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008476:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800847a:	d308      	bcc.n	800848e <UART_SetConfig+0x2c2>
 800847c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800847e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008482:	d204      	bcs.n	800848e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8008484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800848a:	60da      	str	r2, [r3, #12]
 800848c:	e003      	b.n	8008496 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008494:	e070      	b.n	8008578 <UART_SetConfig+0x3ac>
 8008496:	e06f      	b.n	8008578 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084a0:	d13c      	bne.n	800851c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80084a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084a4:	2200      	movs	r2, #0
 80084a6:	603b      	str	r3, [r7, #0]
 80084a8:	607a      	str	r2, [r7, #4]
 80084aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084ae:	f7fc fd1d 	bl	8004eec <HAL_RCCEx_GetPeriphCLKFreq>
 80084b2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d05e      	beq.n	8008578 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084be:	4a39      	ldr	r2, [pc, #228]	@ (80085a4 <UART_SetConfig+0x3d8>)
 80084c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084c4:	461a      	mov	r2, r3
 80084c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084cc:	005a      	lsls	r2, r3, #1
 80084ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	085b      	lsrs	r3, r3, #1
 80084d4:	441a      	add	r2, r3
 80084d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	fbb2 f3f3 	udiv	r3, r2, r3
 80084de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084e2:	2b0f      	cmp	r3, #15
 80084e4:	d916      	bls.n	8008514 <UART_SetConfig+0x348>
 80084e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084ec:	d212      	bcs.n	8008514 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	f023 030f 	bic.w	r3, r3, #15
 80084f6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084fa:	085b      	lsrs	r3, r3, #1
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	f003 0307 	and.w	r3, r3, #7
 8008502:	b29a      	uxth	r2, r3
 8008504:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008506:	4313      	orrs	r3, r2
 8008508:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800850a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008510:	60da      	str	r2, [r3, #12]
 8008512:	e031      	b.n	8008578 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800851a:	e02d      	b.n	8008578 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800851c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800851e:	2200      	movs	r2, #0
 8008520:	469a      	mov	sl, r3
 8008522:	4693      	mov	fp, r2
 8008524:	4650      	mov	r0, sl
 8008526:	4659      	mov	r1, fp
 8008528:	f7fc fce0 	bl	8004eec <HAL_RCCEx_GetPeriphCLKFreq>
 800852c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800852e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008530:	2b00      	cmp	r3, #0
 8008532:	d021      	beq.n	8008578 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008538:	4a1a      	ldr	r2, [pc, #104]	@ (80085a4 <UART_SetConfig+0x3d8>)
 800853a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800853e:	461a      	mov	r2, r3
 8008540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008542:	fbb3 f2f2 	udiv	r2, r3, r2
 8008546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	085b      	lsrs	r3, r3, #1
 800854c:	441a      	add	r2, r3
 800854e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	fbb2 f3f3 	udiv	r3, r2, r3
 8008556:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800855a:	2b0f      	cmp	r3, #15
 800855c:	d909      	bls.n	8008572 <UART_SetConfig+0x3a6>
 800855e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008564:	d205      	bcs.n	8008572 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008568:	b29a      	uxth	r2, r3
 800856a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	60da      	str	r2, [r3, #12]
 8008570:	e002      	b.n	8008578 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800857a:	2201      	movs	r2, #1
 800857c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008582:	2201      	movs	r2, #1
 8008584:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800858a:	2200      	movs	r2, #0
 800858c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800858e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008590:	2200      	movs	r2, #0
 8008592:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008594:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008598:	4618      	mov	r0, r3
 800859a:	3750      	adds	r7, #80	@ 0x50
 800859c:	46bd      	mov	sp, r7
 800859e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085a2:	bf00      	nop
 80085a4:	0800c0ec 	.word	0x0800c0ec

080085a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b4:	f003 0308 	and.w	r3, r3, #8
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	430a      	orrs	r2, r1
 80085f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800861a:	f003 0304 	and.w	r3, r3, #4
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800863c:	f003 0310 	and.w	r3, r3, #16
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00a      	beq.n	800865a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800865e:	f003 0320 	and.w	r3, r3, #32
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	430a      	orrs	r2, r1
 800867a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01a      	beq.n	80086be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086a6:	d10a      	bne.n	80086be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	605a      	str	r2, [r3, #4]
  }
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b098      	sub	sp, #96	@ 0x60
 80086f0:	af02      	add	r7, sp, #8
 80086f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086fc:	f7f8 fd72 	bl	80011e4 <HAL_GetTick>
 8008700:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0308 	and.w	r3, r3, #8
 800870c:	2b08      	cmp	r3, #8
 800870e:	d12f      	bne.n	8008770 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008710:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008718:	2200      	movs	r2, #0
 800871a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f88e 	bl	8008840 <UART_WaitOnFlagUntilTimeout>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d022      	beq.n	8008770 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800873a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800873e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	461a      	mov	r2, r3
 8008746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008748:	647b      	str	r3, [r7, #68]	@ 0x44
 800874a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800874e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008750:	e841 2300 	strex	r3, r2, [r1]
 8008754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1e6      	bne.n	800872a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2220      	movs	r2, #32
 8008760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e063      	b.n	8008838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 0304 	and.w	r3, r3, #4
 800877a:	2b04      	cmp	r3, #4
 800877c:	d149      	bne.n	8008812 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800877e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008786:	2200      	movs	r2, #0
 8008788:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f857 	bl	8008840 <UART_WaitOnFlagUntilTimeout>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d03c      	beq.n	8008812 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a0:	e853 3f00 	ldrex	r3, [r3]
 80087a4:	623b      	str	r3, [r7, #32]
   return(result);
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80087b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087be:	e841 2300 	strex	r3, r2, [r1]
 80087c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1e6      	bne.n	8008798 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3308      	adds	r3, #8
 80087d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f023 0301 	bic.w	r3, r3, #1
 80087e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3308      	adds	r3, #8
 80087e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087ea:	61fa      	str	r2, [r7, #28]
 80087ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	69b9      	ldr	r1, [r7, #24]
 80087f0:	69fa      	ldr	r2, [r7, #28]
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	617b      	str	r3, [r7, #20]
   return(result);
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e5      	bne.n	80087ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2220      	movs	r2, #32
 8008802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e012      	b.n	8008838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2220      	movs	r2, #32
 8008816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2220      	movs	r2, #32
 800881e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3758      	adds	r7, #88	@ 0x58
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	603b      	str	r3, [r7, #0]
 800884c:	4613      	mov	r3, r2
 800884e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008850:	e04f      	b.n	80088f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008858:	d04b      	beq.n	80088f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800885a:	f7f8 fcc3 	bl	80011e4 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	429a      	cmp	r2, r3
 8008868:	d302      	bcc.n	8008870 <UART_WaitOnFlagUntilTimeout+0x30>
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e04e      	b.n	8008912 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0304 	and.w	r3, r3, #4
 800887e:	2b00      	cmp	r3, #0
 8008880:	d037      	beq.n	80088f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b80      	cmp	r3, #128	@ 0x80
 8008886:	d034      	beq.n	80088f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2b40      	cmp	r3, #64	@ 0x40
 800888c:	d031      	beq.n	80088f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	f003 0308 	and.w	r3, r3, #8
 8008898:	2b08      	cmp	r3, #8
 800889a:	d110      	bne.n	80088be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2208      	movs	r2, #8
 80088a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 f838 	bl	800891a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2208      	movs	r2, #8
 80088ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e029      	b.n	8008912 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088cc:	d111      	bne.n	80088f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 f81e 	bl	800891a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e00f      	b.n	8008912 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	69da      	ldr	r2, [r3, #28]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	4013      	ands	r3, r2
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	429a      	cmp	r2, r3
 8008900:	bf0c      	ite	eq
 8008902:	2301      	moveq	r3, #1
 8008904:	2300      	movne	r3, #0
 8008906:	b2db      	uxtb	r3, r3
 8008908:	461a      	mov	r2, r3
 800890a:	79fb      	ldrb	r3, [r7, #7]
 800890c:	429a      	cmp	r2, r3
 800890e:	d0a0      	beq.n	8008852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800891a:	b480      	push	{r7}
 800891c:	b095      	sub	sp, #84	@ 0x54
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008932:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008940:	643b      	str	r3, [r7, #64]	@ 0x40
 8008942:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008946:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800894e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e6      	bne.n	8008922 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3308      	adds	r3, #8
 800895a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	61fb      	str	r3, [r7, #28]
   return(result);
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800896a:	f023 0301 	bic.w	r3, r3, #1
 800896e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3308      	adds	r3, #8
 8008976:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008978:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800897a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800897e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008980:	e841 2300 	strex	r3, r2, [r1]
 8008984:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e3      	bne.n	8008954 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008990:	2b01      	cmp	r3, #1
 8008992:	d118      	bne.n	80089c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	e853 3f00 	ldrex	r3, [r3]
 80089a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f023 0310 	bic.w	r3, r3, #16
 80089a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089b2:	61bb      	str	r3, [r7, #24]
 80089b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b6:	6979      	ldr	r1, [r7, #20]
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	e841 2300 	strex	r3, r2, [r1]
 80089be:	613b      	str	r3, [r7, #16]
   return(result);
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1e6      	bne.n	8008994 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2220      	movs	r2, #32
 80089ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80089da:	bf00      	nop
 80089dc:	3754      	adds	r7, #84	@ 0x54
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b085      	sub	sp, #20
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d101      	bne.n	80089fc <HAL_UARTEx_DisableFifoMode+0x16>
 80089f8:	2302      	movs	r3, #2
 80089fa:	e027      	b.n	8008a4c <HAL_UARTEx_DisableFifoMode+0x66>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2224      	movs	r2, #36	@ 0x24
 8008a08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0201 	bic.w	r2, r2, #1
 8008a22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008a2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d101      	bne.n	8008a70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	e02d      	b.n	8008acc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2224      	movs	r2, #36	@ 0x24
 8008a7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f022 0201 	bic.w	r2, r2, #1
 8008a96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f84f 	bl	8008b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2220      	movs	r2, #32
 8008abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d101      	bne.n	8008aec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e02d      	b.n	8008b48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2224      	movs	r2, #36	@ 0x24
 8008af8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f022 0201 	bic.w	r2, r2, #1
 8008b12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f811 	bl	8008b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d108      	bne.n	8008b72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b70:	e031      	b.n	8008bd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b72:	2308      	movs	r3, #8
 8008b74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b76:	2308      	movs	r3, #8
 8008b78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	0e5b      	lsrs	r3, r3, #25
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	f003 0307 	and.w	r3, r3, #7
 8008b88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	0f5b      	lsrs	r3, r3, #29
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 0307 	and.w	r3, r3, #7
 8008b98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	7b3a      	ldrb	r2, [r7, #12]
 8008b9e:	4911      	ldr	r1, [pc, #68]	@ (8008be4 <UARTEx_SetNbDataToProcess+0x94>)
 8008ba0:	5c8a      	ldrb	r2, [r1, r2]
 8008ba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ba6:	7b3a      	ldrb	r2, [r7, #12]
 8008ba8:	490f      	ldr	r1, [pc, #60]	@ (8008be8 <UARTEx_SetNbDataToProcess+0x98>)
 8008baa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
 8008bba:	7b7a      	ldrb	r2, [r7, #13]
 8008bbc:	4909      	ldr	r1, [pc, #36]	@ (8008be4 <UARTEx_SetNbDataToProcess+0x94>)
 8008bbe:	5c8a      	ldrb	r2, [r1, r2]
 8008bc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bc4:	7b7a      	ldrb	r2, [r7, #13]
 8008bc6:	4908      	ldr	r1, [pc, #32]	@ (8008be8 <UARTEx_SetNbDataToProcess+0x98>)
 8008bc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bca:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008bd6:	bf00      	nop
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	0800c104 	.word	0x0800c104
 8008be8:	0800c10c 	.word	0x0800c10c

08008bec <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b096      	sub	sp, #88	@ 0x58
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
 8008bf8:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	3303      	adds	r3, #3
 8008bfe:	f023 0303 	bic.w	r3, r3, #3
 8008c02:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c04:	f3ef 8310 	mrs	r3, PRIMASK
 8008c08:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 8008c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8008c0c:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c0e:	b672      	cpsid	i
#endif
    return(int_posture);
 8008c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8008c12:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008c14:	4b55      	ldr	r3, [pc, #340]	@ (8008d6c <_tx_byte_allocate+0x180>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c22:	621a      	str	r2, [r3, #32]
 8008c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c26:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2a:	f383 8810 	msr	PRIMASK, r3
}
 8008c2e:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8008c30:	6879      	ldr	r1, [r7, #4]
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 f9b2 	bl	8008f9c <_tx_byte_pool_search>
 8008c38:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8008c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8008c42:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c44:	b672      	cpsid	i
    return(int_posture);
 8008c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8008c48:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8008c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8008c50:	2301      	movs	r3, #1
 8008c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c54:	e006      	b.n	8008c64 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d101      	bne.n	8008c64 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8008c60:	2301      	movs	r3, #1
 8008c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8008c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0d9      	beq.n	8008c1e <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c6e:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8008c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d008      	beq.n	8008c88 <_tx_byte_allocate+0x9c>
 8008c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c78:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	f383 8810 	msr	PRIMASK, r3
}
 8008c80:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8008c82:	2300      	movs	r3, #0
 8008c84:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c86:	e06c      	b.n	8008d62 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d061      	beq.n	8008d52 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8008c8e:	4b38      	ldr	r3, [pc, #224]	@ (8008d70 <_tx_byte_allocate+0x184>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d007      	beq.n	8008ca6 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8008c96:	2310      	movs	r3, #16
 8008c98:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c9c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	f383 8810 	msr	PRIMASK, r3
}
 8008ca4:	e05d      	b.n	8008d62 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8008ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ca8:	4a32      	ldr	r2, [pc, #200]	@ (8008d74 <_tx_byte_allocate+0x188>)
 8008caa:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8008cac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8008cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8008cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8008cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cc8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd0:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8008cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d109      	bne.n	8008cf6 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ce6:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8008ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cec:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8008cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cf2:	675a      	str	r2, [r3, #116]	@ 0x74
 8008cf4:	e011      	b.n	8008d1a <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8008cfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cfe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008d00:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8008d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d06:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8008d08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d0c:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d12:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8008d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d18:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8008d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d1c:	2209      	movs	r2, #9
 8008d1e:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d22:	2201      	movs	r2, #1
 8008d24:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d28:	683a      	ldr	r2, [r7, #0]
 8008d2a:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8008d2c:	4b10      	ldr	r3, [pc, #64]	@ (8008d70 <_tx_byte_allocate+0x184>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3301      	adds	r3, #1
 8008d32:	4a0f      	ldr	r2, [pc, #60]	@ (8008d70 <_tx_byte_allocate+0x184>)
 8008d34:	6013      	str	r3, [r2, #0]
 8008d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d38:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	f383 8810 	msr	PRIMASK, r3
}
 8008d40:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8008d42:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8008d44:	f001 f8fe 	bl	8009f44 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8008d48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d50:	e007      	b.n	8008d62 <_tx_byte_allocate+0x176>
 8008d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d54:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f383 8810 	msr	PRIMASK, r3
}
 8008d5c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8008d5e:	2310      	movs	r3, #16
 8008d60:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8008d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3758      	adds	r7, #88	@ 0x58
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	20000ddc 	.word	0x20000ddc
 8008d70:	20000e74 	.word	0x20000e74
 8008d74:	08008d79 	.word	0x08008d79

08008d78 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08e      	sub	sp, #56	@ 0x38
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d82:	f3ef 8310 	mrs	r3, PRIMASK
 8008d86:	623b      	str	r3, [r7, #32]
    return(posture);
 8008d88:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008d8a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d8c:	b672      	cpsid	i
    return(int_posture);
 8008d8e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8008d90:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d96:	4a33      	ldr	r2, [pc, #204]	@ (8008e64 <_tx_byte_pool_cleanup+0xec>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d158      	bne.n	8008e4e <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d152      	bne.n	8008e4e <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dac:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8008dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d04c      	beq.n	8008e4e <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8008db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a2b      	ldr	r2, [pc, #172]	@ (8008e68 <_tx_byte_pool_cleanup+0xf0>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d147      	bne.n	8008e4e <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d043      	beq.n	8008e4e <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd0:	1e5a      	subs	r2, r3, #1
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd4:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dda:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8008ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d103      	bne.n	8008dea <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8008de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de4:	2200      	movs	r2, #0
 8008de6:	625a      	str	r2, [r3, #36]	@ 0x24
 8008de8:	e013      	b.n	8008e12 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dee:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008df4:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8008df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dfa:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e00:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8008e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d102      	bne.n	8008e12 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e10:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e16:	2b09      	cmp	r3, #9
 8008e18:	d119      	bne.n	8008e4e <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2210      	movs	r2, #16
 8008e1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008e22:	4b12      	ldr	r3, [pc, #72]	@ (8008e6c <_tx_byte_pool_cleanup+0xf4>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3301      	adds	r3, #1
 8008e28:	4a10      	ldr	r2, [pc, #64]	@ (8008e6c <_tx_byte_pool_cleanup+0xf4>)
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e2e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f383 8810 	msr	PRIMASK, r3
}
 8008e36:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 ff83 	bl	8009d44 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e42:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008e44:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008e46:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e48:	b672      	cpsid	i
    return(int_posture);
 8008e4a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e50:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f383 8810 	msr	PRIMASK, r3
}
 8008e58:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008e5a:	bf00      	nop
 8008e5c:	3738      	adds	r7, #56	@ 0x38
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	08008d79 	.word	0x08008d79
 8008e68:	42595445 	.word	0x42595445
 8008e6c:	20000e74 	.word	0x20000e74

08008e70 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08e      	sub	sp, #56	@ 0x38
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8008e7e:	2234      	movs	r2, #52	@ 0x34
 8008e80:	2100      	movs	r1, #0
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f002 fb64 	bl	800b550 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	f023 0303 	bic.w	r3, r3, #3
 8008e8e:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	f1a3 0208 	sub.w	r2, r3, #8
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8008ec2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8008eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ecc:	3b04      	subs	r3, #4
 8008ece:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8008ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008edc:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8008ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ee0:	3b04      	subs	r3, #4
 8008ee2:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 8008ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008efa:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8008f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f02:	3304      	adds	r3, #4
 8008f04:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8008f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f08:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8008f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8008f8c <_tx_byte_pool_create+0x11c>)
 8008f0e:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008f16:	f3ef 8310 	mrs	r3, PRIMASK
 8008f1a:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008f1c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008f1e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008f20:	b672      	cpsid	i
    return(int_posture);
 8008f22:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8008f24:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4a19      	ldr	r2, [pc, #100]	@ (8008f90 <_tx_byte_pool_create+0x120>)
 8008f2a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8008f2c:	4b19      	ldr	r3, [pc, #100]	@ (8008f94 <_tx_byte_pool_create+0x124>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d109      	bne.n	8008f48 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8008f34:	4a18      	ldr	r2, [pc, #96]	@ (8008f98 <_tx_byte_pool_create+0x128>)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f46:	e011      	b.n	8008f6c <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8008f48:	4b13      	ldr	r3, [pc, #76]	@ (8008f98 <_tx_byte_pool_create+0x128>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
 8008f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f52:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	69fa      	ldr	r2, [r7, #28]
 8008f64:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6a3a      	ldr	r2, [r7, #32]
 8008f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8008f6c:	4b09      	ldr	r3, [pc, #36]	@ (8008f94 <_tx_byte_pool_create+0x124>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3301      	adds	r3, #1
 8008f72:	4a08      	ldr	r2, [pc, #32]	@ (8008f94 <_tx_byte_pool_create+0x124>)
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f78:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f383 8810 	msr	PRIMASK, r3
}
 8008f80:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3738      	adds	r7, #56	@ 0x38
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	ffffeeee 	.word	0xffffeeee
 8008f90:	42595445 	.word	0x42595445
 8008f94:	20000dd0 	.word	0x20000dd0
 8008f98:	20000dcc 	.word	0x20000dcc

08008f9c <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b097      	sub	sp, #92	@ 0x5c
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008faa:	f3ef 8310 	mrs	r3, PRIMASK
 8008fae:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8008fb2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008fb4:	b672      	cpsid	i
    return(int_posture);
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8008fb8:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	689a      	ldr	r2, [r3, #8]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	3b02      	subs	r3, #2
 8008fc4:	00db      	lsls	r3, r3, #3
 8008fc6:	4413      	add	r3, r2
 8008fc8:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d308      	bcc.n	8008fe4 <_tx_byte_pool_search+0x48>
 8008fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fd4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	f383 8810 	msr	PRIMASK, r3
}
 8008fdc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fe2:	e0dd      	b.n	80091a0 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008fe4:	4b72      	ldr	r3, [pc, #456]	@ (80091b0 <_tx_byte_pool_search+0x214>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008fee:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 8008ffe:	2300      	movs	r3, #0
 8009000:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8009002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009004:	3304      	adds	r3, #4
 8009006:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8009008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900a:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800900c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a68      	ldr	r2, [pc, #416]	@ (80091b4 <_tx_byte_pool_search+0x218>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d143      	bne.n	800909e <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8009016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009018:	2b00      	cmp	r3, #0
 800901a:	d104      	bne.n	8009026 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009020:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8009022:	2301      	movs	r3, #1
 8009024:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8009026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009028:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800902a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8009030:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8009038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800903a:	3b08      	subs	r3, #8
 800903c:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800903e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	429a      	cmp	r2, r3
 8009044:	d257      	bcs.n	80090f6 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8009046:	2300      	movs	r3, #0
 8009048:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800904a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904c:	3304      	adds	r3, #4
 800904e:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8009050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009052:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8009054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a56      	ldr	r2, [pc, #344]	@ (80091b4 <_tx_byte_pool_search+0x218>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d113      	bne.n	8009086 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800905e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009060:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8009062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009068:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	1e5a      	subs	r2, r3, #1
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800907a:	429a      	cmp	r2, r3
 800907c:	d114      	bne.n	80090a8 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009082:	615a      	str	r2, [r3, #20]
 8009084:	e010      	b.n	80090a8 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8009086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009088:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 800908a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8009090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009092:	2b00      	cmp	r3, #0
 8009094:	d008      	beq.n	80090a8 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8009096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009098:	3b01      	subs	r3, #1
 800909a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800909c:	e004      	b.n	80090a8 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800909e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090a0:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 80090a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80090a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 80090ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090b0:	3b01      	subs	r3, #1
 80090b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f383 8810 	msr	PRIMASK, r3
}
 80090be:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80090c0:	f3ef 8310 	mrs	r3, PRIMASK
 80090c4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80090c6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80090c8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80090ca:	b672      	cpsid	i
    return(int_posture);
 80090cc:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80090ce:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d009      	beq.n	80090ee <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	3301      	adds	r3, #1
 80090e6:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80090ec:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 80090ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d186      	bne.n	8009002 <_tx_byte_pool_search+0x66>
 80090f4:	e000      	b.n	80090f8 <_tx_byte_pool_search+0x15c>
                    break;
 80090f6:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 80090f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d048      	beq.n	8009190 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 80090fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	2b13      	cmp	r3, #19
 8009106:	d91e      	bls.n	8009146 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	3308      	adds	r3, #8
 800910c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800910e:	4413      	add	r3, r2
 8009110:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8009112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009114:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8009116:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009118:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800911a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009120:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8009122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009124:	3304      	adds	r3, #4
 8009126:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8009128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912a:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800912c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800912e:	4a21      	ldr	r2, [pc, #132]	@ (80091b4 <_tx_byte_pool_search+0x218>)
 8009130:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800913c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009140:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8009146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009148:	3304      	adds	r3, #4
 800914a:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800914c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914e:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8009150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	689a      	ldr	r2, [r3, #8]
 800915a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	f1a3 0208 	sub.w	r2, r3, #8
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800916c:	429a      	cmp	r2, r3
 800916e:	d105      	bne.n	800917c <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8009170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009172:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8009174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	615a      	str	r2, [r3, #20]
 800917c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800917e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f383 8810 	msr	PRIMASK, r3
}
 8009186:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8009188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800918a:	3308      	adds	r3, #8
 800918c:	653b      	str	r3, [r7, #80]	@ 0x50
 800918e:	e007      	b.n	80091a0 <_tx_byte_pool_search+0x204>
 8009190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009192:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	f383 8810 	msr	PRIMASK, r3
}
 800919a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800919c:	2300      	movs	r3, #0
 800919e:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80091a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	375c      	adds	r7, #92	@ 0x5c
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	20000ddc 	.word	0x20000ddc
 80091b4:	ffffeeee 	.word	0xffffeeee

080091b8 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80091bc:	f000 fbb0 	bl	8009920 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80091c0:	f001 f888 	bl	800a2d4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80091c4:	4b12      	ldr	r3, [pc, #72]	@ (8009210 <_tx_initialize_high_level+0x58>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	4b12      	ldr	r3, [pc, #72]	@ (8009214 <_tx_initialize_high_level+0x5c>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80091d0:	4b11      	ldr	r3, [pc, #68]	@ (8009218 <_tx_initialize_high_level+0x60>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]
 80091d6:	4b11      	ldr	r3, [pc, #68]	@ (800921c <_tx_initialize_high_level+0x64>)
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80091dc:	4b10      	ldr	r3, [pc, #64]	@ (8009220 <_tx_initialize_high_level+0x68>)
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	4b10      	ldr	r3, [pc, #64]	@ (8009224 <_tx_initialize_high_level+0x6c>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80091e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009228 <_tx_initialize_high_level+0x70>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	601a      	str	r2, [r3, #0]
 80091ee:	4b0f      	ldr	r3, [pc, #60]	@ (800922c <_tx_initialize_high_level+0x74>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80091f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009230 <_tx_initialize_high_level+0x78>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	601a      	str	r2, [r3, #0]
 80091fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009234 <_tx_initialize_high_level+0x7c>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8009200:	4b0d      	ldr	r3, [pc, #52]	@ (8009238 <_tx_initialize_high_level+0x80>)
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]
 8009206:	4b0d      	ldr	r3, [pc, #52]	@ (800923c <_tx_initialize_high_level+0x84>)
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]
#endif
}
 800920c:	bf00      	nop
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20000da4 	.word	0x20000da4
 8009214:	20000da8 	.word	0x20000da8
 8009218:	20000dac 	.word	0x20000dac
 800921c:	20000db0 	.word	0x20000db0
 8009220:	20000db4 	.word	0x20000db4
 8009224:	20000db8 	.word	0x20000db8
 8009228:	20000dc4 	.word	0x20000dc4
 800922c:	20000dc8 	.word	0x20000dc8
 8009230:	20000dcc 	.word	0x20000dcc
 8009234:	20000dd0 	.word	0x20000dd0
 8009238:	20000dbc 	.word	0x20000dbc
 800923c:	20000dc0 	.word	0x20000dc0

08009240 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8009244:	4b10      	ldr	r3, [pc, #64]	@ (8009288 <_tx_initialize_kernel_enter+0x48>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800924c:	d00c      	beq.n	8009268 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800924e:	4b0e      	ldr	r3, [pc, #56]	@ (8009288 <_tx_initialize_kernel_enter+0x48>)
 8009250:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8009254:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8009256:	f7f7 f819 	bl	800028c <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800925a:	f7ff ffad 	bl	80091b8 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800925e:	4b0b      	ldr	r3, [pc, #44]	@ (800928c <_tx_initialize_kernel_enter+0x4c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3301      	adds	r3, #1
 8009264:	4a09      	ldr	r2, [pc, #36]	@ (800928c <_tx_initialize_kernel_enter+0x4c>)
 8009266:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8009268:	4b07      	ldr	r3, [pc, #28]	@ (8009288 <_tx_initialize_kernel_enter+0x48>)
 800926a:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800926e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8009270:	4b07      	ldr	r3, [pc, #28]	@ (8009290 <_tx_initialize_kernel_enter+0x50>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4618      	mov	r0, r3
 8009276:	f7f7 fab3 	bl	80007e0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800927a:	4b03      	ldr	r3, [pc, #12]	@ (8009288 <_tx_initialize_kernel_enter+0x48>)
 800927c:	2200      	movs	r2, #0
 800927e:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8009280:	f7f7 f840 	bl	8000304 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8009284:	bf00      	nop
 8009286:	bd80      	pop	{r7, pc}
 8009288:	2000000c 	.word	0x2000000c
 800928c:	20000e74 	.word	0x20000e74
 8009290:	20000dd4 	.word	0x20000dd4

08009294 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08e      	sub	sp, #56	@ 0x38
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800929e:	f3ef 8310 	mrs	r3, PRIMASK
 80092a2:	623b      	str	r3, [r7, #32]
    return(posture);
 80092a4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80092a6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80092a8:	b672      	cpsid	i
    return(int_posture);
 80092aa:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80092ac:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092b2:	4a33      	ldr	r2, [pc, #204]	@ (8009380 <_tx_semaphore_cleanup+0xec>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d158      	bne.n	800936a <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d152      	bne.n	800936a <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092c8:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80092ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d04c      	beq.n	800936a <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80092d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a2b      	ldr	r2, [pc, #172]	@ (8009384 <_tx_semaphore_cleanup+0xf0>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d147      	bne.n	800936a <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80092da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d043      	beq.n	800936a <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80092e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	1e5a      	subs	r2, r3, #1
 80092ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f0:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80092f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80092f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d103      	bne.n	8009306 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80092fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009300:	2200      	movs	r2, #0
 8009302:	60da      	str	r2, [r3, #12]
 8009304:	e013      	b.n	800932e <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800930a:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009310:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009316:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800931c:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800931e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	429a      	cmp	r2, r3
 8009326:	d102      	bne.n	800932e <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8009328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800932c:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009332:	2b06      	cmp	r3, #6
 8009334:	d119      	bne.n	800936a <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	220d      	movs	r2, #13
 800933a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800933e:	4b12      	ldr	r3, [pc, #72]	@ (8009388 <_tx_semaphore_cleanup+0xf4>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3301      	adds	r3, #1
 8009344:	4a10      	ldr	r2, [pc, #64]	@ (8009388 <_tx_semaphore_cleanup+0xf4>)
 8009346:	6013      	str	r3, [r2, #0]
 8009348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800934a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f383 8810 	msr	PRIMASK, r3
}
 8009352:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fcf5 	bl	8009d44 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800935a:	f3ef 8310 	mrs	r3, PRIMASK
 800935e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009360:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009362:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009364:	b672      	cpsid	i
    return(int_posture);
 8009366:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8009368:	637b      	str	r3, [r7, #52]	@ 0x34
 800936a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800936c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f383 8810 	msr	PRIMASK, r3
}
 8009374:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009376:	bf00      	nop
 8009378:	3738      	adds	r7, #56	@ 0x38
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	08009295 	.word	0x08009295
 8009384:	53454d41 	.word	0x53454d41
 8009388:	20000e74 	.word	0x20000e74

0800938c <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b08a      	sub	sp, #40	@ 0x28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8009398:	221c      	movs	r2, #28
 800939a:	2100      	movs	r1, #0
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f002 f8d7 	bl	800b550 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80093ae:	f3ef 8310 	mrs	r3, PRIMASK
 80093b2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80093b4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80093b6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80093b8:	b672      	cpsid	i
    return(int_posture);
 80093ba:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80093bc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	4a18      	ldr	r2, [pc, #96]	@ (8009424 <_tx_semaphore_create+0x98>)
 80093c2:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80093c4:	4b18      	ldr	r3, [pc, #96]	@ (8009428 <_tx_semaphore_create+0x9c>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d109      	bne.n	80093e0 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80093cc:	4a17      	ldr	r2, [pc, #92]	@ (800942c <_tx_semaphore_create+0xa0>)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	619a      	str	r2, [r3, #24]
 80093de:	e011      	b.n	8009404 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 80093e0:	4b12      	ldr	r3, [pc, #72]	@ (800942c <_tx_semaphore_create+0xa0>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	69fa      	ldr	r2, [r7, #28]
 80093fc:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6a3a      	ldr	r2, [r7, #32]
 8009402:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8009404:	4b08      	ldr	r3, [pc, #32]	@ (8009428 <_tx_semaphore_create+0x9c>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3301      	adds	r3, #1
 800940a:	4a07      	ldr	r2, [pc, #28]	@ (8009428 <_tx_semaphore_create+0x9c>)
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009410:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f383 8810 	msr	PRIMASK, r3
}
 8009418:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3728      	adds	r7, #40	@ 0x28
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	53454d41 	.word	0x53454d41
 8009428:	20000da8 	.word	0x20000da8
 800942c:	20000da4 	.word	0x20000da4

08009430 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b08e      	sub	sp, #56	@ 0x38
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800943a:	2300      	movs	r3, #0
 800943c:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800943e:	f3ef 8310 	mrs	r3, PRIMASK
 8009442:	623b      	str	r3, [r7, #32]
    return(posture);
 8009444:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009446:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009448:	b672      	cpsid	i
    return(int_posture);
 800944a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800944c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00a      	beq.n	800946c <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	1e5a      	subs	r2, r3, #1
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	609a      	str	r2, [r3, #8]
 8009460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009462:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	f383 8810 	msr	PRIMASK, r3
}
 800946a:	e068      	b.n	800953e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d05d      	beq.n	800952e <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009472:	4b35      	ldr	r3, [pc, #212]	@ (8009548 <_tx_semaphore_get+0x118>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d008      	beq.n	800948c <_tx_semaphore_get+0x5c>
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f383 8810 	msr	PRIMASK, r3
}
 8009484:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8009486:	230d      	movs	r3, #13
 8009488:	637b      	str	r3, [r7, #52]	@ 0x34
 800948a:	e058      	b.n	800953e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800948c:	4b2f      	ldr	r3, [pc, #188]	@ (800954c <_tx_semaphore_get+0x11c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8009492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009494:	4a2e      	ldr	r2, [pc, #184]	@ (8009550 <_tx_semaphore_get+0x120>)
 8009496:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8009498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800949e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d109      	bne.n	80094c8 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094b8:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 80094ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094be:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 80094c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094c4:	675a      	str	r2, [r3, #116]	@ 0x74
 80094c6:	e011      	b.n	80094ec <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80094ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094d2:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80094d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094d8:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80094da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094de:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80094e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094e4:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80094e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094ea:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	1c5a      	adds	r2, r3, #1
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 80094f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f8:	2206      	movs	r2, #6
 80094fa:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80094fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094fe:	2201      	movs	r2, #1
 8009500:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009508:	4b0f      	ldr	r3, [pc, #60]	@ (8009548 <_tx_semaphore_get+0x118>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3301      	adds	r3, #1
 800950e:	4a0e      	ldr	r2, [pc, #56]	@ (8009548 <_tx_semaphore_get+0x118>)
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009514:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	f383 8810 	msr	PRIMASK, r3
}
 800951c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800951e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009520:	f000 fd10 	bl	8009f44 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009526:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800952a:	637b      	str	r3, [r7, #52]	@ 0x34
 800952c:	e007      	b.n	800953e <_tx_semaphore_get+0x10e>
 800952e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009530:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f383 8810 	msr	PRIMASK, r3
}
 8009538:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800953a:	230d      	movs	r3, #13
 800953c:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 800953e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009540:	4618      	mov	r0, r3
 8009542:	3738      	adds	r7, #56	@ 0x38
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	20000e74 	.word	0x20000e74
 800954c:	20000ddc 	.word	0x20000ddc
 8009550:	08009295 	.word	0x08009295

08009554 <_tx_semaphore_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value,
                    TX_THREAD **first_suspended, ULONG *suspended_count,
                    TX_SEMAPHORE **next_semaphore)
{
 8009554:	b480      	push	{r7}
 8009556:	b089      	sub	sp, #36	@ 0x24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009562:	f3ef 8310 	mrs	r3, PRIMASK
 8009566:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009568:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800956a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800956c:	b672      	cpsid	i
    return(int_posture);
 800956e:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8009570:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the semaphore.  */
    if (name != TX_NULL)
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d003      	beq.n	8009580 <_tx_semaphore_info_get+0x2c>
    {

        *name =  semaphore_ptr -> tx_semaphore_name;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the current value of the semaphore.  */
    if (current_value != TX_NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d003      	beq.n	800958e <_tx_semaphore_info_get+0x3a>
    {

        *current_value =  semaphore_ptr -> tx_semaphore_count;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	689a      	ldr	r2, [r3, #8]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the first thread suspended on this semaphore.  */
    if (first_suspended != TX_NULL)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d003      	beq.n	800959c <_tx_semaphore_info_get+0x48>
    {

        *first_suspended =  semaphore_ptr -> tx_semaphore_suspension_list;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	68da      	ldr	r2, [r3, #12]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of threads suspended on this semaphore.  */
    if (suspended_count != TX_NULL)
 800959c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d003      	beq.n	80095aa <_tx_semaphore_info_get+0x56>
    {

        *suspended_count =  (ULONG) semaphore_ptr -> tx_semaphore_suspended_count;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	691a      	ldr	r2, [r3, #16]
 80095a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the pointer to the next semaphore created.  */
    if (next_semaphore != TX_NULL)
 80095aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <_tx_semaphore_info_get+0x64>
    {

        *next_semaphore =  semaphore_ptr -> tx_semaphore_created_next;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	695a      	ldr	r2, [r3, #20]
 80095b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f383 8810 	msr	PRIMASK, r3
}
 80095c2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3724      	adds	r7, #36	@ 0x24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
	...

080095d4 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08c      	sub	sp, #48	@ 0x30
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80095dc:	f3ef 8310 	mrs	r3, PRIMASK
 80095e0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80095e2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80095e4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80095e6:	b672      	cpsid	i
    return(int_posture);
 80095e8:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 80095ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 80095f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10a      	bne.n	800960e <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	1c5a      	adds	r2, r3, #1
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	609a      	str	r2, [r3, #8]
 8009602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009604:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f383 8810 	msr	PRIMASK, r3
}
 800960c:	e033      	b.n	8009676 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8009614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009616:	3b01      	subs	r3, #1
 8009618:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800961a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961c:	2b00      	cmp	r3, #0
 800961e:	d103      	bne.n	8009628 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	60da      	str	r2, [r3, #12]
 8009626:	e00e      	b.n	8009646 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8009628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800962c:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a3a      	ldr	r2, [r7, #32]
 8009632:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009638:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800963a:	6a3b      	ldr	r3, [r7, #32]
 800963c:	69fa      	ldr	r2, [r7, #28]
 800963e:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	6a3a      	ldr	r2, [r7, #32]
 8009644:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800964a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800964c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964e:	2200      	movs	r2, #0
 8009650:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009654:	2200      	movs	r2, #0
 8009656:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800965a:	4b09      	ldr	r3, [pc, #36]	@ (8009680 <_tx_semaphore_put+0xac>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3301      	adds	r3, #1
 8009660:	4a07      	ldr	r2, [pc, #28]	@ (8009680 <_tx_semaphore_put+0xac>)
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009666:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f383 8810 	msr	PRIMASK, r3
}
 800966e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009670:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009672:	f000 fb67 	bl	8009d44 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3730      	adds	r7, #48	@ 0x30
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	20000e74 	.word	0x20000e74

08009684 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b092      	sub	sp, #72	@ 0x48
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
 8009690:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8009692:	2300      	movs	r3, #0
 8009694:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8009696:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009698:	21ef      	movs	r1, #239	@ 0xef
 800969a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800969c:	f001 ff58 	bl	800b550 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80096a0:	22b0      	movs	r2, #176	@ 0xb0
 80096a2:	2100      	movs	r1, #0
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f001 ff53 	bl	800b550 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80096c0:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096c6:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096d2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096da:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096e0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2220      	movs	r2, #32
 80096e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80096ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80096ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096f0:	3b01      	subs	r3, #1
 80096f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80096f4:	4413      	add	r3, r2
 80096f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80096fc:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80096fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009700:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009702:	429a      	cmp	r2, r3
 8009704:	d007      	beq.n	8009716 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8009714:	e006      	b.n	8009724 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800971a:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009720:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2203      	movs	r2, #3
 8009728:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	4a48      	ldr	r2, [pc, #288]	@ (8009850 <_tx_thread_create+0x1cc>)
 800972e:	655a      	str	r2, [r3, #84]	@ 0x54
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8009736:	4947      	ldr	r1, [pc, #284]	@ (8009854 <_tx_thread_create+0x1d0>)
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f7f6 fe49 	bl	80003d0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800973e:	f3ef 8310 	mrs	r3, PRIMASK
 8009742:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8009744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8009746:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8009748:	b672      	cpsid	i
    return(int_posture);
 800974a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800974c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	4a41      	ldr	r2, [pc, #260]	@ (8009858 <_tx_thread_create+0x1d4>)
 8009752:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8009754:	4b41      	ldr	r3, [pc, #260]	@ (800985c <_tx_thread_create+0x1d8>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10b      	bne.n	8009774 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800975c:	4a40      	ldr	r2, [pc, #256]	@ (8009860 <_tx_thread_create+0x1dc>)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8009772:	e016      	b.n	80097a2 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8009774:	4b3a      	ldr	r3, [pc, #232]	@ (8009860 <_tx_thread_create+0x1dc>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800977a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800977c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009780:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8009782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800978a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800979e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80097a2:	4b2e      	ldr	r3, [pc, #184]	@ (800985c <_tx_thread_create+0x1d8>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3301      	adds	r3, #1
 80097a8:	4a2c      	ldr	r2, [pc, #176]	@ (800985c <_tx_thread_create+0x1d8>)
 80097aa:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80097ac:	4b2d      	ldr	r3, [pc, #180]	@ (8009864 <_tx_thread_create+0x1e0>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3301      	adds	r3, #1
 80097b2:	4a2c      	ldr	r2, [pc, #176]	@ (8009864 <_tx_thread_create+0x1e0>)
 80097b4:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80097b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d129      	bne.n	8009810 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80097bc:	f3ef 8305 	mrs	r3, IPSR
 80097c0:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 80097c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80097c4:	4b28      	ldr	r3, [pc, #160]	@ (8009868 <_tx_thread_create+0x1e4>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80097ce:	d30d      	bcc.n	80097ec <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80097d0:	4b26      	ldr	r3, [pc, #152]	@ (800986c <_tx_thread_create+0x1e8>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80097d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d009      	beq.n	80097f0 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80097dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097e0:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80097e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80097ea:	e001      	b.n	80097f0 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80097f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	f383 8810 	msr	PRIMASK, r3
}
 80097fa:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 faa1 	bl	8009d44 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8009802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009804:	2b00      	cmp	r3, #0
 8009806:	d01e      	beq.n	8009846 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8009808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800980a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800980c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800980e:	e01a      	b.n	8009846 <_tx_thread_create+0x1c2>
 8009810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009812:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f383 8810 	msr	PRIMASK, r3
}
 800981a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800981c:	f3ef 8310 	mrs	r3, PRIMASK
 8009820:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009822:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009824:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009826:	b672      	cpsid	i
    return(int_posture);
 8009828:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800982a:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800982c:	4b0d      	ldr	r3, [pc, #52]	@ (8009864 <_tx_thread_create+0x1e0>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	3b01      	subs	r3, #1
 8009832:	4a0c      	ldr	r2, [pc, #48]	@ (8009864 <_tx_thread_create+0x1e0>)
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009838:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	f383 8810 	msr	PRIMASK, r3
}
 8009840:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009842:	f000 fa45 	bl	8009cd0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3748      	adds	r7, #72	@ 0x48
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	0800a219 	.word	0x0800a219
 8009854:	08009a59 	.word	0x08009a59
 8009858:	54485244 	.word	0x54485244
 800985c:	20000de8 	.word	0x20000de8
 8009860:	20000de4 	.word	0x20000de4
 8009864:	20000e74 	.word	0x20000e74
 8009868:	2000000c 	.word	0x2000000c
 800986c:	20000de0 	.word	0x20000de0

08009870 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8009870:	b480      	push	{r7}
 8009872:	b089      	sub	sp, #36	@ 0x24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800987e:	f3ef 8310 	mrs	r3, PRIMASK
 8009882:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009884:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009886:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009888:	b672      	cpsid	i
    return(int_posture);
 800988a:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800988c:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d003      	beq.n	800989c <_tx_thread_info_get+0x2c>
    {

        *name =  thread_ptr -> tx_thread_name;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <_tx_thread_info_get+0x3a>
    {

        *state =  thread_ptr -> tx_thread_state;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d003      	beq.n	80098b8 <_tx_thread_info_get+0x48>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 80098b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d004      	beq.n	80098c8 <_tx_thread_info_get+0x58>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80098c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c6:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 80098c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d004      	beq.n	80098d8 <_tx_thread_info_get+0x68>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80098d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d6:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 80098d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d003      	beq.n	80098e6 <_tx_thread_info_get+0x76>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	699a      	ldr	r2, [r3, #24]
 80098e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e4:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 80098e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <_tx_thread_info_get+0x86>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80098f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f4:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 80098f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d003      	beq.n	8009904 <_tx_thread_info_get+0x94>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	f383 8810 	msr	PRIMASK, r3
}
 800990e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3724      	adds	r7, #36	@ 0x24
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
	...

08009920 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8009924:	4b12      	ldr	r3, [pc, #72]	@ (8009970 <_tx_thread_initialize+0x50>)
 8009926:	2200      	movs	r2, #0
 8009928:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800992a:	4b12      	ldr	r3, [pc, #72]	@ (8009974 <_tx_thread_initialize+0x54>)
 800992c:	2200      	movs	r2, #0
 800992e:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8009930:	4b11      	ldr	r3, [pc, #68]	@ (8009978 <_tx_thread_initialize+0x58>)
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009936:	4b11      	ldr	r3, [pc, #68]	@ (800997c <_tx_thread_initialize+0x5c>)
 8009938:	2220      	movs	r2, #32
 800993a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800993c:	2280      	movs	r2, #128	@ 0x80
 800993e:	2100      	movs	r1, #0
 8009940:	480f      	ldr	r0, [pc, #60]	@ (8009980 <_tx_thread_initialize+0x60>)
 8009942:	f001 fe05 	bl	800b550 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8009946:	4b0f      	ldr	r3, [pc, #60]	@ (8009984 <_tx_thread_initialize+0x64>)
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800994c:	4b0e      	ldr	r3, [pc, #56]	@ (8009988 <_tx_thread_initialize+0x68>)
 800994e:	2200      	movs	r2, #0
 8009950:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8009952:	4b0e      	ldr	r3, [pc, #56]	@ (800998c <_tx_thread_initialize+0x6c>)
 8009954:	2200      	movs	r2, #0
 8009956:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8009958:	4b0d      	ldr	r3, [pc, #52]	@ (8009990 <_tx_thread_initialize+0x70>)
 800995a:	2200      	movs	r2, #0
 800995c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800995e:	4b0d      	ldr	r3, [pc, #52]	@ (8009994 <_tx_thread_initialize+0x74>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 8009966:	4a0b      	ldr	r2, [pc, #44]	@ (8009994 <_tx_thread_initialize+0x74>)
 8009968:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800996a:	bf00      	nop
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20000ddc 	.word	0x20000ddc
 8009974:	20000de0 	.word	0x20000de0
 8009978:	20000dec 	.word	0x20000dec
 800997c:	20000df0 	.word	0x20000df0
 8009980:	20000df4 	.word	0x20000df4
 8009984:	20000de4 	.word	0x20000de4
 8009988:	20000de8 	.word	0x20000de8
 800998c:	20000e74 	.word	0x20000e74
 8009990:	20000e78 	.word	0x20000e78
 8009994:	20000e7c 	.word	0x20000e7c

08009998 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b08c      	sub	sp, #48	@ 0x30
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 80099a0:	2300      	movs	r3, #0
 80099a2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80099a4:	f3ef 8310 	mrs	r3, PRIMASK
 80099a8:	61fb      	str	r3, [r7, #28]
    return(posture);
 80099aa:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80099ac:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80099ae:	b672      	cpsid	i
    return(int_posture);
 80099b0:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80099b2:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099b8:	2b03      	cmp	r3, #3
 80099ba:	d12f      	bne.n	8009a1c <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80099bc:	f3ef 8305 	mrs	r3, IPSR
 80099c0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80099c2:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80099c4:	4b21      	ldr	r3, [pc, #132]	@ (8009a4c <_tx_thread_resume+0xb4>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80099ce:	d30d      	bcc.n	80099ec <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80099d0:	4b1f      	ldr	r3, [pc, #124]	@ (8009a50 <_tx_thread_resume+0xb8>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80099d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d009      	beq.n	80099f0 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80099dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099e0:	627b      	str	r3, [r7, #36]	@ 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80099e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80099ea:	e001      	b.n	80099f0 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80099f0:	4b18      	ldr	r3, [pc, #96]	@ (8009a54 <_tx_thread_resume+0xbc>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3301      	adds	r3, #1
 80099f6:	4a17      	ldr	r2, [pc, #92]	@ (8009a54 <_tx_thread_resume+0xbc>)
 80099f8:	6013      	str	r3, [r2, #0]
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	f383 8810 	msr	PRIMASK, r3
}
 8009a04:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f99c 	bl	8009d44 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8009a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8009a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a16:	63da      	str	r2, [r3, #60]	@ 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8009a18:	2300      	movs	r3, #0
 8009a1a:	e012      	b.n	8009a42 <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d105      	bne.n	8009a30 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8009a2a:	2319      	movs	r3, #25
 8009a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a2e:	e001      	b.n	8009a34 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8009a30:	2312      	movs	r3, #18
 8009a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a34:	6a3b      	ldr	r3, [r7, #32]
 8009a36:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f383 8810 	msr	PRIMASK, r3
}
 8009a3e:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8009a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3730      	adds	r7, #48	@ 0x30
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	2000000c 	.word	0x2000000c
 8009a50:	20000de0 	.word	0x20000de0
 8009a54:	20000e74 	.word	0x20000e74

08009a58 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009a5e:	4b21      	ldr	r3, [pc, #132]	@ (8009ae4 <_tx_thread_shell_entry+0x8c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a68:	69fa      	ldr	r2, [r7, #28]
 8009a6a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8009a70:	4b1d      	ldr	r3, [pc, #116]	@ (8009ae8 <_tx_thread_shell_entry+0x90>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8009a78:	4b1b      	ldr	r3, [pc, #108]	@ (8009ae8 <_tx_thread_shell_entry+0x90>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	69f8      	ldr	r0, [r7, #28]
 8009a7e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a80:	f3ef 8310 	mrs	r3, PRIMASK
 8009a84:	607b      	str	r3, [r7, #4]
    return(posture);
 8009a86:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8009a88:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a8a:	b672      	cpsid	i
    return(int_posture);
 8009a8c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8009a8e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	2201      	movs	r2, #1
 8009a94:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009aa2:	4b12      	ldr	r3, [pc, #72]	@ (8009aec <_tx_thread_shell_entry+0x94>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	4a10      	ldr	r2, [pc, #64]	@ (8009aec <_tx_thread_shell_entry+0x94>)
 8009aaa:	6013      	str	r3, [r2, #0]
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	f383 8810 	msr	PRIMASK, r3
}
 8009ab6:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8009ab8:	f3ef 8314 	mrs	r3, CONTROL
 8009abc:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8009abe:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8009ac0:	617b      	str	r3, [r7, #20]
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f023 0304 	bic.w	r3, r3, #4
 8009ac8:	617b      	str	r3, [r7, #20]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	f383 8814 	msr	CONTROL, r3
}
 8009ad4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8009ad6:	69f8      	ldr	r0, [r7, #28]
 8009ad8:	f000 fa34 	bl	8009f44 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8009adc:	bf00      	nop
 8009ade:	3720      	adds	r7, #32
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	20000ddc 	.word	0x20000ddc
 8009ae8:	20000e78 	.word	0x20000e78
 8009aec:	20000e74 	.word	0x20000e74

08009af0 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b08e      	sub	sp, #56	@ 0x38
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009af8:	f3ef 8310 	mrs	r3, PRIMASK
 8009afc:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8009afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8009b00:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b02:	b672      	cpsid	i
    return(int_posture);
 8009b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8009b06:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009b08:	4b35      	ldr	r3, [pc, #212]	@ (8009be0 <_tx_thread_sleep+0xf0>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8009b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d108      	bne.n	8009b26 <_tx_thread_sleep+0x36>
 8009b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b16:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b18:	6a3b      	ldr	r3, [r7, #32]
 8009b1a:	f383 8810 	msr	PRIMASK, r3
}
 8009b1e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8009b20:	2313      	movs	r3, #19
 8009b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b24:	e056      	b.n	8009bd4 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009b26:	f3ef 8305 	mrs	r3, IPSR
 8009b2a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8009b2c:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8009be4 <_tx_thread_sleep+0xf4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d008      	beq.n	8009b4a <_tx_thread_sleep+0x5a>
 8009b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	f383 8810 	msr	PRIMASK, r3
}
 8009b42:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8009b44:	2313      	movs	r3, #19
 8009b46:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b48:	e044      	b.n	8009bd4 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8009b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b4c:	4a26      	ldr	r2, [pc, #152]	@ (8009be8 <_tx_thread_sleep+0xf8>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d108      	bne.n	8009b64 <_tx_thread_sleep+0x74>
 8009b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b54:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f383 8810 	msr	PRIMASK, r3
}
 8009b5c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8009b5e:	2313      	movs	r3, #19
 8009b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b62:	e037      	b.n	8009bd4 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d108      	bne.n	8009b7c <_tx_thread_sleep+0x8c>
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	f383 8810 	msr	PRIMASK, r3
}
 8009b74:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8009b76:	2300      	movs	r3, #0
 8009b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b7a:	e02b      	b.n	8009bd4 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8009bec <_tx_thread_sleep+0xfc>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d008      	beq.n	8009b96 <_tx_thread_sleep+0xa6>
 8009b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b86:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f383 8810 	msr	PRIMASK, r3
}
 8009b8e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8009b90:	2313      	movs	r3, #19
 8009b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b94:	e01e      	b.n	8009bd4 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8009b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b98:	2204      	movs	r2, #4
 8009b9a:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8009baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8009bec <_tx_thread_sleep+0xfc>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8009bec <_tx_thread_sleep+0xfc>)
 8009bb8:	6013      	str	r3, [r2, #0]
 8009bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bbc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	f383 8810 	msr	PRIMASK, r3
}
 8009bc4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8009bc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009bc8:	f000 f9bc 	bl	8009f44 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bd2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8009bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3738      	adds	r7, #56	@ 0x38
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	20000ddc 	.word	0x20000ddc
 8009be4:	2000000c 	.word	0x2000000c
 8009be8:	20000f24 	.word	0x20000f24
 8009bec:	20000e74 	.word	0x20000e74

08009bf0 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08a      	sub	sp, #40	@ 0x28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8009bfc:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009bfe:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009c00:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c02:	b672      	cpsid	i
    return(int_posture);
 8009c04:	697b      	ldr	r3, [r7, #20]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8009c06:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009c08:	4b2e      	ldr	r3, [pc, #184]	@ (8009cc4 <_tx_thread_suspend+0xd4>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d130      	bne.n	8009c78 <_tx_thread_suspend+0x88>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 8009c16:	2300      	movs	r3, #0
 8009c18:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009c1a:	f3ef 8305 	mrs	r3, IPSR
 8009c1e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8009c20:	693a      	ldr	r2, [r7, #16]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8009c22:	4b29      	ldr	r3, [pc, #164]	@ (8009cc8 <_tx_thread_suspend+0xd8>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d109      	bne.n	8009c40 <_tx_thread_suspend+0x50>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 8009c2c:	69fa      	ldr	r2, [r7, #28]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d105      	bne.n	8009c40 <_tx_thread_suspend+0x50>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8009c34:	4b25      	ldr	r3, [pc, #148]	@ (8009ccc <_tx_thread_suspend+0xdc>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d001      	beq.n	8009c40 <_tx_thread_suspend+0x50>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 8009c3c:	2314      	movs	r3, #20
 8009c3e:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 8009c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d132      	bne.n	8009cac <_tx_thread_suspend+0xbc>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2203      	movs	r2, #3
 8009c4a:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009c58:	4b1c      	ldr	r3, [pc, #112]	@ (8009ccc <_tx_thread_suspend+0xdc>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8009ccc <_tx_thread_suspend+0xdc>)
 8009c60:	6013      	str	r3, [r2, #0]
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f383 8810 	msr	PRIMASK, r3
}
 8009c6c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f968 	bl	8009f44 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8009c74:	2300      	movs	r3, #0
 8009c76:	e020      	b.n	8009cba <_tx_thread_suspend+0xca>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d102      	bne.n	8009c86 <_tx_thread_suspend+0x96>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8009c80:	2314      	movs	r3, #20
 8009c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c84:	e012      	b.n	8009cac <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d102      	bne.n	8009c94 <_tx_thread_suspend+0xa4>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 8009c8e:	2314      	movs	r3, #20
 8009c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c92:	e00b      	b.n	8009cac <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d102      	bne.n	8009ca2 <_tx_thread_suspend+0xb2>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ca0:	e004      	b.n	8009cac <_tx_thread_suspend+0xbc>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	f383 8810 	msr	PRIMASK, r3
}
 8009cb6:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3728      	adds	r7, #40	@ 0x28
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20000ddc 	.word	0x20000ddc
 8009cc8:	2000000c 	.word	0x2000000c
 8009ccc:	20000e74 	.word	0x20000e74

08009cd0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b089      	sub	sp, #36	@ 0x24
 8009cd4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009cd6:	4b17      	ldr	r3, [pc, #92]	@ (8009d34 <_tx_thread_system_preempt_check+0x64>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d121      	bne.n	8009d26 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8009ce2:	4b15      	ldr	r3, [pc, #84]	@ (8009d38 <_tx_thread_system_preempt_check+0x68>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8009ce8:	4b14      	ldr	r3, [pc, #80]	@ (8009d3c <_tx_thread_system_preempt_check+0x6c>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d017      	beq.n	8009d26 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009cf6:	4b12      	ldr	r3, [pc, #72]	@ (8009d40 <_tx_thread_system_preempt_check+0x70>)
 8009cf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cfc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009cfe:	f3ef 8305 	mrs	r3, IPSR
 8009d02:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8009d04:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10c      	bne.n	8009d24 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8009d0e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009d10:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8009d12:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009d14:	b662      	cpsie	i
}
 8009d16:	bf00      	nop
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f383 8810 	msr	PRIMASK, r3
}
 8009d22:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8009d24:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8009d26:	bf00      	nop
 8009d28:	3724      	adds	r7, #36	@ 0x24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	20000e74 	.word	0x20000e74
 8009d38:	20000ddc 	.word	0x20000ddc
 8009d3c:	20000de0 	.word	0x20000de0
 8009d40:	e000ed04 	.word	0xe000ed04

08009d44 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b096      	sub	sp, #88	@ 0x58
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009d50:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8009d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8009d54:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8009d56:	b672      	cpsid	i
    return(int_posture);
 8009d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8009d5a:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d005      	beq.n	8009d70 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	334c      	adds	r3, #76	@ 0x4c
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f000 fb91 	bl	800a490 <_tx_timer_system_deactivate>
 8009d6e:	e002      	b.n	8009d76 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8009d76:	4b6c      	ldr	r3, [pc, #432]	@ (8009f28 <_tx_thread_system_resume+0x1e4>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	4a6a      	ldr	r2, [pc, #424]	@ (8009f28 <_tx_thread_system_resume+0x1e4>)
 8009d7e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f040 8083 	bne.w	8009e90 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f000 8097 	beq.w	8009ec2 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d172      	bne.n	8009e82 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009da6:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8009da8:	4a60      	ldr	r2, [pc, #384]	@ (8009f2c <_tx_thread_system_resume+0x1e8>)
 8009daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 8009db2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d154      	bne.n	8009e62 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8009db8:	495c      	ldr	r1, [pc, #368]	@ (8009f2c <_tx_thread_system_resume+0x1e8>)
 8009dba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8009dce:	2201      	movs	r2, #1
 8009dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd6:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8009dd8:	4b55      	ldr	r3, [pc, #340]	@ (8009f30 <_tx_thread_system_resume+0x1ec>)
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dde:	4313      	orrs	r3, r2
 8009de0:	4a53      	ldr	r2, [pc, #332]	@ (8009f30 <_tx_thread_system_resume+0x1ec>)
 8009de2:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8009de4:	4b53      	ldr	r3, [pc, #332]	@ (8009f34 <_tx_thread_system_resume+0x1f0>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d269      	bcs.n	8009ec2 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8009dee:	4a51      	ldr	r2, [pc, #324]	@ (8009f34 <_tx_thread_system_resume+0x1f0>)
 8009df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009df2:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8009df4:	4b50      	ldr	r3, [pc, #320]	@ (8009f38 <_tx_thread_system_resume+0x1f4>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8009dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d103      	bne.n	8009e08 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8009e00:	4a4d      	ldr	r2, [pc, #308]	@ (8009f38 <_tx_thread_system_resume+0x1f4>)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	e05c      	b.n	8009ec2 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8009e08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d257      	bcs.n	8009ec2 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8009e12:	4a49      	ldr	r2, [pc, #292]	@ (8009f38 <_tx_thread_system_resume+0x1f4>)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1e:	f383 8810 	msr	PRIMASK, r3
}
 8009e22:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009e24:	4b40      	ldr	r3, [pc, #256]	@ (8009f28 <_tx_thread_system_resume+0x1e4>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 8009e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d174      	bne.n	8009f1a <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009e30:	4b42      	ldr	r3, [pc, #264]	@ (8009f3c <_tx_thread_system_resume+0x1f8>)
 8009e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e36:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009e38:	f3ef 8305 	mrs	r3, IPSR
 8009e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8009e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10c      	bne.n	8009e5e <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e44:	f3ef 8310 	mrs	r3, PRIMASK
 8009e48:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 8009e4c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009e4e:	b662      	cpsie	i
}
 8009e50:	bf00      	nop
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	f383 8810 	msr	PRIMASK, r3
}
 8009e5c:	bf00      	nop
}
 8009e5e:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8009e60:	e05b      	b.n	8009f1a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8009e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e66:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8009e68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8009e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e78:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e7e:	621a      	str	r2, [r3, #32]
 8009e80:	e01f      	b.n	8009ec2 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2203      	movs	r2, #3
 8009e8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8009e8e:	e018      	b.n	8009ec2 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d014      	beq.n	8009ec2 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d010      	beq.n	8009ec2 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d106      	bne.n	8009eb6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8009eb4:	e005      	b.n	8009ec2 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2203      	movs	r2, #3
 8009ec0:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8009f40 <_tx_thread_system_resume+0x1fc>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009eca:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	f383 8810 	msr	PRIMASK, r3
}
 8009ed2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8009ed4:	4b18      	ldr	r3, [pc, #96]	@ (8009f38 <_tx_thread_system_resume+0x1f4>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d020      	beq.n	8009f20 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009ede:	4b12      	ldr	r3, [pc, #72]	@ (8009f28 <_tx_thread_system_resume+0x1e4>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 8009ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d11a      	bne.n	8009f20 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009eea:	4b14      	ldr	r3, [pc, #80]	@ (8009f3c <_tx_thread_system_resume+0x1f8>)
 8009eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ef0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009ef2:	f3ef 8305 	mrs	r3, IPSR
 8009ef6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009ef8:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10f      	bne.n	8009f1e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009efe:	f3ef 8310 	mrs	r3, PRIMASK
 8009f02:	613b      	str	r3, [r7, #16]
    return(posture);
 8009f04:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8009f06:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009f08:	b662      	cpsie	i
}
 8009f0a:	bf00      	nop
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	f383 8810 	msr	PRIMASK, r3
}
 8009f16:	bf00      	nop
}
 8009f18:	e001      	b.n	8009f1e <_tx_thread_system_resume+0x1da>
                                return;
 8009f1a:	bf00      	nop
 8009f1c:	e000      	b.n	8009f20 <_tx_thread_system_resume+0x1dc>
 8009f1e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8009f20:	3758      	adds	r7, #88	@ 0x58
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	20000e74 	.word	0x20000e74
 8009f2c:	20000df4 	.word	0x20000df4
 8009f30:	20000dec 	.word	0x20000dec
 8009f34:	20000df0 	.word	0x20000df0
 8009f38:	20000de0 	.word	0x20000de0
 8009f3c:	e000ed04 	.word	0xe000ed04
 8009f40:	20000ddc 	.word	0x20000ddc

08009f44 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b09e      	sub	sp, #120	@ 0x78
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009f4c:	4b81      	ldr	r3, [pc, #516]	@ (800a154 <_tx_thread_system_suspend+0x210>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f52:	f3ef 8310 	mrs	r3, PRIMASK
 8009f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 8009f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 8009f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f5c:	b672      	cpsid	i
    return(int_posture);
 8009f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8009f60:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d112      	bne.n	8009f90 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8009f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d008      	beq.n	8009f88 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8009f76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7c:	d004      	beq.n	8009f88 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	334c      	adds	r3, #76	@ 0x4c
 8009f82:	4618      	mov	r0, r3
 8009f84:	f000 fa22 	bl	800a3cc <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	4a72      	ldr	r2, [pc, #456]	@ (800a158 <_tx_thread_system_suspend+0x214>)
 8009f8e:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8009f90:	4b72      	ldr	r3, [pc, #456]	@ (800a15c <_tx_thread_system_suspend+0x218>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3b01      	subs	r3, #1
 8009f96:	4a71      	ldr	r2, [pc, #452]	@ (800a15c <_tx_thread_system_suspend+0x218>)
 8009f98:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	f040 80a6 	bne.w	800a0f0 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fae:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a1b      	ldr	r3, [r3, #32]
 8009fb4:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8009fb6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d015      	beq.n	8009fea <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc2:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8009fc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009fc8:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8009fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fcc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009fce:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8009fd0:	4a63      	ldr	r2, [pc, #396]	@ (800a160 <_tx_thread_system_suspend+0x21c>)
 8009fd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d157      	bne.n	800a08e <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8009fde:	4960      	ldr	r1, [pc, #384]	@ (800a160 <_tx_thread_system_suspend+0x21c>)
 8009fe0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fe2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009fe8:	e051      	b.n	800a08e <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8009fea:	4a5d      	ldr	r2, [pc, #372]	@ (800a160 <_tx_thread_system_suspend+0x21c>)
 8009fec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fee:	2100      	movs	r1, #0
 8009ff0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffc:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8009ffe:	4b59      	ldr	r3, [pc, #356]	@ (800a164 <_tx_thread_system_suspend+0x220>)
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a004:	43db      	mvns	r3, r3
 800a006:	4013      	ands	r3, r2
 800a008:	4a56      	ldr	r2, [pc, #344]	@ (800a164 <_tx_thread_system_suspend+0x220>)
 800a00a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800a00c:	2300      	movs	r3, #0
 800a00e:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800a010:	4b54      	ldr	r3, [pc, #336]	@ (800a164 <_tx_thread_system_suspend+0x220>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800a016:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d12b      	bne.n	800a074 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a01c:	4b52      	ldr	r3, [pc, #328]	@ (800a168 <_tx_thread_system_suspend+0x224>)
 800a01e:	2220      	movs	r2, #32
 800a020:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800a022:	4b52      	ldr	r3, [pc, #328]	@ (800a16c <_tx_thread_system_suspend+0x228>)
 800a024:	2200      	movs	r2, #0
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a02a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a02c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a02e:	f383 8810 	msr	PRIMASK, r3
}
 800a032:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a034:	4b49      	ldr	r3, [pc, #292]	@ (800a15c <_tx_thread_system_suspend+0x218>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800a03a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f040 8081 	bne.w	800a144 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a042:	4b4b      	ldr	r3, [pc, #300]	@ (800a170 <_tx_thread_system_suspend+0x22c>)
 800a044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a048:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a04a:	f3ef 8305 	mrs	r3, IPSR
 800a04e:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800a050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10c      	bne.n	800a070 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a056:	f3ef 8310 	mrs	r3, PRIMASK
 800a05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800a05c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800a05e:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800a060:	b662      	cpsie	i
}
 800a062:	bf00      	nop
 800a064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a066:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a06a:	f383 8810 	msr	PRIMASK, r3
}
 800a06e:	bf00      	nop
}
 800a070:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800a072:	e067      	b.n	800a144 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800a074:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a076:	fa93 f3a3 	rbit	r3, r3
 800a07a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a07c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a07e:	fab3 f383 	clz	r3, r3
 800a082:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800a084:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a086:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a088:	4413      	add	r3, r2
 800a08a:	4a37      	ldr	r2, [pc, #220]	@ (800a168 <_tx_thread_system_suspend+0x224>)
 800a08c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800a08e:	4b37      	ldr	r3, [pc, #220]	@ (800a16c <_tx_thread_system_suspend+0x228>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	429a      	cmp	r2, r3
 800a096:	d12b      	bne.n	800a0f0 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a098:	4b33      	ldr	r3, [pc, #204]	@ (800a168 <_tx_thread_system_suspend+0x224>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a30      	ldr	r2, [pc, #192]	@ (800a160 <_tx_thread_system_suspend+0x21c>)
 800a09e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0a2:	4a32      	ldr	r2, [pc, #200]	@ (800a16c <_tx_thread_system_suspend+0x228>)
 800a0a4:	6013      	str	r3, [r2, #0]
 800a0a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0a8:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ac:	f383 8810 	msr	PRIMASK, r3
}
 800a0b0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a0b2:	4b2a      	ldr	r3, [pc, #168]	@ (800a15c <_tx_thread_system_suspend+0x218>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800a0b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d144      	bne.n	800a148 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a0be:	4b2c      	ldr	r3, [pc, #176]	@ (800a170 <_tx_thread_system_suspend+0x22c>)
 800a0c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0c4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a0c6:	f3ef 8305 	mrs	r3, IPSR
 800a0ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800a0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10c      	bne.n	800a0ec <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800a0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800a0da:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800a0dc:	b662      	cpsie	i
}
 800a0de:	bf00      	nop
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	f383 8810 	msr	PRIMASK, r3
}
 800a0ea:	bf00      	nop
}
 800a0ec:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800a0ee:	e02b      	b.n	800a148 <_tx_thread_system_suspend+0x204>
 800a0f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0f2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	f383 8810 	msr	PRIMASK, r3
}
 800a0fa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800a0fc:	4b1b      	ldr	r3, [pc, #108]	@ (800a16c <_tx_thread_system_suspend+0x228>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a102:	429a      	cmp	r2, r3
 800a104:	d022      	beq.n	800a14c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a106:	4b15      	ldr	r3, [pc, #84]	@ (800a15c <_tx_thread_system_suspend+0x218>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800a10c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d11c      	bne.n	800a14c <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a112:	4b17      	ldr	r3, [pc, #92]	@ (800a170 <_tx_thread_system_suspend+0x22c>)
 800a114:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a118:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a11a:	f3ef 8305 	mrs	r3, IPSR
 800a11e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a120:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10c      	bne.n	800a140 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a126:	f3ef 8310 	mrs	r3, PRIMASK
 800a12a:	617b      	str	r3, [r7, #20]
    return(posture);
 800a12c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800a12e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800a130:	b662      	cpsie	i
}
 800a132:	bf00      	nop
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f383 8810 	msr	PRIMASK, r3
}
 800a13e:	bf00      	nop
}
 800a140:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800a142:	e003      	b.n	800a14c <_tx_thread_system_suspend+0x208>
                return;
 800a144:	bf00      	nop
 800a146:	e002      	b.n	800a14e <_tx_thread_system_suspend+0x20a>
            return;
 800a148:	bf00      	nop
 800a14a:	e000      	b.n	800a14e <_tx_thread_system_suspend+0x20a>
    return;
 800a14c:	bf00      	nop
}
 800a14e:	3778      	adds	r7, #120	@ 0x78
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	20000ddc 	.word	0x20000ddc
 800a158:	200013e0 	.word	0x200013e0
 800a15c:	20000e74 	.word	0x20000e74
 800a160:	20000df4 	.word	0x20000df4
 800a164:	20000dec 	.word	0x20000dec
 800a168:	20000df0 	.word	0x20000df0
 800a16c:	20000de0 	.word	0x20000de0
 800a170:	e000ed04 	.word	0xe000ed04

0800a174 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800a174:	b480      	push	{r7}
 800a176:	b087      	sub	sp, #28
 800a178:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a17a:	4b21      	ldr	r3, [pc, #132]	@ (800a200 <_tx_thread_time_slice+0x8c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a180:	f3ef 8310 	mrs	r3, PRIMASK
 800a184:	60fb      	str	r3, [r7, #12]
    return(posture);
 800a186:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800a188:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a18a:	b672      	cpsid	i
    return(int_posture);
 800a18c:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800a18e:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800a190:	4b1c      	ldr	r3, [pc, #112]	@ (800a204 <_tx_thread_time_slice+0x90>)
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d024      	beq.n	800a1e6 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d120      	bne.n	800a1e6 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	69da      	ldr	r2, [r3, #28]
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	699b      	ldr	r3, [r3, #24]
 800a1b0:	4a15      	ldr	r2, [pc, #84]	@ (800a208 <_tx_thread_time_slice+0x94>)
 800a1b2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	697a      	ldr	r2, [r7, #20]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d013      	beq.n	800a1e6 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d10d      	bne.n	800a1e6 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ce:	697a      	ldr	r2, [r7, #20]
 800a1d0:	6a12      	ldr	r2, [r2, #32]
 800a1d2:	490e      	ldr	r1, [pc, #56]	@ (800a20c <_tx_thread_time_slice+0x98>)
 800a1d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a1d8:	4b0d      	ldr	r3, [pc, #52]	@ (800a210 <_tx_thread_time_slice+0x9c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a0b      	ldr	r2, [pc, #44]	@ (800a20c <_tx_thread_time_slice+0x98>)
 800a1de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1e2:	4a0c      	ldr	r2, [pc, #48]	@ (800a214 <_tx_thread_time_slice+0xa0>)
 800a1e4:	6013      	str	r3, [r2, #0]
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f383 8810 	msr	PRIMASK, r3
}
 800a1f0:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800a1f2:	bf00      	nop
 800a1f4:	371c      	adds	r7, #28
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	20000ddc 	.word	0x20000ddc
 800a204:	20000e84 	.word	0x20000e84
 800a208:	200013e0 	.word	0x200013e0
 800a20c:	20000df4 	.word	0x20000df4
 800a210:	20000df0 	.word	0x20000df0
 800a214:	20000de0 	.word	0x20000de0

0800a218 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08a      	sub	sp, #40	@ 0x28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a224:	f3ef 8310 	mrs	r3, PRIMASK
 800a228:	617b      	str	r3, [r7, #20]
    return(posture);
 800a22a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a22c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a22e:	b672      	cpsid	i
    return(int_posture);
 800a230:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800a232:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800a234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a238:	2b04      	cmp	r3, #4
 800a23a:	d10e      	bne.n	800a25a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800a23c:	4b13      	ldr	r3, [pc, #76]	@ (800a28c <_tx_thread_timeout+0x74>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	3301      	adds	r3, #1
 800a242:	4a12      	ldr	r2, [pc, #72]	@ (800a28c <_tx_thread_timeout+0x74>)
 800a244:	6013      	str	r3, [r2, #0]
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f383 8810 	msr	PRIMASK, r3
}
 800a250:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800a252:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a254:	f7ff fd76 	bl	8009d44 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800a258:	e013      	b.n	800a282 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800a25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a25e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800a260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a262:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a266:	61bb      	str	r3, [r7, #24]
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	f383 8810 	msr	PRIMASK, r3
}
 800a272:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d003      	beq.n	800a282 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	69b9      	ldr	r1, [r7, #24]
 800a27e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a280:	4798      	blx	r3
}
 800a282:	bf00      	nop
 800a284:	3728      	adds	r7, #40	@ 0x28
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	20000e74 	.word	0x20000e74

0800a290 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a296:	f3ef 8310 	mrs	r3, PRIMASK
 800a29a:	607b      	str	r3, [r7, #4]
    return(posture);
 800a29c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800a29e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a2a0:	b672      	cpsid	i
    return(int_posture);
 800a2a2:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800a2a4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800a2a6:	4b09      	ldr	r3, [pc, #36]	@ (800a2cc <_tx_timer_expiration_process+0x3c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	4a07      	ldr	r2, [pc, #28]	@ (800a2cc <_tx_timer_expiration_process+0x3c>)
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	f383 8810 	msr	PRIMASK, r3
}
 800a2ba:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800a2bc:	4804      	ldr	r0, [pc, #16]	@ (800a2d0 <_tx_timer_expiration_process+0x40>)
 800a2be:	f7ff fd41 	bl	8009d44 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800a2c2:	bf00      	nop
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20000e74 	.word	0x20000e74
 800a2d0:	20000f24 	.word	0x20000f24

0800a2d4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800a2d4:	b590      	push	{r4, r7, lr}
 800a2d6:	b089      	sub	sp, #36	@ 0x24
 800a2d8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800a2da:	4b28      	ldr	r3, [pc, #160]	@ (800a37c <_tx_timer_initialize+0xa8>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800a2e0:	4b27      	ldr	r3, [pc, #156]	@ (800a380 <_tx_timer_initialize+0xac>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800a2e6:	4b27      	ldr	r3, [pc, #156]	@ (800a384 <_tx_timer_initialize+0xb0>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800a2ec:	4b26      	ldr	r3, [pc, #152]	@ (800a388 <_tx_timer_initialize+0xb4>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800a2f2:	4b26      	ldr	r3, [pc, #152]	@ (800a38c <_tx_timer_initialize+0xb8>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800a2f8:	2280      	movs	r2, #128	@ 0x80
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	4824      	ldr	r0, [pc, #144]	@ (800a390 <_tx_timer_initialize+0xbc>)
 800a2fe:	f001 f927 	bl	800b550 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800a302:	4b24      	ldr	r3, [pc, #144]	@ (800a394 <_tx_timer_initialize+0xc0>)
 800a304:	4a22      	ldr	r2, [pc, #136]	@ (800a390 <_tx_timer_initialize+0xbc>)
 800a306:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800a308:	4b23      	ldr	r3, [pc, #140]	@ (800a398 <_tx_timer_initialize+0xc4>)
 800a30a:	4a21      	ldr	r2, [pc, #132]	@ (800a390 <_tx_timer_initialize+0xbc>)
 800a30c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800a30e:	4b23      	ldr	r3, [pc, #140]	@ (800a39c <_tx_timer_initialize+0xc8>)
 800a310:	4a23      	ldr	r2, [pc, #140]	@ (800a3a0 <_tx_timer_initialize+0xcc>)
 800a312:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800a314:	4b21      	ldr	r3, [pc, #132]	@ (800a39c <_tx_timer_initialize+0xc8>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3304      	adds	r3, #4
 800a31a:	4a20      	ldr	r2, [pc, #128]	@ (800a39c <_tx_timer_initialize+0xc8>)
 800a31c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800a31e:	4b21      	ldr	r3, [pc, #132]	@ (800a3a4 <_tx_timer_initialize+0xd0>)
 800a320:	4a21      	ldr	r2, [pc, #132]	@ (800a3a8 <_tx_timer_initialize+0xd4>)
 800a322:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800a324:	4b21      	ldr	r3, [pc, #132]	@ (800a3ac <_tx_timer_initialize+0xd8>)
 800a326:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a32a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800a32c:	4b20      	ldr	r3, [pc, #128]	@ (800a3b0 <_tx_timer_initialize+0xdc>)
 800a32e:	2200      	movs	r2, #0
 800a330:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800a332:	4b1c      	ldr	r3, [pc, #112]	@ (800a3a4 <_tx_timer_initialize+0xd0>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a1d      	ldr	r2, [pc, #116]	@ (800a3ac <_tx_timer_initialize+0xd8>)
 800a338:	6812      	ldr	r2, [r2, #0]
 800a33a:	491d      	ldr	r1, [pc, #116]	@ (800a3b0 <_tx_timer_initialize+0xdc>)
 800a33c:	6809      	ldr	r1, [r1, #0]
 800a33e:	481c      	ldr	r0, [pc, #112]	@ (800a3b0 <_tx_timer_initialize+0xdc>)
 800a340:	6800      	ldr	r0, [r0, #0]
 800a342:	2400      	movs	r4, #0
 800a344:	9405      	str	r4, [sp, #20]
 800a346:	2400      	movs	r4, #0
 800a348:	9404      	str	r4, [sp, #16]
 800a34a:	9003      	str	r0, [sp, #12]
 800a34c:	9102      	str	r1, [sp, #8]
 800a34e:	9201      	str	r2, [sp, #4]
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	4b18      	ldr	r3, [pc, #96]	@ (800a3b4 <_tx_timer_initialize+0xe0>)
 800a354:	4a18      	ldr	r2, [pc, #96]	@ (800a3b8 <_tx_timer_initialize+0xe4>)
 800a356:	4919      	ldr	r1, [pc, #100]	@ (800a3bc <_tx_timer_initialize+0xe8>)
 800a358:	4819      	ldr	r0, [pc, #100]	@ (800a3c0 <_tx_timer_initialize+0xec>)
 800a35a:	f7ff f993 	bl	8009684 <_tx_thread_create>
 800a35e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1e5      	bne.n	800a332 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800a366:	4b17      	ldr	r3, [pc, #92]	@ (800a3c4 <_tx_timer_initialize+0xf0>)
 800a368:	2200      	movs	r2, #0
 800a36a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800a36c:	4b16      	ldr	r3, [pc, #88]	@ (800a3c8 <_tx_timer_initialize+0xf4>)
 800a36e:	2200      	movs	r2, #0
 800a370:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800a372:	bf00      	nop
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	bd90      	pop	{r4, r7, pc}
 800a37a:	bf00      	nop
 800a37c:	20000e80 	.word	0x20000e80
 800a380:	200013e0 	.word	0x200013e0
 800a384:	20000e84 	.word	0x20000e84
 800a388:	20000f14 	.word	0x20000f14
 800a38c:	20000f20 	.word	0x20000f20
 800a390:	20000e88 	.word	0x20000e88
 800a394:	20000f08 	.word	0x20000f08
 800a398:	20000f10 	.word	0x20000f10
 800a39c:	20000f0c 	.word	0x20000f0c
 800a3a0:	20000f04 	.word	0x20000f04
 800a3a4:	20000fd4 	.word	0x20000fd4
 800a3a8:	20000fe0 	.word	0x20000fe0
 800a3ac:	20000fd8 	.word	0x20000fd8
 800a3b0:	20000fdc 	.word	0x20000fdc
 800a3b4:	4154494d 	.word	0x4154494d
 800a3b8:	0800a501 	.word	0x0800a501
 800a3bc:	0800bfd8 	.word	0x0800bfd8
 800a3c0:	20000f24 	.word	0x20000f24
 800a3c4:	20000f18 	.word	0x20000f18
 800a3c8:	20000f1c 	.word	0x20000f1c

0800a3cc <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b089      	sub	sp, #36	@ 0x24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d04a      	beq.n	800a476 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e6:	d046      	beq.n	800a476 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d142      	bne.n	800a476 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	2b20      	cmp	r3, #32
 800a3f4:	d902      	bls.n	800a3fc <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800a3f6:	231f      	movs	r3, #31
 800a3f8:	61bb      	str	r3, [r7, #24]
 800a3fa:	e002      	b.n	800a402 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800a402:	4b20      	ldr	r3, [pc, #128]	@ (800a484 <_tx_timer_system_activate+0xb8>)
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4413      	add	r3, r2
 800a40c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800a40e:	4b1e      	ldr	r3, [pc, #120]	@ (800a488 <_tx_timer_system_activate+0xbc>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	69fa      	ldr	r2, [r7, #28]
 800a414:	429a      	cmp	r2, r3
 800a416:	d30b      	bcc.n	800a430 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800a418:	4b1b      	ldr	r3, [pc, #108]	@ (800a488 <_tx_timer_system_activate+0xbc>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	69fa      	ldr	r2, [r7, #28]
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	109b      	asrs	r3, r3, #2
 800a422:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800a424:	4b19      	ldr	r3, [pc, #100]	@ (800a48c <_tx_timer_system_activate+0xc0>)
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4413      	add	r3, r2
 800a42e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d109      	bne.n	800a44c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	601a      	str	r2, [r3, #0]
 800a44a:	e011      	b.n	800a470 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	69fa      	ldr	r2, [r7, #28]
 800a474:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800a476:	bf00      	nop
 800a478:	3724      	adds	r7, #36	@ 0x24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	20000f10 	.word	0x20000f10
 800a488:	20000f0c 	.word	0x20000f0c
 800a48c:	20000f08 	.word	0x20000f08

0800a490 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800a490:	b480      	push	{r7}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d026      	beq.n	800a4f2 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d108      	bne.n	800a4c4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d117      	bne.n	800a4ec <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	601a      	str	r2, [r3, #0]
 800a4c2:	e013      	b.n	800a4ec <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d105      	bne.n	800a4ec <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	619a      	str	r2, [r3, #24]
    }
}
 800a4f2:	bf00      	nop
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
	...

0800a500 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b098      	sub	sp, #96	@ 0x60
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800a508:	2300      	movs	r3, #0
 800a50a:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a73      	ldr	r2, [pc, #460]	@ (800a6dc <_tx_timer_thread_entry+0x1dc>)
 800a510:	4293      	cmp	r3, r2
 800a512:	f040 80de 	bne.w	800a6d2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a516:	f3ef 8310 	mrs	r3, PRIMASK
 800a51a:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800a51c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800a51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800a520:	b672      	cpsid	i
    return(int_posture);
 800a522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800a524:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800a526:	4b6e      	ldr	r3, [pc, #440]	@ (800a6e0 <_tx_timer_thread_entry+0x1e0>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d003      	beq.n	800a53c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f107 020c 	add.w	r2, r7, #12
 800a53a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800a53c:	4b68      	ldr	r3, [pc, #416]	@ (800a6e0 <_tx_timer_thread_entry+0x1e0>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2200      	movs	r2, #0
 800a542:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800a544:	4b66      	ldr	r3, [pc, #408]	@ (800a6e0 <_tx_timer_thread_entry+0x1e0>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3304      	adds	r3, #4
 800a54a:	4a65      	ldr	r2, [pc, #404]	@ (800a6e0 <_tx_timer_thread_entry+0x1e0>)
 800a54c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800a54e:	4b64      	ldr	r3, [pc, #400]	@ (800a6e0 <_tx_timer_thread_entry+0x1e0>)
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	4b64      	ldr	r3, [pc, #400]	@ (800a6e4 <_tx_timer_thread_entry+0x1e4>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	429a      	cmp	r2, r3
 800a558:	d103      	bne.n	800a562 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800a55a:	4b63      	ldr	r3, [pc, #396]	@ (800a6e8 <_tx_timer_thread_entry+0x1e8>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a60      	ldr	r2, [pc, #384]	@ (800a6e0 <_tx_timer_thread_entry+0x1e0>)
 800a560:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800a562:	4b62      	ldr	r3, [pc, #392]	@ (800a6ec <_tx_timer_thread_entry+0x1ec>)
 800a564:	2200      	movs	r2, #0
 800a566:	601a      	str	r2, [r3, #0]
 800a568:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a56a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56e:	f383 8810 	msr	PRIMASK, r3
}
 800a572:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a574:	f3ef 8310 	mrs	r3, PRIMASK
 800a578:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800a57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800a57c:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800a57e:	b672      	cpsid	i
    return(int_posture);
 800a580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800a582:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800a584:	e07f      	b.n	800a686 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800a590:	2300      	movs	r3, #0
 800a592:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800a594:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a598:	429a      	cmp	r2, r3
 800a59a:	d102      	bne.n	800a5a2 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800a59c:	2300      	movs	r3, #0
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	e00e      	b.n	800a5c0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800a5a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5a4:	695b      	ldr	r3, [r3, #20]
 800a5a6:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800a5a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5ac:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800a5ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5b2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800a5b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5b6:	f107 020c 	add.w	r2, r7, #12
 800a5ba:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800a5bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5be:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800a5c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b20      	cmp	r3, #32
 800a5c6:	d911      	bls.n	800a5ec <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800a5c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800a5d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5d2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800a5d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5da:	f107 0208 	add.w	r2, r7, #8
 800a5de:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800a5e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a5e4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800a5e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5e8:	60bb      	str	r3, [r7, #8]
 800a5ea:	e01a      	b.n	800a622 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800a5ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800a5f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800a5f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5fe:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800a600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d009      	beq.n	800a61c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800a608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a60a:	f107 0208 	add.w	r2, r7, #8
 800a60e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800a610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a612:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a614:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800a616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a618:	60bb      	str	r3, [r7, #8]
 800a61a:	e002      	b.n	800a622 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800a61c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a61e:	2200      	movs	r2, #0
 800a620:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800a622:	4a33      	ldr	r2, [pc, #204]	@ (800a6f0 <_tx_timer_thread_entry+0x1f0>)
 800a624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a62a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a62e:	f383 8810 	msr	PRIMASK, r3
}
 800a632:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800a634:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a636:	2b00      	cmp	r3, #0
 800a638:	d002      	beq.n	800a640 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800a63a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a63c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a63e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a640:	f3ef 8310 	mrs	r3, PRIMASK
 800a644:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800a646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800a648:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a64a:	b672      	cpsid	i
    return(int_posture);
 800a64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800a64e:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800a650:	4b27      	ldr	r3, [pc, #156]	@ (800a6f0 <_tx_timer_thread_entry+0x1f0>)
 800a652:	2200      	movs	r2, #0
 800a654:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d105      	bne.n	800a66a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800a65e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a660:	2200      	movs	r2, #0
 800a662:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800a664:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800a666:	f7ff feb1 	bl	800a3cc <_tx_timer_system_activate>
 800a66a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a66c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	f383 8810 	msr	PRIMASK, r3
}
 800a674:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a676:	f3ef 8310 	mrs	r3, PRIMASK
 800a67a:	623b      	str	r3, [r7, #32]
    return(posture);
 800a67c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a67e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a680:	b672      	cpsid	i
    return(int_posture);
 800a682:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800a684:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f47f af7c 	bne.w	800a586 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800a68e:	4b17      	ldr	r3, [pc, #92]	@ (800a6ec <_tx_timer_thread_entry+0x1ec>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d116      	bne.n	800a6c4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800a696:	4b17      	ldr	r3, [pc, #92]	@ (800a6f4 <_tx_timer_thread_entry+0x1f4>)
 800a698:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800a69a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a69c:	2203      	movs	r2, #3
 800a69e:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a6a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800a6a6:	4b14      	ldr	r3, [pc, #80]	@ (800a6f8 <_tx_timer_thread_entry+0x1f8>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	4a12      	ldr	r2, [pc, #72]	@ (800a6f8 <_tx_timer_thread_entry+0x1f8>)
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6b2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	f383 8810 	msr	PRIMASK, r3
}
 800a6ba:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a6bc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a6be:	f7ff fc41 	bl	8009f44 <_tx_thread_system_suspend>
 800a6c2:	e728      	b.n	800a516 <_tx_timer_thread_entry+0x16>
 800a6c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	f383 8810 	msr	PRIMASK, r3
}
 800a6ce:	bf00      	nop
            TX_DISABLE
 800a6d0:	e721      	b.n	800a516 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800a6d2:	bf00      	nop
 800a6d4:	3760      	adds	r7, #96	@ 0x60
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	4154494d 	.word	0x4154494d
 800a6e0:	20000f10 	.word	0x20000f10
 800a6e4:	20000f0c 	.word	0x20000f0c
 800a6e8:	20000f08 	.word	0x20000f08
 800a6ec:	20000f14 	.word	0x20000f14
 800a6f0:	20000f20 	.word	0x20000f20
 800a6f4:	20000f24 	.word	0x20000f24
 800a6f8:	20000e74 	.word	0x20000e74

0800a6fc <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b08a      	sub	sp, #40	@ 0x28
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
 800a708:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a70a:	2300      	movs	r3, #0
 800a70c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d102      	bne.n	800a71a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a714:	2302      	movs	r3, #2
 800a716:	627b      	str	r3, [r7, #36]	@ 0x24
 800a718:	e029      	b.n	800a76e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a2d      	ldr	r2, [pc, #180]	@ (800a7d4 <_txe_byte_allocate+0xd8>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d002      	beq.n	800a72a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a724:	2302      	movs	r3, #2
 800a726:	627b      	str	r3, [r7, #36]	@ 0x24
 800a728:	e021      	b.n	800a76e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d102      	bne.n	800a736 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800a730:	2303      	movs	r3, #3
 800a732:	627b      	str	r3, [r7, #36]	@ 0x24
 800a734:	e01b      	b.n	800a76e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d102      	bne.n	800a742 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800a73c:	2305      	movs	r3, #5
 800a73e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a740:	e015      	b.n	800a76e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d902      	bls.n	800a752 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800a74c:	2305      	movs	r3, #5
 800a74e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a750:	e00d      	b.n	800a76e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00a      	beq.n	800a76e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a758:	f3ef 8305 	mrs	r3, IPSR
 800a75c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800a75e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a760:	4b1d      	ldr	r3, [pc, #116]	@ (800a7d8 <_txe_byte_allocate+0xdc>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4313      	orrs	r3, r2
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a76a:	2304      	movs	r3, #4
 800a76c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800a76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a770:	2b00      	cmp	r3, #0
 800a772:	d108      	bne.n	800a786 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800a774:	4b19      	ldr	r3, [pc, #100]	@ (800a7dc <_txe_byte_allocate+0xe0>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	4a18      	ldr	r2, [pc, #96]	@ (800a7e0 <_txe_byte_allocate+0xe4>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d101      	bne.n	800a786 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800a782:	2313      	movs	r3, #19
 800a784:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800a786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d114      	bne.n	800a7b6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a78c:	f3ef 8305 	mrs	r3, IPSR
 800a790:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a792:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a794:	4b10      	ldr	r3, [pc, #64]	@ (800a7d8 <_txe_byte_allocate+0xdc>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4313      	orrs	r3, r2
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00b      	beq.n	800a7b6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a79e:	f3ef 8305 	mrs	r3, IPSR
 800a7a2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a7a4:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a7a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a7d8 <_txe_byte_allocate+0xdc>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800a7b0:	d201      	bcs.n	800a7b6 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a7b2:	2313      	movs	r3, #19
 800a7b4:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d106      	bne.n	800a7ca <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	68b9      	ldr	r1, [r7, #8]
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f7fe fa12 	bl	8008bec <_tx_byte_allocate>
 800a7c8:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3728      	adds	r7, #40	@ 0x28
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	42595445 	.word	0x42595445
 800a7d8:	2000000c 	.word	0x2000000c
 800a7dc:	20000ddc 	.word	0x20000ddc
 800a7e0:	20000f24 	.word	0x20000f24

0800a7e4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b092      	sub	sp, #72	@ 0x48
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
 800a7f0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d102      	bne.n	800a802 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800a800:	e075      	b.n	800a8ee <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800a802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a804:	2b34      	cmp	r3, #52	@ 0x34
 800a806:	d002      	beq.n	800a80e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a808:	2302      	movs	r3, #2
 800a80a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a80c:	e06f      	b.n	800a8ee <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a80e:	f3ef 8310 	mrs	r3, PRIMASK
 800a812:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800a814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800a816:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a818:	b672      	cpsid	i
    return(int_posture);
 800a81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a81c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a81e:	4b3b      	ldr	r3, [pc, #236]	@ (800a90c <_txe_byte_pool_create+0x128>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	3301      	adds	r3, #1
 800a824:	4a39      	ldr	r2, [pc, #228]	@ (800a90c <_txe_byte_pool_create+0x128>)
 800a826:	6013      	str	r3, [r2, #0]
 800a828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82e:	f383 8810 	msr	PRIMASK, r3
}
 800a832:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800a834:	4b36      	ldr	r3, [pc, #216]	@ (800a910 <_txe_byte_pool_create+0x12c>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a83a:	2300      	movs	r3, #0
 800a83c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a83e:	e009      	b.n	800a854 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a844:	429a      	cmp	r2, r3
 800a846:	d00b      	beq.n	800a860 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800a848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a84e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a850:	3301      	adds	r3, #1
 800a852:	643b      	str	r3, [r7, #64]	@ 0x40
 800a854:	4b2f      	ldr	r3, [pc, #188]	@ (800a914 <_txe_byte_pool_create+0x130>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d3f0      	bcc.n	800a840 <_txe_byte_pool_create+0x5c>
 800a85e:	e000      	b.n	800a862 <_txe_byte_pool_create+0x7e>
                break;
 800a860:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a862:	f3ef 8310 	mrs	r3, PRIMASK
 800a866:	623b      	str	r3, [r7, #32]
    return(posture);
 800a868:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a86a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a86c:	b672      	cpsid	i
    return(int_posture);
 800a86e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a870:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a872:	4b26      	ldr	r3, [pc, #152]	@ (800a90c <_txe_byte_pool_create+0x128>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3b01      	subs	r3, #1
 800a878:	4a24      	ldr	r2, [pc, #144]	@ (800a90c <_txe_byte_pool_create+0x128>)
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a882:	f383 8810 	msr	PRIMASK, r3
}
 800a886:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a888:	f7ff fa22 	bl	8009cd0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a890:	429a      	cmp	r2, r3
 800a892:	d102      	bne.n	800a89a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800a894:	2302      	movs	r3, #2
 800a896:	647b      	str	r3, [r7, #68]	@ 0x44
 800a898:	e029      	b.n	800a8ee <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d102      	bne.n	800a8a6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8a4:	e023      	b.n	800a8ee <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2b63      	cmp	r3, #99	@ 0x63
 800a8aa:	d802      	bhi.n	800a8b2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800a8ac:	2305      	movs	r3, #5
 800a8ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8b0:	e01d      	b.n	800a8ee <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a8b2:	4b19      	ldr	r3, [pc, #100]	@ (800a918 <_txe_byte_pool_create+0x134>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a8b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ba:	4a18      	ldr	r2, [pc, #96]	@ (800a91c <_txe_byte_pool_create+0x138>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d101      	bne.n	800a8c4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a8c0:	2313      	movs	r3, #19
 800a8c2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a8c4:	f3ef 8305 	mrs	r3, IPSR
 800a8c8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a8ca:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a8cc:	4b14      	ldr	r3, [pc, #80]	@ (800a920 <_txe_byte_pool_create+0x13c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00b      	beq.n	800a8ee <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a8d6:	f3ef 8305 	mrs	r3, IPSR
 800a8da:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a8dc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a8de:	4b10      	ldr	r3, [pc, #64]	@ (800a920 <_txe_byte_pool_create+0x13c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800a8e8:	d201      	bcs.n	800a8ee <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a8ea:	2313      	movs	r3, #19
 800a8ec:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a8ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d106      	bne.n	800a902 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f7fe fab8 	bl	8008e70 <_tx_byte_pool_create>
 800a900:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800a902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a904:	4618      	mov	r0, r3
 800a906:	3748      	adds	r7, #72	@ 0x48
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	20000e74 	.word	0x20000e74
 800a910:	20000dcc 	.word	0x20000dcc
 800a914:	20000dd0 	.word	0x20000dd0
 800a918:	20000ddc 	.word	0x20000ddc
 800a91c:	20000f24 	.word	0x20000f24
 800a920:	2000000c 	.word	0x2000000c

0800a924 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b092      	sub	sp, #72	@ 0x48
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
 800a930:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a932:	2300      	movs	r3, #0
 800a934:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d102      	bne.n	800a942 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a93c:	230c      	movs	r3, #12
 800a93e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a940:	e054      	b.n	800a9ec <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b1c      	cmp	r3, #28
 800a946:	d002      	beq.n	800a94e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a948:	230c      	movs	r3, #12
 800a94a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a94c:	e04e      	b.n	800a9ec <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a94e:	f3ef 8310 	mrs	r3, PRIMASK
 800a952:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800a954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800a956:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a958:	b672      	cpsid	i
    return(int_posture);
 800a95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a95c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a95e:	4b36      	ldr	r3, [pc, #216]	@ (800aa38 <_txe_semaphore_create+0x114>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3301      	adds	r3, #1
 800a964:	4a34      	ldr	r2, [pc, #208]	@ (800aa38 <_txe_semaphore_create+0x114>)
 800a966:	6013      	str	r3, [r2, #0]
 800a968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96e:	f383 8810 	msr	PRIMASK, r3
}
 800a972:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800a974:	4b31      	ldr	r3, [pc, #196]	@ (800aa3c <_txe_semaphore_create+0x118>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800a97a:	2300      	movs	r3, #0
 800a97c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a97e:	e009      	b.n	800a994 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a984:	429a      	cmp	r2, r3
 800a986:	d00b      	beq.n	800a9a0 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800a988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a98a:	695b      	ldr	r3, [r3, #20]
 800a98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800a98e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a990:	3301      	adds	r3, #1
 800a992:	643b      	str	r3, [r7, #64]	@ 0x40
 800a994:	4b2a      	ldr	r3, [pc, #168]	@ (800aa40 <_txe_semaphore_create+0x11c>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d3f0      	bcc.n	800a980 <_txe_semaphore_create+0x5c>
 800a99e:	e000      	b.n	800a9a2 <_txe_semaphore_create+0x7e>
                break;
 800a9a0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9a2:	f3ef 8310 	mrs	r3, PRIMASK
 800a9a6:	623b      	str	r3, [r7, #32]
    return(posture);
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a9aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a9ac:	b672      	cpsid	i
    return(int_posture);
 800a9ae:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a9b0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a9b2:	4b21      	ldr	r3, [pc, #132]	@ (800aa38 <_txe_semaphore_create+0x114>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	4a1f      	ldr	r2, [pc, #124]	@ (800aa38 <_txe_semaphore_create+0x114>)
 800a9ba:	6013      	str	r3, [r2, #0]
 800a9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9be:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c2:	f383 8810 	msr	PRIMASK, r3
}
 800a9c6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a9c8:	f7ff f982 	bl	8009cd0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d102      	bne.n	800a9da <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800a9d4:	230c      	movs	r3, #12
 800a9d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9d8:	e008      	b.n	800a9ec <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a9da:	4b1a      	ldr	r3, [pc, #104]	@ (800aa44 <_txe_semaphore_create+0x120>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a9e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9e2:	4a19      	ldr	r2, [pc, #100]	@ (800aa48 <_txe_semaphore_create+0x124>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d101      	bne.n	800a9ec <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a9e8:	2313      	movs	r3, #19
 800a9ea:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a9ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d114      	bne.n	800aa1c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a9f2:	f3ef 8305 	mrs	r3, IPSR
 800a9f6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a9f8:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a9fa:	4b14      	ldr	r3, [pc, #80]	@ (800aa4c <_txe_semaphore_create+0x128>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00b      	beq.n	800aa1c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aa04:	f3ef 8305 	mrs	r3, IPSR
 800aa08:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800aa0a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800aa0c:	4b0f      	ldr	r3, [pc, #60]	@ (800aa4c <_txe_semaphore_create+0x128>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800aa16:	d201      	bcs.n	800aa1c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800aa18:	2313      	movs	r3, #19
 800aa1a:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800aa1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d105      	bne.n	800aa2e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	68b9      	ldr	r1, [r7, #8]
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f7fe fcb0 	bl	800938c <_tx_semaphore_create>
 800aa2c:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800aa2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3748      	adds	r7, #72	@ 0x48
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	20000e74 	.word	0x20000e74
 800aa3c:	20000da4 	.word	0x20000da4
 800aa40:	20000da8 	.word	0x20000da8
 800aa44:	20000ddc 	.word	0x20000ddc
 800aa48:	20000f24 	.word	0x20000f24
 800aa4c:	2000000c 	.word	0x2000000c

0800aa50 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d102      	bne.n	800aa6a <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800aa64:	230c      	movs	r3, #12
 800aa66:	617b      	str	r3, [r7, #20]
 800aa68:	e01f      	b.n	800aaaa <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a15      	ldr	r2, [pc, #84]	@ (800aac4 <_txe_semaphore_get+0x74>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d002      	beq.n	800aa7a <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800aa74:	230c      	movs	r3, #12
 800aa76:	617b      	str	r3, [r7, #20]
 800aa78:	e017      	b.n	800aaaa <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d014      	beq.n	800aaaa <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aa80:	f3ef 8305 	mrs	r3, IPSR
 800aa84:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800aa86:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800aa88:	4b0f      	ldr	r3, [pc, #60]	@ (800aac8 <_txe_semaphore_get+0x78>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800aa92:	2304      	movs	r3, #4
 800aa94:	617b      	str	r3, [r7, #20]
 800aa96:	e008      	b.n	800aaaa <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800aa98:	4b0c      	ldr	r3, [pc, #48]	@ (800aacc <_txe_semaphore_get+0x7c>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	4a0b      	ldr	r2, [pc, #44]	@ (800aad0 <_txe_semaphore_get+0x80>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d101      	bne.n	800aaaa <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800aaa6:	2304      	movs	r3, #4
 800aaa8:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d104      	bne.n	800aaba <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800aab0:	6839      	ldr	r1, [r7, #0]
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7fe fcbc 	bl	8009430 <_tx_semaphore_get>
 800aab8:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800aaba:	697b      	ldr	r3, [r7, #20]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3718      	adds	r7, #24
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	53454d41 	.word	0x53454d41
 800aac8:	2000000c 	.word	0x2000000c
 800aacc:	20000ddc 	.word	0x20000ddc
 800aad0:	20000f24 	.word	0x20000f24

0800aad4 <_txe_semaphore_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value,
                    TX_THREAD **first_suspended, ULONG *suspended_count,
                    TX_SEMAPHORE **next_semaphore)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b088      	sub	sp, #32
 800aad8:	af02      	add	r7, sp, #8
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d102      	bne.n	800aaee <_txe_semaphore_info_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800aae8:	230c      	movs	r3, #12
 800aaea:	617b      	str	r3, [r7, #20]
 800aaec:	e012      	b.n	800ab14 <_txe_semaphore_info_get+0x40>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a0b      	ldr	r2, [pc, #44]	@ (800ab20 <_txe_semaphore_info_get+0x4c>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d002      	beq.n	800aafe <_txe_semaphore_info_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800aaf8:	230c      	movs	r3, #12
 800aafa:	617b      	str	r3, [r7, #20]
 800aafc:	e00a      	b.n	800ab14 <_txe_semaphore_info_get+0x40>
    }
    else
    {

        /* Otherwise, call the actual semaphore information get service.  */
        status =  _tx_semaphore_info_get(semaphore_ptr, name, current_value, first_suspended,
 800aafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab00:	9301      	str	r3, [sp, #4]
 800ab02:	6a3b      	ldr	r3, [r7, #32]
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	68b9      	ldr	r1, [r7, #8]
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f7fe fd21 	bl	8009554 <_tx_semaphore_info_get>
 800ab12:	6178      	str	r0, [r7, #20]
                                                                suspended_count, next_semaphore);
    }

    /* Return completion status.  */
    return(status);
 800ab14:	697b      	ldr	r3, [r7, #20]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3718      	adds	r7, #24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	53454d41 	.word	0x53454d41

0800ab24 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d102      	bne.n	800ab38 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800ab32:	230c      	movs	r3, #12
 800ab34:	60fb      	str	r3, [r7, #12]
 800ab36:	e00b      	b.n	800ab50 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a07      	ldr	r2, [pc, #28]	@ (800ab5c <_txe_semaphore_put+0x38>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d002      	beq.n	800ab48 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800ab42:	230c      	movs	r3, #12
 800ab44:	60fb      	str	r3, [r7, #12]
 800ab46:	e003      	b.n	800ab50 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7fe fd43 	bl	80095d4 <_tx_semaphore_put>
 800ab4e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800ab50:	68fb      	ldr	r3, [r7, #12]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	53454d41 	.word	0x53454d41

0800ab60 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b09a      	sub	sp, #104	@ 0x68
 800ab64:	af06      	add	r7, sp, #24
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d102      	bne.n	800ab7e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ab78:	230e      	movs	r3, #14
 800ab7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab7c:	e0bb      	b.n	800acf6 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800ab7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab80:	2bb0      	cmp	r3, #176	@ 0xb0
 800ab82:	d002      	beq.n	800ab8a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ab84:	230e      	movs	r3, #14
 800ab86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab88:	e0b5      	b.n	800acf6 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ab8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ab8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800ab90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800ab92:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800ab94:	b672      	cpsid	i
    return(int_posture);
 800ab96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800ab98:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800ab9a:	4b64      	ldr	r3, [pc, #400]	@ (800ad2c <_txe_thread_create+0x1cc>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	4a62      	ldr	r2, [pc, #392]	@ (800ad2c <_txe_thread_create+0x1cc>)
 800aba2:	6013      	str	r3, [r2, #0]
 800aba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abaa:	f383 8810 	msr	PRIMASK, r3
}
 800abae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800abb0:	2300      	movs	r3, #0
 800abb2:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800abb4:	4b5e      	ldr	r3, [pc, #376]	@ (800ad30 <_txe_thread_create+0x1d0>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800abba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800abbc:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800abbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800abc0:	3b01      	subs	r3, #1
 800abc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abc4:	4413      	add	r3, r2
 800abc6:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800abc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abca:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800abcc:	2300      	movs	r3, #0
 800abce:	647b      	str	r3, [r7, #68]	@ 0x44
 800abd0:	e02b      	b.n	800ac2a <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d101      	bne.n	800abde <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800abda:	2301      	movs	r3, #1
 800abdc:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800abde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d028      	beq.n	800ac36 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800abe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800abea:	429a      	cmp	r2, r3
 800abec:	d308      	bcc.n	800ac00 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800abee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d203      	bcs.n	800ac00 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800abf8:	2300      	movs	r3, #0
 800abfa:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800abfc:	2301      	movs	r3, #1
 800abfe:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800ac00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d308      	bcc.n	800ac1c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800ac0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d203      	bcs.n	800ac1c <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800ac14:	2300      	movs	r3, #0
 800ac16:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800ac1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac22:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800ac24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac26:	3301      	adds	r3, #1
 800ac28:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac2a:	4b42      	ldr	r3, [pc, #264]	@ (800ad34 <_txe_thread_create+0x1d4>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d3ce      	bcc.n	800abd2 <_txe_thread_create+0x72>
 800ac34:	e000      	b.n	800ac38 <_txe_thread_create+0xd8>
                break;
 800ac36:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ac38:	f3ef 8310 	mrs	r3, PRIMASK
 800ac3c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800ac3e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800ac40:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ac42:	b672      	cpsid	i
    return(int_posture);
 800ac44:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800ac46:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800ac48:	4b38      	ldr	r3, [pc, #224]	@ (800ad2c <_txe_thread_create+0x1cc>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	4a37      	ldr	r2, [pc, #220]	@ (800ad2c <_txe_thread_create+0x1cc>)
 800ac50:	6013      	str	r3, [r2, #0]
 800ac52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac54:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	f383 8810 	msr	PRIMASK, r3
}
 800ac5c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ac5e:	f7ff f837 	bl	8009cd0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d102      	bne.n	800ac70 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800ac6a:	230e      	movs	r3, #14
 800ac6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac6e:	e042      	b.n	800acf6 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800ac70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d102      	bne.n	800ac7c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800ac76:	2303      	movs	r3, #3
 800ac78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac7a:	e03c      	b.n	800acf6 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d102      	bne.n	800ac88 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800ac82:	2303      	movs	r3, #3
 800ac84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac86:	e036      	b.n	800acf6 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800ac88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac8a:	2bc7      	cmp	r3, #199	@ 0xc7
 800ac8c:	d802      	bhi.n	800ac94 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800ac8e:	2305      	movs	r3, #5
 800ac90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac92:	e030      	b.n	800acf6 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800ac94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac96:	2b1f      	cmp	r3, #31
 800ac98:	d902      	bls.n	800aca0 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800ac9a:	230f      	movs	r3, #15
 800ac9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac9e:	e02a      	b.n	800acf6 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800aca0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aca2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d902      	bls.n	800acae <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800aca8:	2318      	movs	r3, #24
 800acaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acac:	e023      	b.n	800acf6 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800acae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d902      	bls.n	800acba <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800acb4:	2310      	movs	r3, #16
 800acb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acb8:	e01d      	b.n	800acf6 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800acba:	4b1f      	ldr	r3, [pc, #124]	@ (800ad38 <_txe_thread_create+0x1d8>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800acc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc2:	4a1e      	ldr	r2, [pc, #120]	@ (800ad3c <_txe_thread_create+0x1dc>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d101      	bne.n	800accc <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800acc8:	2313      	movs	r3, #19
 800acca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800accc:	f3ef 8305 	mrs	r3, IPSR
 800acd0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800acd2:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800acd4:	4b1a      	ldr	r3, [pc, #104]	@ (800ad40 <_txe_thread_create+0x1e0>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4313      	orrs	r3, r2
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00b      	beq.n	800acf6 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800acde:	f3ef 8305 	mrs	r3, IPSR
 800ace2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ace4:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ace6:	4b16      	ldr	r3, [pc, #88]	@ (800ad40 <_txe_thread_create+0x1e0>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4313      	orrs	r3, r2
 800acec:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800acf0:	d201      	bcs.n	800acf6 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800acf2:	2313      	movs	r3, #19
 800acf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800acf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d112      	bne.n	800ad22 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800acfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acfe:	9305      	str	r3, [sp, #20]
 800ad00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad02:	9304      	str	r3, [sp, #16]
 800ad04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad06:	9303      	str	r3, [sp, #12]
 800ad08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad0a:	9302      	str	r3, [sp, #8]
 800ad0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad0e:	9301      	str	r3, [sp, #4]
 800ad10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	68b9      	ldr	r1, [r7, #8]
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f7fe fcb2 	bl	8009684 <_tx_thread_create>
 800ad20:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800ad22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3750      	adds	r7, #80	@ 0x50
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	20000e74 	.word	0x20000e74
 800ad30:	20000de4 	.word	0x20000de4
 800ad34:	20000de8 	.word	0x20000de8
 800ad38:	20000ddc 	.word	0x20000ddc
 800ad3c:	20000f24 	.word	0x20000f24
 800ad40:	2000000c 	.word	0x2000000c

0800ad44 <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b08c      	sub	sp, #48	@ 0x30
 800ad48:	af06      	add	r7, sp, #24
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
 800ad50:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d102      	bne.n	800ad5e <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ad58:	230e      	movs	r3, #14
 800ad5a:	617b      	str	r3, [r7, #20]
 800ad5c:	e018      	b.n	800ad90 <_txe_thread_info_get+0x4c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a0e      	ldr	r2, [pc, #56]	@ (800ad9c <_txe_thread_info_get+0x58>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d002      	beq.n	800ad6e <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ad68:	230e      	movs	r3, #14
 800ad6a:	617b      	str	r3, [r7, #20]
 800ad6c:	e010      	b.n	800ad90 <_txe_thread_info_get+0x4c>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad70:	9304      	str	r3, [sp, #16]
 800ad72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad74:	9303      	str	r3, [sp, #12]
 800ad76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad78:	9302      	str	r3, [sp, #8]
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7c:	9301      	str	r3, [sp, #4]
 800ad7e:	6a3b      	ldr	r3, [r7, #32]
 800ad80:	9300      	str	r3, [sp, #0]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	68b9      	ldr	r1, [r7, #8]
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f7fe fd71 	bl	8009870 <_tx_thread_info_get>
 800ad8e:	6178      	str	r0, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 800ad90:	697b      	ldr	r3, [r7, #20]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3718      	adds	r7, #24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	54485244 	.word	0x54485244

0800ada0 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d102      	bne.n	800adb4 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800adae:	230e      	movs	r3, #14
 800adb0:	60fb      	str	r3, [r7, #12]
 800adb2:	e00b      	b.n	800adcc <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a07      	ldr	r2, [pc, #28]	@ (800add8 <_txe_thread_resume+0x38>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d002      	beq.n	800adc4 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800adbe:	230e      	movs	r3, #14
 800adc0:	60fb      	str	r3, [r7, #12]
 800adc2:	e003      	b.n	800adcc <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f7fe fde7 	bl	8009998 <_tx_thread_resume>
 800adca:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800adcc:	68fb      	ldr	r3, [r7, #12]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	54485244 	.word	0x54485244

0800addc <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d102      	bne.n	800adf0 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800adea:	230e      	movs	r3, #14
 800adec:	60fb      	str	r3, [r7, #12]
 800adee:	e00b      	b.n	800ae08 <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a07      	ldr	r2, [pc, #28]	@ (800ae14 <_txe_thread_suspend+0x38>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d002      	beq.n	800ae00 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800adfa:	230e      	movs	r3, #14
 800adfc:	60fb      	str	r3, [r7, #12]
 800adfe:	e003      	b.n	800ae08 <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7fe fef5 	bl	8009bf0 <_tx_thread_suspend>
 800ae06:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800ae08:	68fb      	ldr	r3, [r7, #12]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	54485244 	.word	0x54485244

0800ae18 <app_buttonLed_Test>:
/**
* @brief EXTI line detection callbacks
*  GPIO_Pin: Specifies the pins connected EXTI line
* @retval None
*/
void app_buttonLed_Test(void) {
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b08a      	sub	sp, #40	@ 0x28
 800ae1c:	af06      	add	r7, sp, #24

    ULONG currentValue = 0;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60fb      	str	r3, [r7, #12]
    UINT state;
    char * name;

    if (tx_semaphore_get(&semaphore_ledcheck, TX_NO_WAIT) == TX_SUCCESS)
 800ae22:	2100      	movs	r1, #0
 800ae24:	4827      	ldr	r0, [pc, #156]	@ (800aec4 <app_buttonLed_Test+0xac>)
 800ae26:	f7ff fe13 	bl	800aa50 <_txe_semaphore_get>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d144      	bne.n	800aeba <app_buttonLed_Test+0xa2>
    {
        name = "LED1 Thread";
 800ae30:	4b25      	ldr	r3, [pc, #148]	@ (800aec8 <app_buttonLed_Test+0xb0>)
 800ae32:	607b      	str	r3, [r7, #4]
        tx_semaphore_info_get(&semaphore_ledcheck, NULL, &currentValue, NULL, NULL, NULL);
 800ae34:	f107 020c 	add.w	r2, r7, #12
 800ae38:	2300      	movs	r3, #0
 800ae3a:	9301      	str	r3, [sp, #4]
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	2300      	movs	r3, #0
 800ae42:	2100      	movs	r1, #0
 800ae44:	481f      	ldr	r0, [pc, #124]	@ (800aec4 <app_buttonLed_Test+0xac>)
 800ae46:	f7ff fe45 	bl	800aad4 <_txe_semaphore_info_get>
        printf("\r\n[BUTTON-LED] user button pressed\r\n");
 800ae4a:	4820      	ldr	r0, [pc, #128]	@ (800aecc <app_buttonLed_Test+0xb4>)
 800ae4c:	f000 faa0 	bl	800b390 <puts>

        if (tx_thread_info_get(&thread_Led1,&name,&state,NULL,NULL,NULL,NULL,NULL,NULL) == TX_SUCCESS) {
 800ae50:	f107 0208 	add.w	r2, r7, #8
 800ae54:	1d39      	adds	r1, r7, #4
 800ae56:	2300      	movs	r3, #0
 800ae58:	9304      	str	r3, [sp, #16]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	9303      	str	r3, [sp, #12]
 800ae5e:	2300      	movs	r3, #0
 800ae60:	9302      	str	r3, [sp, #8]
 800ae62:	2300      	movs	r3, #0
 800ae64:	9301      	str	r3, [sp, #4]
 800ae66:	2300      	movs	r3, #0
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	4818      	ldr	r0, [pc, #96]	@ (800aed0 <app_buttonLed_Test+0xb8>)
 800ae6e:	f7ff ff69 	bl	800ad44 <_txe_thread_info_get>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d120      	bne.n	800aeba <app_buttonLed_Test+0xa2>

            if (state == TX_SUSPENDED){
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	d109      	bne.n	800ae92 <app_buttonLed_Test+0x7a>
                // resume LEDx threads    
                printf("[BUTTON-LED] LEDs blinking\r\n");
 800ae7e:	4815      	ldr	r0, [pc, #84]	@ (800aed4 <app_buttonLed_Test+0xbc>)
 800ae80:	f000 fa86 	bl	800b390 <puts>
                tx_thread_resume(&thread_Led1);
 800ae84:	4812      	ldr	r0, [pc, #72]	@ (800aed0 <app_buttonLed_Test+0xb8>)
 800ae86:	f7ff ff8b 	bl	800ada0 <_txe_thread_resume>
                tx_thread_resume(&thread_Led2);
 800ae8a:	4813      	ldr	r0, [pc, #76]	@ (800aed8 <app_buttonLed_Test+0xc0>)
 800ae8c:	f7ff ff88 	bl	800ada0 <_txe_thread_resume>
                HAL_GPIO_WritePin(USER_LED2_GPIO_Port,USER_LED2_Pin,GPIO_PIN_RESET);
                printf("[BUTTON-LED] turnoff LEDs \r\n");    
            }
        }
    }
}
 800ae90:	e013      	b.n	800aeba <app_buttonLed_Test+0xa2>
                tx_thread_suspend(&thread_Led1);
 800ae92:	480f      	ldr	r0, [pc, #60]	@ (800aed0 <app_buttonLed_Test+0xb8>)
 800ae94:	f7ff ffa2 	bl	800addc <_txe_thread_suspend>
                tx_thread_suspend(&thread_Led2);
 800ae98:	480f      	ldr	r0, [pc, #60]	@ (800aed8 <app_buttonLed_Test+0xc0>)
 800ae9a:	f7ff ff9f 	bl	800addc <_txe_thread_suspend>
                HAL_GPIO_WritePin(USER_LED1_GPIO_Port,USER_LED1_Pin,GPIO_PIN_RESET);
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aea4:	480d      	ldr	r0, [pc, #52]	@ (800aedc <app_buttonLed_Test+0xc4>)
 800aea6:	f7f6 fc33 	bl	8001710 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(USER_LED2_GPIO_Port,USER_LED2_Pin,GPIO_PIN_RESET);
 800aeaa:	2200      	movs	r2, #0
 800aeac:	2108      	movs	r1, #8
 800aeae:	480c      	ldr	r0, [pc, #48]	@ (800aee0 <app_buttonLed_Test+0xc8>)
 800aeb0:	f7f6 fc2e 	bl	8001710 <HAL_GPIO_WritePin>
                printf("[BUTTON-LED] turnoff LEDs \r\n");    
 800aeb4:	480b      	ldr	r0, [pc, #44]	@ (800aee4 <app_buttonLed_Test+0xcc>)
 800aeb6:	f000 fa6b 	bl	800b390 <puts>
}
 800aeba:	bf00      	nop
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	200015f4 	.word	0x200015f4
 800aec8:	0800bfec 	.word	0x0800bfec
 800aecc:	0800bff8 	.word	0x0800bff8
 800aed0:	20001494 	.word	0x20001494
 800aed4:	0800c01c 	.word	0x0800c01c
 800aed8:	20001544 	.word	0x20001544
 800aedc:	42020400 	.word	0x42020400
 800aee0:	42021000 	.word	0x42021000
 800aee4:	0800c038 	.word	0x0800c038

0800aee8 <LED1_thread_entry>:
/**
 * @brief  LED1_thread_entry function
 * @param  None
 * @retval None
*/
VOID LED1_thread_entry(ULONG initial_param){
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
    

    printf("[Thread-LED1] Entry\r\n");    
 800aef0:	4806      	ldr	r0, [pc, #24]	@ (800af0c <LED1_thread_entry+0x24>)
 800aef2:	f000 fa4d 	bl	800b390 <puts>
    while (1)
    {
        tx_thread_sleep(100);        //100ms sleep
 800aef6:	2064      	movs	r0, #100	@ 0x64
 800aef8:	f7fe fdfa 	bl	8009af0 <_tx_thread_sleep>
        HAL_GPIO_TogglePin(USER_LED1_GPIO_Port,USER_LED1_Pin);
 800aefc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800af00:	4803      	ldr	r0, [pc, #12]	@ (800af10 <LED1_thread_entry+0x28>)
 800af02:	f7f6 fc1d 	bl	8001740 <HAL_GPIO_TogglePin>
        tx_thread_sleep(100);        //100ms sleep
 800af06:	bf00      	nop
 800af08:	e7f5      	b.n	800aef6 <LED1_thread_entry+0xe>
 800af0a:	bf00      	nop
 800af0c:	0800c054 	.word	0x0800c054
 800af10:	42020400 	.word	0x42020400

0800af14 <LED2_thread_entry>:
/**
 * @brief  LED2_thread_entry function
 * @param  None
 * @retval None
*/
VOID LED2_thread_entry(ULONG initial_param){
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
    
    printf("[Thread-LED2] Entry\r\n");    
 800af1c:	4805      	ldr	r0, [pc, #20]	@ (800af34 <LED2_thread_entry+0x20>)
 800af1e:	f000 fa37 	bl	800b390 <puts>
    while (1)
    {
        tx_thread_sleep(200);        //100ms sleep
 800af22:	20c8      	movs	r0, #200	@ 0xc8
 800af24:	f7fe fde4 	bl	8009af0 <_tx_thread_sleep>
        HAL_GPIO_TogglePin(USER_LED2_GPIO_Port,USER_LED2_Pin);
 800af28:	2108      	movs	r1, #8
 800af2a:	4803      	ldr	r0, [pc, #12]	@ (800af38 <LED2_thread_entry+0x24>)
 800af2c:	f7f6 fc08 	bl	8001740 <HAL_GPIO_TogglePin>
        tx_thread_sleep(200);        //100ms sleep
 800af30:	bf00      	nop
 800af32:	e7f6      	b.n	800af22 <LED2_thread_entry+0xe>
 800af34:	0800c06c 	.word	0x0800c06c
 800af38:	42021000 	.word	0x42021000

0800af3c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief EXTI line detection callbacks
  *  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af02      	add	r7, sp, #8
 800af42:	4603      	mov	r3, r0
 800af44:	80fb      	strh	r3, [r7, #6]
  ULONG currentValue = 0;
 800af46:	2300      	movs	r3, #0
 800af48:	60fb      	str	r3, [r7, #12]
  if (GPIO_Pin == USER_BUTTON_Pin)
 800af4a:	88fb      	ldrh	r3, [r7, #6]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d10d      	bne.n	800af6c <HAL_GPIO_EXTI_Rising_Callback+0x30>
  {
    /* Add additional checks to avoid multiple semaphore puts by successively
    clicking on the user button */
    tx_semaphore_info_get(&semaphore_ledcheck, NULL, &currentValue, NULL, NULL, NULL);
 800af50:	f107 020c 	add.w	r2, r7, #12
 800af54:	2300      	movs	r3, #0
 800af56:	9301      	str	r3, [sp, #4]
 800af58:	2300      	movs	r3, #0
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	2300      	movs	r3, #0
 800af5e:	2100      	movs	r1, #0
 800af60:	4804      	ldr	r0, [pc, #16]	@ (800af74 <HAL_GPIO_EXTI_Rising_Callback+0x38>)
 800af62:	f7ff fdb7 	bl	800aad4 <_txe_semaphore_info_get>
    //if (currentValue < 2)
    {
        /* Put the semaphore to release the MainThread */
         tx_semaphore_put(&semaphore_ledcheck);
 800af66:	4803      	ldr	r0, [pc, #12]	@ (800af74 <HAL_GPIO_EXTI_Rising_Callback+0x38>)
 800af68:	f7ff fddc 	bl	800ab24 <_txe_semaphore_put>
    }
  }
}
 800af6c:	bf00      	nop
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	200015f4 	.word	0x200015f4

0800af78 <Moduletest_thread_entry>:
  /**
  * @brief  ModuleTest thread entry function
  * @param  None
  * @retval None
  */
VOID Moduletest_thread_entry(ULONG initial_param){
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
    

    printf("[Thread-ModuleTEST] Entry\n\r");    
 800af80:	4804      	ldr	r0, [pc, #16]	@ (800af94 <Moduletest_thread_entry+0x1c>)
 800af82:	f000 f99d 	bl	800b2c0 <iprintf>
    while (1)
    {
        tx_thread_sleep(10);        //100ms sleep
 800af86:	200a      	movs	r0, #10
 800af88:	f7fe fdb2 	bl	8009af0 <_tx_thread_sleep>

        app_buttonLed_Test();
 800af8c:	f7ff ff44 	bl	800ae18 <app_buttonLed_Test>
        tx_thread_sleep(10);        //100ms sleep
 800af90:	bf00      	nop
 800af92:	e7f8      	b.n	800af86 <Moduletest_thread_entry+0xe>
 800af94:	0800c0b8 	.word	0x0800c0b8

0800af98 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of putchar here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800afa0:	1d39      	adds	r1, r7, #4
 800afa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800afa6:	2201      	movs	r2, #1
 800afa8:	4803      	ldr	r0, [pc, #12]	@ (800afb8 <__io_putchar+0x20>)
 800afaa:	f7fd f871 	bl	8008090 <HAL_UART_Transmit>
  return ch;
 800afae:	687b      	ldr	r3, [r7, #4]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	20000cbc 	.word	0x20000cbc

0800afbc <__sflush_r>:
 800afbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc4:	0716      	lsls	r6, r2, #28
 800afc6:	4605      	mov	r5, r0
 800afc8:	460c      	mov	r4, r1
 800afca:	d454      	bmi.n	800b076 <__sflush_r+0xba>
 800afcc:	684b      	ldr	r3, [r1, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	dc02      	bgt.n	800afd8 <__sflush_r+0x1c>
 800afd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	dd48      	ble.n	800b06a <__sflush_r+0xae>
 800afd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afda:	2e00      	cmp	r6, #0
 800afdc:	d045      	beq.n	800b06a <__sflush_r+0xae>
 800afde:	2300      	movs	r3, #0
 800afe0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800afe4:	682f      	ldr	r7, [r5, #0]
 800afe6:	6a21      	ldr	r1, [r4, #32]
 800afe8:	602b      	str	r3, [r5, #0]
 800afea:	d030      	beq.n	800b04e <__sflush_r+0x92>
 800afec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afee:	89a3      	ldrh	r3, [r4, #12]
 800aff0:	0759      	lsls	r1, r3, #29
 800aff2:	d505      	bpl.n	800b000 <__sflush_r+0x44>
 800aff4:	6863      	ldr	r3, [r4, #4]
 800aff6:	1ad2      	subs	r2, r2, r3
 800aff8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800affa:	b10b      	cbz	r3, 800b000 <__sflush_r+0x44>
 800affc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800affe:	1ad2      	subs	r2, r2, r3
 800b000:	2300      	movs	r3, #0
 800b002:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b004:	6a21      	ldr	r1, [r4, #32]
 800b006:	4628      	mov	r0, r5
 800b008:	47b0      	blx	r6
 800b00a:	1c43      	adds	r3, r0, #1
 800b00c:	89a3      	ldrh	r3, [r4, #12]
 800b00e:	d106      	bne.n	800b01e <__sflush_r+0x62>
 800b010:	6829      	ldr	r1, [r5, #0]
 800b012:	291d      	cmp	r1, #29
 800b014:	d82b      	bhi.n	800b06e <__sflush_r+0xb2>
 800b016:	4a2a      	ldr	r2, [pc, #168]	@ (800b0c0 <__sflush_r+0x104>)
 800b018:	410a      	asrs	r2, r1
 800b01a:	07d6      	lsls	r6, r2, #31
 800b01c:	d427      	bmi.n	800b06e <__sflush_r+0xb2>
 800b01e:	2200      	movs	r2, #0
 800b020:	04d9      	lsls	r1, r3, #19
 800b022:	6062      	str	r2, [r4, #4]
 800b024:	6922      	ldr	r2, [r4, #16]
 800b026:	6022      	str	r2, [r4, #0]
 800b028:	d504      	bpl.n	800b034 <__sflush_r+0x78>
 800b02a:	1c42      	adds	r2, r0, #1
 800b02c:	d101      	bne.n	800b032 <__sflush_r+0x76>
 800b02e:	682b      	ldr	r3, [r5, #0]
 800b030:	b903      	cbnz	r3, 800b034 <__sflush_r+0x78>
 800b032:	6560      	str	r0, [r4, #84]	@ 0x54
 800b034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b036:	602f      	str	r7, [r5, #0]
 800b038:	b1b9      	cbz	r1, 800b06a <__sflush_r+0xae>
 800b03a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b03e:	4299      	cmp	r1, r3
 800b040:	d002      	beq.n	800b048 <__sflush_r+0x8c>
 800b042:	4628      	mov	r0, r5
 800b044:	f000 fb00 	bl	800b648 <_free_r>
 800b048:	2300      	movs	r3, #0
 800b04a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b04c:	e00d      	b.n	800b06a <__sflush_r+0xae>
 800b04e:	2301      	movs	r3, #1
 800b050:	4628      	mov	r0, r5
 800b052:	47b0      	blx	r6
 800b054:	4602      	mov	r2, r0
 800b056:	1c50      	adds	r0, r2, #1
 800b058:	d1c9      	bne.n	800afee <__sflush_r+0x32>
 800b05a:	682b      	ldr	r3, [r5, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d0c6      	beq.n	800afee <__sflush_r+0x32>
 800b060:	2b1d      	cmp	r3, #29
 800b062:	d001      	beq.n	800b068 <__sflush_r+0xac>
 800b064:	2b16      	cmp	r3, #22
 800b066:	d11d      	bne.n	800b0a4 <__sflush_r+0xe8>
 800b068:	602f      	str	r7, [r5, #0]
 800b06a:	2000      	movs	r0, #0
 800b06c:	e021      	b.n	800b0b2 <__sflush_r+0xf6>
 800b06e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b072:	b21b      	sxth	r3, r3
 800b074:	e01a      	b.n	800b0ac <__sflush_r+0xf0>
 800b076:	690f      	ldr	r7, [r1, #16]
 800b078:	2f00      	cmp	r7, #0
 800b07a:	d0f6      	beq.n	800b06a <__sflush_r+0xae>
 800b07c:	0793      	lsls	r3, r2, #30
 800b07e:	680e      	ldr	r6, [r1, #0]
 800b080:	600f      	str	r7, [r1, #0]
 800b082:	bf0c      	ite	eq
 800b084:	694b      	ldreq	r3, [r1, #20]
 800b086:	2300      	movne	r3, #0
 800b088:	eba6 0807 	sub.w	r8, r6, r7
 800b08c:	608b      	str	r3, [r1, #8]
 800b08e:	f1b8 0f00 	cmp.w	r8, #0
 800b092:	ddea      	ble.n	800b06a <__sflush_r+0xae>
 800b094:	4643      	mov	r3, r8
 800b096:	463a      	mov	r2, r7
 800b098:	6a21      	ldr	r1, [r4, #32]
 800b09a:	4628      	mov	r0, r5
 800b09c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b09e:	47b0      	blx	r6
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	dc08      	bgt.n	800b0b6 <__sflush_r+0xfa>
 800b0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b0:	81a3      	strh	r3, [r4, #12]
 800b0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b6:	4407      	add	r7, r0
 800b0b8:	eba8 0800 	sub.w	r8, r8, r0
 800b0bc:	e7e7      	b.n	800b08e <__sflush_r+0xd2>
 800b0be:	bf00      	nop
 800b0c0:	dfbffffe 	.word	0xdfbffffe

0800b0c4 <_fflush_r>:
 800b0c4:	b538      	push	{r3, r4, r5, lr}
 800b0c6:	690b      	ldr	r3, [r1, #16]
 800b0c8:	4605      	mov	r5, r0
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	b913      	cbnz	r3, 800b0d4 <_fflush_r+0x10>
 800b0ce:	2500      	movs	r5, #0
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	bd38      	pop	{r3, r4, r5, pc}
 800b0d4:	b118      	cbz	r0, 800b0de <_fflush_r+0x1a>
 800b0d6:	6a03      	ldr	r3, [r0, #32]
 800b0d8:	b90b      	cbnz	r3, 800b0de <_fflush_r+0x1a>
 800b0da:	f000 f8bb 	bl	800b254 <__sinit>
 800b0de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d0f3      	beq.n	800b0ce <_fflush_r+0xa>
 800b0e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0e8:	07d0      	lsls	r0, r2, #31
 800b0ea:	d404      	bmi.n	800b0f6 <_fflush_r+0x32>
 800b0ec:	0599      	lsls	r1, r3, #22
 800b0ee:	d402      	bmi.n	800b0f6 <_fflush_r+0x32>
 800b0f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0f2:	f000 faa6 	bl	800b642 <__retarget_lock_acquire_recursive>
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	f7ff ff5f 	bl	800afbc <__sflush_r>
 800b0fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b100:	4605      	mov	r5, r0
 800b102:	07da      	lsls	r2, r3, #31
 800b104:	d4e4      	bmi.n	800b0d0 <_fflush_r+0xc>
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	059b      	lsls	r3, r3, #22
 800b10a:	d4e1      	bmi.n	800b0d0 <_fflush_r+0xc>
 800b10c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b10e:	f000 fa99 	bl	800b644 <__retarget_lock_release_recursive>
 800b112:	e7dd      	b.n	800b0d0 <_fflush_r+0xc>

0800b114 <fflush>:
 800b114:	4601      	mov	r1, r0
 800b116:	b920      	cbnz	r0, 800b122 <fflush+0xe>
 800b118:	4a04      	ldr	r2, [pc, #16]	@ (800b12c <fflush+0x18>)
 800b11a:	4905      	ldr	r1, [pc, #20]	@ (800b130 <fflush+0x1c>)
 800b11c:	4805      	ldr	r0, [pc, #20]	@ (800b134 <fflush+0x20>)
 800b11e:	f000 b8b1 	b.w	800b284 <_fwalk_sglue>
 800b122:	4b05      	ldr	r3, [pc, #20]	@ (800b138 <fflush+0x24>)
 800b124:	6818      	ldr	r0, [r3, #0]
 800b126:	f7ff bfcd 	b.w	800b0c4 <_fflush_r>
 800b12a:	bf00      	nop
 800b12c:	20000010 	.word	0x20000010
 800b130:	0800b0c5 	.word	0x0800b0c5
 800b134:	20000020 	.word	0x20000020
 800b138:	2000001c 	.word	0x2000001c

0800b13c <std>:
 800b13c:	2300      	movs	r3, #0
 800b13e:	b510      	push	{r4, lr}
 800b140:	4604      	mov	r4, r0
 800b142:	6083      	str	r3, [r0, #8]
 800b144:	8181      	strh	r1, [r0, #12]
 800b146:	4619      	mov	r1, r3
 800b148:	6643      	str	r3, [r0, #100]	@ 0x64
 800b14a:	81c2      	strh	r2, [r0, #14]
 800b14c:	2208      	movs	r2, #8
 800b14e:	6183      	str	r3, [r0, #24]
 800b150:	e9c0 3300 	strd	r3, r3, [r0]
 800b154:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b158:	305c      	adds	r0, #92	@ 0x5c
 800b15a:	f000 f9f9 	bl	800b550 <memset>
 800b15e:	4b0d      	ldr	r3, [pc, #52]	@ (800b194 <std+0x58>)
 800b160:	6224      	str	r4, [r4, #32]
 800b162:	6263      	str	r3, [r4, #36]	@ 0x24
 800b164:	4b0c      	ldr	r3, [pc, #48]	@ (800b198 <std+0x5c>)
 800b166:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b168:	4b0c      	ldr	r3, [pc, #48]	@ (800b19c <std+0x60>)
 800b16a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b16c:	4b0c      	ldr	r3, [pc, #48]	@ (800b1a0 <std+0x64>)
 800b16e:	6323      	str	r3, [r4, #48]	@ 0x30
 800b170:	4b0c      	ldr	r3, [pc, #48]	@ (800b1a4 <std+0x68>)
 800b172:	429c      	cmp	r4, r3
 800b174:	d006      	beq.n	800b184 <std+0x48>
 800b176:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b17a:	4294      	cmp	r4, r2
 800b17c:	d002      	beq.n	800b184 <std+0x48>
 800b17e:	33d0      	adds	r3, #208	@ 0xd0
 800b180:	429c      	cmp	r4, r3
 800b182:	d105      	bne.n	800b190 <std+0x54>
 800b184:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b18c:	f000 ba58 	b.w	800b640 <__retarget_lock_init_recursive>
 800b190:	bd10      	pop	{r4, pc}
 800b192:	bf00      	nop
 800b194:	0800b3a1 	.word	0x0800b3a1
 800b198:	0800b3c3 	.word	0x0800b3c3
 800b19c:	0800b3fb 	.word	0x0800b3fb
 800b1a0:	0800b41f 	.word	0x0800b41f
 800b1a4:	20001610 	.word	0x20001610

0800b1a8 <stdio_exit_handler>:
 800b1a8:	4a02      	ldr	r2, [pc, #8]	@ (800b1b4 <stdio_exit_handler+0xc>)
 800b1aa:	4903      	ldr	r1, [pc, #12]	@ (800b1b8 <stdio_exit_handler+0x10>)
 800b1ac:	4803      	ldr	r0, [pc, #12]	@ (800b1bc <stdio_exit_handler+0x14>)
 800b1ae:	f000 b869 	b.w	800b284 <_fwalk_sglue>
 800b1b2:	bf00      	nop
 800b1b4:	20000010 	.word	0x20000010
 800b1b8:	0800b0c5 	.word	0x0800b0c5
 800b1bc:	20000020 	.word	0x20000020

0800b1c0 <cleanup_stdio>:
 800b1c0:	6841      	ldr	r1, [r0, #4]
 800b1c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b1f4 <cleanup_stdio+0x34>)
 800b1c4:	4299      	cmp	r1, r3
 800b1c6:	b510      	push	{r4, lr}
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	d001      	beq.n	800b1d0 <cleanup_stdio+0x10>
 800b1cc:	f7ff ff7a 	bl	800b0c4 <_fflush_r>
 800b1d0:	68a1      	ldr	r1, [r4, #8]
 800b1d2:	4b09      	ldr	r3, [pc, #36]	@ (800b1f8 <cleanup_stdio+0x38>)
 800b1d4:	4299      	cmp	r1, r3
 800b1d6:	d002      	beq.n	800b1de <cleanup_stdio+0x1e>
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f7ff ff73 	bl	800b0c4 <_fflush_r>
 800b1de:	68e1      	ldr	r1, [r4, #12]
 800b1e0:	4b06      	ldr	r3, [pc, #24]	@ (800b1fc <cleanup_stdio+0x3c>)
 800b1e2:	4299      	cmp	r1, r3
 800b1e4:	d004      	beq.n	800b1f0 <cleanup_stdio+0x30>
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1ec:	f7ff bf6a 	b.w	800b0c4 <_fflush_r>
 800b1f0:	bd10      	pop	{r4, pc}
 800b1f2:	bf00      	nop
 800b1f4:	20001610 	.word	0x20001610
 800b1f8:	20001678 	.word	0x20001678
 800b1fc:	200016e0 	.word	0x200016e0

0800b200 <global_stdio_init.part.0>:
 800b200:	b510      	push	{r4, lr}
 800b202:	4b0b      	ldr	r3, [pc, #44]	@ (800b230 <global_stdio_init.part.0+0x30>)
 800b204:	2104      	movs	r1, #4
 800b206:	4c0b      	ldr	r4, [pc, #44]	@ (800b234 <global_stdio_init.part.0+0x34>)
 800b208:	4a0b      	ldr	r2, [pc, #44]	@ (800b238 <global_stdio_init.part.0+0x38>)
 800b20a:	4620      	mov	r0, r4
 800b20c:	601a      	str	r2, [r3, #0]
 800b20e:	2200      	movs	r2, #0
 800b210:	f7ff ff94 	bl	800b13c <std>
 800b214:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b218:	2201      	movs	r2, #1
 800b21a:	2109      	movs	r1, #9
 800b21c:	f7ff ff8e 	bl	800b13c <std>
 800b220:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b224:	2202      	movs	r2, #2
 800b226:	2112      	movs	r1, #18
 800b228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b22c:	f7ff bf86 	b.w	800b13c <std>
 800b230:	20001748 	.word	0x20001748
 800b234:	20001610 	.word	0x20001610
 800b238:	0800b1a9 	.word	0x0800b1a9

0800b23c <__sfp_lock_acquire>:
 800b23c:	4801      	ldr	r0, [pc, #4]	@ (800b244 <__sfp_lock_acquire+0x8>)
 800b23e:	f000 ba00 	b.w	800b642 <__retarget_lock_acquire_recursive>
 800b242:	bf00      	nop
 800b244:	20001751 	.word	0x20001751

0800b248 <__sfp_lock_release>:
 800b248:	4801      	ldr	r0, [pc, #4]	@ (800b250 <__sfp_lock_release+0x8>)
 800b24a:	f000 b9fb 	b.w	800b644 <__retarget_lock_release_recursive>
 800b24e:	bf00      	nop
 800b250:	20001751 	.word	0x20001751

0800b254 <__sinit>:
 800b254:	b510      	push	{r4, lr}
 800b256:	4604      	mov	r4, r0
 800b258:	f7ff fff0 	bl	800b23c <__sfp_lock_acquire>
 800b25c:	6a23      	ldr	r3, [r4, #32]
 800b25e:	b11b      	cbz	r3, 800b268 <__sinit+0x14>
 800b260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b264:	f7ff bff0 	b.w	800b248 <__sfp_lock_release>
 800b268:	4b04      	ldr	r3, [pc, #16]	@ (800b27c <__sinit+0x28>)
 800b26a:	6223      	str	r3, [r4, #32]
 800b26c:	4b04      	ldr	r3, [pc, #16]	@ (800b280 <__sinit+0x2c>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1f5      	bne.n	800b260 <__sinit+0xc>
 800b274:	f7ff ffc4 	bl	800b200 <global_stdio_init.part.0>
 800b278:	e7f2      	b.n	800b260 <__sinit+0xc>
 800b27a:	bf00      	nop
 800b27c:	0800b1c1 	.word	0x0800b1c1
 800b280:	20001748 	.word	0x20001748

0800b284 <_fwalk_sglue>:
 800b284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b288:	4607      	mov	r7, r0
 800b28a:	4688      	mov	r8, r1
 800b28c:	4614      	mov	r4, r2
 800b28e:	2600      	movs	r6, #0
 800b290:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b294:	f1b9 0901 	subs.w	r9, r9, #1
 800b298:	d505      	bpl.n	800b2a6 <_fwalk_sglue+0x22>
 800b29a:	6824      	ldr	r4, [r4, #0]
 800b29c:	2c00      	cmp	r4, #0
 800b29e:	d1f7      	bne.n	800b290 <_fwalk_sglue+0xc>
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a6:	89ab      	ldrh	r3, [r5, #12]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d907      	bls.n	800b2bc <_fwalk_sglue+0x38>
 800b2ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	d003      	beq.n	800b2bc <_fwalk_sglue+0x38>
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	47c0      	blx	r8
 800b2ba:	4306      	orrs	r6, r0
 800b2bc:	3568      	adds	r5, #104	@ 0x68
 800b2be:	e7e9      	b.n	800b294 <_fwalk_sglue+0x10>

0800b2c0 <iprintf>:
 800b2c0:	b40f      	push	{r0, r1, r2, r3}
 800b2c2:	b507      	push	{r0, r1, r2, lr}
 800b2c4:	4906      	ldr	r1, [pc, #24]	@ (800b2e0 <iprintf+0x20>)
 800b2c6:	ab04      	add	r3, sp, #16
 800b2c8:	6808      	ldr	r0, [r1, #0]
 800b2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ce:	6881      	ldr	r1, [r0, #8]
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	f000 fadb 	bl	800b88c <_vfiprintf_r>
 800b2d6:	b003      	add	sp, #12
 800b2d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2dc:	b004      	add	sp, #16
 800b2de:	4770      	bx	lr
 800b2e0:	2000001c 	.word	0x2000001c

0800b2e4 <_puts_r>:
 800b2e4:	6a03      	ldr	r3, [r0, #32]
 800b2e6:	b570      	push	{r4, r5, r6, lr}
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	460e      	mov	r6, r1
 800b2ec:	6884      	ldr	r4, [r0, #8]
 800b2ee:	b90b      	cbnz	r3, 800b2f4 <_puts_r+0x10>
 800b2f0:	f7ff ffb0 	bl	800b254 <__sinit>
 800b2f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2f6:	07db      	lsls	r3, r3, #31
 800b2f8:	d405      	bmi.n	800b306 <_puts_r+0x22>
 800b2fa:	89a3      	ldrh	r3, [r4, #12]
 800b2fc:	0598      	lsls	r0, r3, #22
 800b2fe:	d402      	bmi.n	800b306 <_puts_r+0x22>
 800b300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b302:	f000 f99e 	bl	800b642 <__retarget_lock_acquire_recursive>
 800b306:	89a3      	ldrh	r3, [r4, #12]
 800b308:	0719      	lsls	r1, r3, #28
 800b30a:	d502      	bpl.n	800b312 <_puts_r+0x2e>
 800b30c:	6923      	ldr	r3, [r4, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d135      	bne.n	800b37e <_puts_r+0x9a>
 800b312:	4621      	mov	r1, r4
 800b314:	4628      	mov	r0, r5
 800b316:	f000 f8c5 	bl	800b4a4 <__swsetup_r>
 800b31a:	b380      	cbz	r0, 800b37e <_puts_r+0x9a>
 800b31c:	f04f 35ff 	mov.w	r5, #4294967295
 800b320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b322:	07da      	lsls	r2, r3, #31
 800b324:	d405      	bmi.n	800b332 <_puts_r+0x4e>
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	059b      	lsls	r3, r3, #22
 800b32a:	d402      	bmi.n	800b332 <_puts_r+0x4e>
 800b32c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b32e:	f000 f989 	bl	800b644 <__retarget_lock_release_recursive>
 800b332:	4628      	mov	r0, r5
 800b334:	bd70      	pop	{r4, r5, r6, pc}
 800b336:	2b00      	cmp	r3, #0
 800b338:	da04      	bge.n	800b344 <_puts_r+0x60>
 800b33a:	69a2      	ldr	r2, [r4, #24]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	dc17      	bgt.n	800b370 <_puts_r+0x8c>
 800b340:	290a      	cmp	r1, #10
 800b342:	d015      	beq.n	800b370 <_puts_r+0x8c>
 800b344:	6823      	ldr	r3, [r4, #0]
 800b346:	1c5a      	adds	r2, r3, #1
 800b348:	6022      	str	r2, [r4, #0]
 800b34a:	7019      	strb	r1, [r3, #0]
 800b34c:	68a3      	ldr	r3, [r4, #8]
 800b34e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b352:	3b01      	subs	r3, #1
 800b354:	60a3      	str	r3, [r4, #8]
 800b356:	2900      	cmp	r1, #0
 800b358:	d1ed      	bne.n	800b336 <_puts_r+0x52>
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	da11      	bge.n	800b382 <_puts_r+0x9e>
 800b35e:	4622      	mov	r2, r4
 800b360:	210a      	movs	r1, #10
 800b362:	4628      	mov	r0, r5
 800b364:	f000 f85f 	bl	800b426 <__swbuf_r>
 800b368:	3001      	adds	r0, #1
 800b36a:	d0d7      	beq.n	800b31c <_puts_r+0x38>
 800b36c:	250a      	movs	r5, #10
 800b36e:	e7d7      	b.n	800b320 <_puts_r+0x3c>
 800b370:	4622      	mov	r2, r4
 800b372:	4628      	mov	r0, r5
 800b374:	f000 f857 	bl	800b426 <__swbuf_r>
 800b378:	3001      	adds	r0, #1
 800b37a:	d1e7      	bne.n	800b34c <_puts_r+0x68>
 800b37c:	e7ce      	b.n	800b31c <_puts_r+0x38>
 800b37e:	3e01      	subs	r6, #1
 800b380:	e7e4      	b.n	800b34c <_puts_r+0x68>
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	1c5a      	adds	r2, r3, #1
 800b386:	6022      	str	r2, [r4, #0]
 800b388:	220a      	movs	r2, #10
 800b38a:	701a      	strb	r2, [r3, #0]
 800b38c:	e7ee      	b.n	800b36c <_puts_r+0x88>
	...

0800b390 <puts>:
 800b390:	4b02      	ldr	r3, [pc, #8]	@ (800b39c <puts+0xc>)
 800b392:	4601      	mov	r1, r0
 800b394:	6818      	ldr	r0, [r3, #0]
 800b396:	f7ff bfa5 	b.w	800b2e4 <_puts_r>
 800b39a:	bf00      	nop
 800b39c:	2000001c 	.word	0x2000001c

0800b3a0 <__sread>:
 800b3a0:	b510      	push	{r4, lr}
 800b3a2:	460c      	mov	r4, r1
 800b3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a8:	f000 f8fc 	bl	800b5a4 <_read_r>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	bfab      	itete	ge
 800b3b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b3b2:	89a3      	ldrhlt	r3, [r4, #12]
 800b3b4:	181b      	addge	r3, r3, r0
 800b3b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3ba:	bfac      	ite	ge
 800b3bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3be:	81a3      	strhlt	r3, [r4, #12]
 800b3c0:	bd10      	pop	{r4, pc}

0800b3c2 <__swrite>:
 800b3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c6:	461f      	mov	r7, r3
 800b3c8:	898b      	ldrh	r3, [r1, #12]
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	460c      	mov	r4, r1
 800b3ce:	05db      	lsls	r3, r3, #23
 800b3d0:	4616      	mov	r6, r2
 800b3d2:	d505      	bpl.n	800b3e0 <__swrite+0x1e>
 800b3d4:	2302      	movs	r3, #2
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3dc:	f000 f8d0 	bl	800b580 <_lseek_r>
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	4632      	mov	r2, r6
 800b3e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3ee:	81a3      	strh	r3, [r4, #12]
 800b3f0:	463b      	mov	r3, r7
 800b3f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f6:	f000 b8e7 	b.w	800b5c8 <_write_r>

0800b3fa <__sseek>:
 800b3fa:	b510      	push	{r4, lr}
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b402:	f000 f8bd 	bl	800b580 <_lseek_r>
 800b406:	1c43      	adds	r3, r0, #1
 800b408:	89a3      	ldrh	r3, [r4, #12]
 800b40a:	bf15      	itete	ne
 800b40c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b40e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b412:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b416:	81a3      	strheq	r3, [r4, #12]
 800b418:	bf18      	it	ne
 800b41a:	81a3      	strhne	r3, [r4, #12]
 800b41c:	bd10      	pop	{r4, pc}

0800b41e <__sclose>:
 800b41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b422:	f000 b89d 	b.w	800b560 <_close_r>

0800b426 <__swbuf_r>:
 800b426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b428:	460e      	mov	r6, r1
 800b42a:	4614      	mov	r4, r2
 800b42c:	4605      	mov	r5, r0
 800b42e:	b118      	cbz	r0, 800b438 <__swbuf_r+0x12>
 800b430:	6a03      	ldr	r3, [r0, #32]
 800b432:	b90b      	cbnz	r3, 800b438 <__swbuf_r+0x12>
 800b434:	f7ff ff0e 	bl	800b254 <__sinit>
 800b438:	69a3      	ldr	r3, [r4, #24]
 800b43a:	60a3      	str	r3, [r4, #8]
 800b43c:	89a3      	ldrh	r3, [r4, #12]
 800b43e:	071a      	lsls	r2, r3, #28
 800b440:	d501      	bpl.n	800b446 <__swbuf_r+0x20>
 800b442:	6923      	ldr	r3, [r4, #16]
 800b444:	b943      	cbnz	r3, 800b458 <__swbuf_r+0x32>
 800b446:	4621      	mov	r1, r4
 800b448:	4628      	mov	r0, r5
 800b44a:	f000 f82b 	bl	800b4a4 <__swsetup_r>
 800b44e:	b118      	cbz	r0, 800b458 <__swbuf_r+0x32>
 800b450:	f04f 37ff 	mov.w	r7, #4294967295
 800b454:	4638      	mov	r0, r7
 800b456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b458:	6823      	ldr	r3, [r4, #0]
 800b45a:	b2f6      	uxtb	r6, r6
 800b45c:	6922      	ldr	r2, [r4, #16]
 800b45e:	4637      	mov	r7, r6
 800b460:	1a98      	subs	r0, r3, r2
 800b462:	6963      	ldr	r3, [r4, #20]
 800b464:	4283      	cmp	r3, r0
 800b466:	dc05      	bgt.n	800b474 <__swbuf_r+0x4e>
 800b468:	4621      	mov	r1, r4
 800b46a:	4628      	mov	r0, r5
 800b46c:	f7ff fe2a 	bl	800b0c4 <_fflush_r>
 800b470:	2800      	cmp	r0, #0
 800b472:	d1ed      	bne.n	800b450 <__swbuf_r+0x2a>
 800b474:	68a3      	ldr	r3, [r4, #8]
 800b476:	3b01      	subs	r3, #1
 800b478:	60a3      	str	r3, [r4, #8]
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	1c5a      	adds	r2, r3, #1
 800b47e:	6022      	str	r2, [r4, #0]
 800b480:	701e      	strb	r6, [r3, #0]
 800b482:	1c43      	adds	r3, r0, #1
 800b484:	6962      	ldr	r2, [r4, #20]
 800b486:	429a      	cmp	r2, r3
 800b488:	d004      	beq.n	800b494 <__swbuf_r+0x6e>
 800b48a:	89a3      	ldrh	r3, [r4, #12]
 800b48c:	07db      	lsls	r3, r3, #31
 800b48e:	d5e1      	bpl.n	800b454 <__swbuf_r+0x2e>
 800b490:	2e0a      	cmp	r6, #10
 800b492:	d1df      	bne.n	800b454 <__swbuf_r+0x2e>
 800b494:	4621      	mov	r1, r4
 800b496:	4628      	mov	r0, r5
 800b498:	f7ff fe14 	bl	800b0c4 <_fflush_r>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d0d9      	beq.n	800b454 <__swbuf_r+0x2e>
 800b4a0:	e7d6      	b.n	800b450 <__swbuf_r+0x2a>
	...

0800b4a4 <__swsetup_r>:
 800b4a4:	b538      	push	{r3, r4, r5, lr}
 800b4a6:	4b29      	ldr	r3, [pc, #164]	@ (800b54c <__swsetup_r+0xa8>)
 800b4a8:	4605      	mov	r5, r0
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	6818      	ldr	r0, [r3, #0]
 800b4ae:	b118      	cbz	r0, 800b4b8 <__swsetup_r+0x14>
 800b4b0:	6a03      	ldr	r3, [r0, #32]
 800b4b2:	b90b      	cbnz	r3, 800b4b8 <__swsetup_r+0x14>
 800b4b4:	f7ff fece 	bl	800b254 <__sinit>
 800b4b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4bc:	0719      	lsls	r1, r3, #28
 800b4be:	d422      	bmi.n	800b506 <__swsetup_r+0x62>
 800b4c0:	06da      	lsls	r2, r3, #27
 800b4c2:	d407      	bmi.n	800b4d4 <__swsetup_r+0x30>
 800b4c4:	2209      	movs	r2, #9
 800b4c6:	602a      	str	r2, [r5, #0]
 800b4c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d0:	81a3      	strh	r3, [r4, #12]
 800b4d2:	e033      	b.n	800b53c <__swsetup_r+0x98>
 800b4d4:	0758      	lsls	r0, r3, #29
 800b4d6:	d512      	bpl.n	800b4fe <__swsetup_r+0x5a>
 800b4d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4da:	b141      	cbz	r1, 800b4ee <__swsetup_r+0x4a>
 800b4dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4e0:	4299      	cmp	r1, r3
 800b4e2:	d002      	beq.n	800b4ea <__swsetup_r+0x46>
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	f000 f8af 	bl	800b648 <_free_r>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4ee:	89a3      	ldrh	r3, [r4, #12]
 800b4f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b4f4:	81a3      	strh	r3, [r4, #12]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	6063      	str	r3, [r4, #4]
 800b4fa:	6923      	ldr	r3, [r4, #16]
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	f043 0308 	orr.w	r3, r3, #8
 800b504:	81a3      	strh	r3, [r4, #12]
 800b506:	6923      	ldr	r3, [r4, #16]
 800b508:	b94b      	cbnz	r3, 800b51e <__swsetup_r+0x7a>
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b514:	d003      	beq.n	800b51e <__swsetup_r+0x7a>
 800b516:	4621      	mov	r1, r4
 800b518:	4628      	mov	r0, r5
 800b51a:	f000 fc86 	bl	800be2a <__smakebuf_r>
 800b51e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b522:	f013 0201 	ands.w	r2, r3, #1
 800b526:	d00a      	beq.n	800b53e <__swsetup_r+0x9a>
 800b528:	2200      	movs	r2, #0
 800b52a:	60a2      	str	r2, [r4, #8]
 800b52c:	6962      	ldr	r2, [r4, #20]
 800b52e:	4252      	negs	r2, r2
 800b530:	61a2      	str	r2, [r4, #24]
 800b532:	6922      	ldr	r2, [r4, #16]
 800b534:	b942      	cbnz	r2, 800b548 <__swsetup_r+0xa4>
 800b536:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b53a:	d1c5      	bne.n	800b4c8 <__swsetup_r+0x24>
 800b53c:	bd38      	pop	{r3, r4, r5, pc}
 800b53e:	0799      	lsls	r1, r3, #30
 800b540:	bf58      	it	pl
 800b542:	6962      	ldrpl	r2, [r4, #20]
 800b544:	60a2      	str	r2, [r4, #8]
 800b546:	e7f4      	b.n	800b532 <__swsetup_r+0x8e>
 800b548:	2000      	movs	r0, #0
 800b54a:	e7f7      	b.n	800b53c <__swsetup_r+0x98>
 800b54c:	2000001c 	.word	0x2000001c

0800b550 <memset>:
 800b550:	4402      	add	r2, r0
 800b552:	4603      	mov	r3, r0
 800b554:	4293      	cmp	r3, r2
 800b556:	d100      	bne.n	800b55a <memset+0xa>
 800b558:	4770      	bx	lr
 800b55a:	f803 1b01 	strb.w	r1, [r3], #1
 800b55e:	e7f9      	b.n	800b554 <memset+0x4>

0800b560 <_close_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	2300      	movs	r3, #0
 800b564:	4d05      	ldr	r5, [pc, #20]	@ (800b57c <_close_r+0x1c>)
 800b566:	4604      	mov	r4, r0
 800b568:	4608      	mov	r0, r1
 800b56a:	602b      	str	r3, [r5, #0]
 800b56c:	f7f5 fced 	bl	8000f4a <_close>
 800b570:	1c43      	adds	r3, r0, #1
 800b572:	d102      	bne.n	800b57a <_close_r+0x1a>
 800b574:	682b      	ldr	r3, [r5, #0]
 800b576:	b103      	cbz	r3, 800b57a <_close_r+0x1a>
 800b578:	6023      	str	r3, [r4, #0]
 800b57a:	bd38      	pop	{r3, r4, r5, pc}
 800b57c:	2000174c 	.word	0x2000174c

0800b580 <_lseek_r>:
 800b580:	b538      	push	{r3, r4, r5, lr}
 800b582:	4604      	mov	r4, r0
 800b584:	4d06      	ldr	r5, [pc, #24]	@ (800b5a0 <_lseek_r+0x20>)
 800b586:	4608      	mov	r0, r1
 800b588:	4611      	mov	r1, r2
 800b58a:	2200      	movs	r2, #0
 800b58c:	602a      	str	r2, [r5, #0]
 800b58e:	461a      	mov	r2, r3
 800b590:	f7f5 fd02 	bl	8000f98 <_lseek>
 800b594:	1c43      	adds	r3, r0, #1
 800b596:	d102      	bne.n	800b59e <_lseek_r+0x1e>
 800b598:	682b      	ldr	r3, [r5, #0]
 800b59a:	b103      	cbz	r3, 800b59e <_lseek_r+0x1e>
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	bd38      	pop	{r3, r4, r5, pc}
 800b5a0:	2000174c 	.word	0x2000174c

0800b5a4 <_read_r>:
 800b5a4:	b538      	push	{r3, r4, r5, lr}
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	4d06      	ldr	r5, [pc, #24]	@ (800b5c4 <_read_r+0x20>)
 800b5aa:	4608      	mov	r0, r1
 800b5ac:	4611      	mov	r1, r2
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	602a      	str	r2, [r5, #0]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	f7f5 fc90 	bl	8000ed8 <_read>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d102      	bne.n	800b5c2 <_read_r+0x1e>
 800b5bc:	682b      	ldr	r3, [r5, #0]
 800b5be:	b103      	cbz	r3, 800b5c2 <_read_r+0x1e>
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	2000174c 	.word	0x2000174c

0800b5c8 <_write_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	4d06      	ldr	r5, [pc, #24]	@ (800b5e8 <_write_r+0x20>)
 800b5ce:	4608      	mov	r0, r1
 800b5d0:	4611      	mov	r1, r2
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	602a      	str	r2, [r5, #0]
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	f7f5 fc9b 	bl	8000f12 <_write>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d102      	bne.n	800b5e6 <_write_r+0x1e>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	b103      	cbz	r3, 800b5e6 <_write_r+0x1e>
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	2000174c 	.word	0x2000174c

0800b5ec <__errno>:
 800b5ec:	4b01      	ldr	r3, [pc, #4]	@ (800b5f4 <__errno+0x8>)
 800b5ee:	6818      	ldr	r0, [r3, #0]
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	2000001c 	.word	0x2000001c

0800b5f8 <__libc_init_array>:
 800b5f8:	b570      	push	{r4, r5, r6, lr}
 800b5fa:	4d0d      	ldr	r5, [pc, #52]	@ (800b630 <__libc_init_array+0x38>)
 800b5fc:	2600      	movs	r6, #0
 800b5fe:	4c0d      	ldr	r4, [pc, #52]	@ (800b634 <__libc_init_array+0x3c>)
 800b600:	1b64      	subs	r4, r4, r5
 800b602:	10a4      	asrs	r4, r4, #2
 800b604:	42a6      	cmp	r6, r4
 800b606:	d109      	bne.n	800b61c <__libc_init_array+0x24>
 800b608:	4d0b      	ldr	r5, [pc, #44]	@ (800b638 <__libc_init_array+0x40>)
 800b60a:	2600      	movs	r6, #0
 800b60c:	4c0b      	ldr	r4, [pc, #44]	@ (800b63c <__libc_init_array+0x44>)
 800b60e:	f000 fc89 	bl	800bf24 <_init>
 800b612:	1b64      	subs	r4, r4, r5
 800b614:	10a4      	asrs	r4, r4, #2
 800b616:	42a6      	cmp	r6, r4
 800b618:	d105      	bne.n	800b626 <__libc_init_array+0x2e>
 800b61a:	bd70      	pop	{r4, r5, r6, pc}
 800b61c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b620:	3601      	adds	r6, #1
 800b622:	4798      	blx	r3
 800b624:	e7ee      	b.n	800b604 <__libc_init_array+0xc>
 800b626:	f855 3b04 	ldr.w	r3, [r5], #4
 800b62a:	3601      	adds	r6, #1
 800b62c:	4798      	blx	r3
 800b62e:	e7f2      	b.n	800b616 <__libc_init_array+0x1e>
 800b630:	0800c150 	.word	0x0800c150
 800b634:	0800c150 	.word	0x0800c150
 800b638:	0800c150 	.word	0x0800c150
 800b63c:	0800c154 	.word	0x0800c154

0800b640 <__retarget_lock_init_recursive>:
 800b640:	4770      	bx	lr

0800b642 <__retarget_lock_acquire_recursive>:
 800b642:	4770      	bx	lr

0800b644 <__retarget_lock_release_recursive>:
 800b644:	4770      	bx	lr
	...

0800b648 <_free_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	4605      	mov	r5, r0
 800b64c:	2900      	cmp	r1, #0
 800b64e:	d041      	beq.n	800b6d4 <_free_r+0x8c>
 800b650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b654:	1f0c      	subs	r4, r1, #4
 800b656:	2b00      	cmp	r3, #0
 800b658:	bfb8      	it	lt
 800b65a:	18e4      	addlt	r4, r4, r3
 800b65c:	f000 f8e0 	bl	800b820 <__malloc_lock>
 800b660:	4a1d      	ldr	r2, [pc, #116]	@ (800b6d8 <_free_r+0x90>)
 800b662:	6813      	ldr	r3, [r2, #0]
 800b664:	b933      	cbnz	r3, 800b674 <_free_r+0x2c>
 800b666:	6063      	str	r3, [r4, #4]
 800b668:	6014      	str	r4, [r2, #0]
 800b66a:	4628      	mov	r0, r5
 800b66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b670:	f000 b8dc 	b.w	800b82c <__malloc_unlock>
 800b674:	42a3      	cmp	r3, r4
 800b676:	d908      	bls.n	800b68a <_free_r+0x42>
 800b678:	6820      	ldr	r0, [r4, #0]
 800b67a:	1821      	adds	r1, r4, r0
 800b67c:	428b      	cmp	r3, r1
 800b67e:	bf01      	itttt	eq
 800b680:	6819      	ldreq	r1, [r3, #0]
 800b682:	685b      	ldreq	r3, [r3, #4]
 800b684:	1809      	addeq	r1, r1, r0
 800b686:	6021      	streq	r1, [r4, #0]
 800b688:	e7ed      	b.n	800b666 <_free_r+0x1e>
 800b68a:	461a      	mov	r2, r3
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	b10b      	cbz	r3, 800b694 <_free_r+0x4c>
 800b690:	42a3      	cmp	r3, r4
 800b692:	d9fa      	bls.n	800b68a <_free_r+0x42>
 800b694:	6811      	ldr	r1, [r2, #0]
 800b696:	1850      	adds	r0, r2, r1
 800b698:	42a0      	cmp	r0, r4
 800b69a:	d10b      	bne.n	800b6b4 <_free_r+0x6c>
 800b69c:	6820      	ldr	r0, [r4, #0]
 800b69e:	4401      	add	r1, r0
 800b6a0:	1850      	adds	r0, r2, r1
 800b6a2:	6011      	str	r1, [r2, #0]
 800b6a4:	4283      	cmp	r3, r0
 800b6a6:	d1e0      	bne.n	800b66a <_free_r+0x22>
 800b6a8:	6818      	ldr	r0, [r3, #0]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	4408      	add	r0, r1
 800b6ae:	6053      	str	r3, [r2, #4]
 800b6b0:	6010      	str	r0, [r2, #0]
 800b6b2:	e7da      	b.n	800b66a <_free_r+0x22>
 800b6b4:	d902      	bls.n	800b6bc <_free_r+0x74>
 800b6b6:	230c      	movs	r3, #12
 800b6b8:	602b      	str	r3, [r5, #0]
 800b6ba:	e7d6      	b.n	800b66a <_free_r+0x22>
 800b6bc:	6820      	ldr	r0, [r4, #0]
 800b6be:	1821      	adds	r1, r4, r0
 800b6c0:	428b      	cmp	r3, r1
 800b6c2:	bf02      	ittt	eq
 800b6c4:	6819      	ldreq	r1, [r3, #0]
 800b6c6:	685b      	ldreq	r3, [r3, #4]
 800b6c8:	1809      	addeq	r1, r1, r0
 800b6ca:	6063      	str	r3, [r4, #4]
 800b6cc:	bf08      	it	eq
 800b6ce:	6021      	streq	r1, [r4, #0]
 800b6d0:	6054      	str	r4, [r2, #4]
 800b6d2:	e7ca      	b.n	800b66a <_free_r+0x22>
 800b6d4:	bd38      	pop	{r3, r4, r5, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20001758 	.word	0x20001758

0800b6dc <sbrk_aligned>:
 800b6dc:	b570      	push	{r4, r5, r6, lr}
 800b6de:	4e0f      	ldr	r6, [pc, #60]	@ (800b71c <sbrk_aligned+0x40>)
 800b6e0:	460c      	mov	r4, r1
 800b6e2:	4605      	mov	r5, r0
 800b6e4:	6831      	ldr	r1, [r6, #0]
 800b6e6:	b911      	cbnz	r1, 800b6ee <sbrk_aligned+0x12>
 800b6e8:	f000 fbfe 	bl	800bee8 <_sbrk_r>
 800b6ec:	6030      	str	r0, [r6, #0]
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	f000 fbf9 	bl	800bee8 <_sbrk_r>
 800b6f6:	1c43      	adds	r3, r0, #1
 800b6f8:	d103      	bne.n	800b702 <sbrk_aligned+0x26>
 800b6fa:	f04f 34ff 	mov.w	r4, #4294967295
 800b6fe:	4620      	mov	r0, r4
 800b700:	bd70      	pop	{r4, r5, r6, pc}
 800b702:	1cc4      	adds	r4, r0, #3
 800b704:	f024 0403 	bic.w	r4, r4, #3
 800b708:	42a0      	cmp	r0, r4
 800b70a:	d0f8      	beq.n	800b6fe <sbrk_aligned+0x22>
 800b70c:	1a21      	subs	r1, r4, r0
 800b70e:	4628      	mov	r0, r5
 800b710:	f000 fbea 	bl	800bee8 <_sbrk_r>
 800b714:	3001      	adds	r0, #1
 800b716:	d1f2      	bne.n	800b6fe <sbrk_aligned+0x22>
 800b718:	e7ef      	b.n	800b6fa <sbrk_aligned+0x1e>
 800b71a:	bf00      	nop
 800b71c:	20001754 	.word	0x20001754

0800b720 <_malloc_r>:
 800b720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b724:	1ccd      	adds	r5, r1, #3
 800b726:	4606      	mov	r6, r0
 800b728:	f025 0503 	bic.w	r5, r5, #3
 800b72c:	3508      	adds	r5, #8
 800b72e:	2d0c      	cmp	r5, #12
 800b730:	bf38      	it	cc
 800b732:	250c      	movcc	r5, #12
 800b734:	2d00      	cmp	r5, #0
 800b736:	db01      	blt.n	800b73c <_malloc_r+0x1c>
 800b738:	42a9      	cmp	r1, r5
 800b73a:	d904      	bls.n	800b746 <_malloc_r+0x26>
 800b73c:	230c      	movs	r3, #12
 800b73e:	6033      	str	r3, [r6, #0]
 800b740:	2000      	movs	r0, #0
 800b742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b81c <_malloc_r+0xfc>
 800b74a:	f000 f869 	bl	800b820 <__malloc_lock>
 800b74e:	f8d8 3000 	ldr.w	r3, [r8]
 800b752:	461c      	mov	r4, r3
 800b754:	bb44      	cbnz	r4, 800b7a8 <_malloc_r+0x88>
 800b756:	4629      	mov	r1, r5
 800b758:	4630      	mov	r0, r6
 800b75a:	f7ff ffbf 	bl	800b6dc <sbrk_aligned>
 800b75e:	1c43      	adds	r3, r0, #1
 800b760:	4604      	mov	r4, r0
 800b762:	d158      	bne.n	800b816 <_malloc_r+0xf6>
 800b764:	f8d8 4000 	ldr.w	r4, [r8]
 800b768:	4627      	mov	r7, r4
 800b76a:	2f00      	cmp	r7, #0
 800b76c:	d143      	bne.n	800b7f6 <_malloc_r+0xd6>
 800b76e:	2c00      	cmp	r4, #0
 800b770:	d04b      	beq.n	800b80a <_malloc_r+0xea>
 800b772:	6823      	ldr	r3, [r4, #0]
 800b774:	4639      	mov	r1, r7
 800b776:	4630      	mov	r0, r6
 800b778:	eb04 0903 	add.w	r9, r4, r3
 800b77c:	f000 fbb4 	bl	800bee8 <_sbrk_r>
 800b780:	4581      	cmp	r9, r0
 800b782:	d142      	bne.n	800b80a <_malloc_r+0xea>
 800b784:	6821      	ldr	r1, [r4, #0]
 800b786:	4630      	mov	r0, r6
 800b788:	1a6d      	subs	r5, r5, r1
 800b78a:	4629      	mov	r1, r5
 800b78c:	f7ff ffa6 	bl	800b6dc <sbrk_aligned>
 800b790:	3001      	adds	r0, #1
 800b792:	d03a      	beq.n	800b80a <_malloc_r+0xea>
 800b794:	6823      	ldr	r3, [r4, #0]
 800b796:	442b      	add	r3, r5
 800b798:	6023      	str	r3, [r4, #0]
 800b79a:	f8d8 3000 	ldr.w	r3, [r8]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	bb62      	cbnz	r2, 800b7fc <_malloc_r+0xdc>
 800b7a2:	f8c8 7000 	str.w	r7, [r8]
 800b7a6:	e00f      	b.n	800b7c8 <_malloc_r+0xa8>
 800b7a8:	6822      	ldr	r2, [r4, #0]
 800b7aa:	1b52      	subs	r2, r2, r5
 800b7ac:	d420      	bmi.n	800b7f0 <_malloc_r+0xd0>
 800b7ae:	2a0b      	cmp	r2, #11
 800b7b0:	d917      	bls.n	800b7e2 <_malloc_r+0xc2>
 800b7b2:	1961      	adds	r1, r4, r5
 800b7b4:	42a3      	cmp	r3, r4
 800b7b6:	6025      	str	r5, [r4, #0]
 800b7b8:	bf18      	it	ne
 800b7ba:	6059      	strne	r1, [r3, #4]
 800b7bc:	6863      	ldr	r3, [r4, #4]
 800b7be:	bf08      	it	eq
 800b7c0:	f8c8 1000 	streq.w	r1, [r8]
 800b7c4:	5162      	str	r2, [r4, r5]
 800b7c6:	604b      	str	r3, [r1, #4]
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f000 f82f 	bl	800b82c <__malloc_unlock>
 800b7ce:	f104 000b 	add.w	r0, r4, #11
 800b7d2:	1d23      	adds	r3, r4, #4
 800b7d4:	f020 0007 	bic.w	r0, r0, #7
 800b7d8:	1ac2      	subs	r2, r0, r3
 800b7da:	bf1c      	itt	ne
 800b7dc:	1a1b      	subne	r3, r3, r0
 800b7de:	50a3      	strne	r3, [r4, r2]
 800b7e0:	e7af      	b.n	800b742 <_malloc_r+0x22>
 800b7e2:	6862      	ldr	r2, [r4, #4]
 800b7e4:	42a3      	cmp	r3, r4
 800b7e6:	bf0c      	ite	eq
 800b7e8:	f8c8 2000 	streq.w	r2, [r8]
 800b7ec:	605a      	strne	r2, [r3, #4]
 800b7ee:	e7eb      	b.n	800b7c8 <_malloc_r+0xa8>
 800b7f0:	4623      	mov	r3, r4
 800b7f2:	6864      	ldr	r4, [r4, #4]
 800b7f4:	e7ae      	b.n	800b754 <_malloc_r+0x34>
 800b7f6:	463c      	mov	r4, r7
 800b7f8:	687f      	ldr	r7, [r7, #4]
 800b7fa:	e7b6      	b.n	800b76a <_malloc_r+0x4a>
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	42a3      	cmp	r3, r4
 800b802:	d1fb      	bne.n	800b7fc <_malloc_r+0xdc>
 800b804:	2300      	movs	r3, #0
 800b806:	6053      	str	r3, [r2, #4]
 800b808:	e7de      	b.n	800b7c8 <_malloc_r+0xa8>
 800b80a:	230c      	movs	r3, #12
 800b80c:	4630      	mov	r0, r6
 800b80e:	6033      	str	r3, [r6, #0]
 800b810:	f000 f80c 	bl	800b82c <__malloc_unlock>
 800b814:	e794      	b.n	800b740 <_malloc_r+0x20>
 800b816:	6005      	str	r5, [r0, #0]
 800b818:	e7d6      	b.n	800b7c8 <_malloc_r+0xa8>
 800b81a:	bf00      	nop
 800b81c:	20001758 	.word	0x20001758

0800b820 <__malloc_lock>:
 800b820:	4801      	ldr	r0, [pc, #4]	@ (800b828 <__malloc_lock+0x8>)
 800b822:	f7ff bf0e 	b.w	800b642 <__retarget_lock_acquire_recursive>
 800b826:	bf00      	nop
 800b828:	20001750 	.word	0x20001750

0800b82c <__malloc_unlock>:
 800b82c:	4801      	ldr	r0, [pc, #4]	@ (800b834 <__malloc_unlock+0x8>)
 800b82e:	f7ff bf09 	b.w	800b644 <__retarget_lock_release_recursive>
 800b832:	bf00      	nop
 800b834:	20001750 	.word	0x20001750

0800b838 <__sfputc_r>:
 800b838:	6893      	ldr	r3, [r2, #8]
 800b83a:	3b01      	subs	r3, #1
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	6093      	str	r3, [r2, #8]
 800b840:	b410      	push	{r4}
 800b842:	da08      	bge.n	800b856 <__sfputc_r+0x1e>
 800b844:	6994      	ldr	r4, [r2, #24]
 800b846:	42a3      	cmp	r3, r4
 800b848:	db01      	blt.n	800b84e <__sfputc_r+0x16>
 800b84a:	290a      	cmp	r1, #10
 800b84c:	d103      	bne.n	800b856 <__sfputc_r+0x1e>
 800b84e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b852:	f7ff bde8 	b.w	800b426 <__swbuf_r>
 800b856:	6813      	ldr	r3, [r2, #0]
 800b858:	1c58      	adds	r0, r3, #1
 800b85a:	6010      	str	r0, [r2, #0]
 800b85c:	4608      	mov	r0, r1
 800b85e:	7019      	strb	r1, [r3, #0]
 800b860:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <__sfputs_r>:
 800b866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b868:	4606      	mov	r6, r0
 800b86a:	460f      	mov	r7, r1
 800b86c:	4614      	mov	r4, r2
 800b86e:	18d5      	adds	r5, r2, r3
 800b870:	42ac      	cmp	r4, r5
 800b872:	d101      	bne.n	800b878 <__sfputs_r+0x12>
 800b874:	2000      	movs	r0, #0
 800b876:	e007      	b.n	800b888 <__sfputs_r+0x22>
 800b878:	463a      	mov	r2, r7
 800b87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b87e:	4630      	mov	r0, r6
 800b880:	f7ff ffda 	bl	800b838 <__sfputc_r>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d1f3      	bne.n	800b870 <__sfputs_r+0xa>
 800b888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b88c <_vfiprintf_r>:
 800b88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b890:	460d      	mov	r5, r1
 800b892:	b09d      	sub	sp, #116	@ 0x74
 800b894:	4614      	mov	r4, r2
 800b896:	4698      	mov	r8, r3
 800b898:	4606      	mov	r6, r0
 800b89a:	b118      	cbz	r0, 800b8a4 <_vfiprintf_r+0x18>
 800b89c:	6a03      	ldr	r3, [r0, #32]
 800b89e:	b90b      	cbnz	r3, 800b8a4 <_vfiprintf_r+0x18>
 800b8a0:	f7ff fcd8 	bl	800b254 <__sinit>
 800b8a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8a6:	07d9      	lsls	r1, r3, #31
 800b8a8:	d405      	bmi.n	800b8b6 <_vfiprintf_r+0x2a>
 800b8aa:	89ab      	ldrh	r3, [r5, #12]
 800b8ac:	059a      	lsls	r2, r3, #22
 800b8ae:	d402      	bmi.n	800b8b6 <_vfiprintf_r+0x2a>
 800b8b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8b2:	f7ff fec6 	bl	800b642 <__retarget_lock_acquire_recursive>
 800b8b6:	89ab      	ldrh	r3, [r5, #12]
 800b8b8:	071b      	lsls	r3, r3, #28
 800b8ba:	d501      	bpl.n	800b8c0 <_vfiprintf_r+0x34>
 800b8bc:	692b      	ldr	r3, [r5, #16]
 800b8be:	b99b      	cbnz	r3, 800b8e8 <_vfiprintf_r+0x5c>
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	4630      	mov	r0, r6
 800b8c4:	f7ff fdee 	bl	800b4a4 <__swsetup_r>
 800b8c8:	b170      	cbz	r0, 800b8e8 <_vfiprintf_r+0x5c>
 800b8ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8cc:	07dc      	lsls	r4, r3, #31
 800b8ce:	d504      	bpl.n	800b8da <_vfiprintf_r+0x4e>
 800b8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d4:	b01d      	add	sp, #116	@ 0x74
 800b8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8da:	89ab      	ldrh	r3, [r5, #12]
 800b8dc:	0598      	lsls	r0, r3, #22
 800b8de:	d4f7      	bmi.n	800b8d0 <_vfiprintf_r+0x44>
 800b8e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8e2:	f7ff feaf 	bl	800b644 <__retarget_lock_release_recursive>
 800b8e6:	e7f3      	b.n	800b8d0 <_vfiprintf_r+0x44>
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8ee:	f04f 0901 	mov.w	r9, #1
 800b8f2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800baa8 <_vfiprintf_r+0x21c>
 800b8f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8f8:	2320      	movs	r3, #32
 800b8fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b8fe:	2330      	movs	r3, #48	@ 0x30
 800b900:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b904:	4623      	mov	r3, r4
 800b906:	469a      	mov	sl, r3
 800b908:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b90c:	b10a      	cbz	r2, 800b912 <_vfiprintf_r+0x86>
 800b90e:	2a25      	cmp	r2, #37	@ 0x25
 800b910:	d1f9      	bne.n	800b906 <_vfiprintf_r+0x7a>
 800b912:	ebba 0b04 	subs.w	fp, sl, r4
 800b916:	d00b      	beq.n	800b930 <_vfiprintf_r+0xa4>
 800b918:	465b      	mov	r3, fp
 800b91a:	4622      	mov	r2, r4
 800b91c:	4629      	mov	r1, r5
 800b91e:	4630      	mov	r0, r6
 800b920:	f7ff ffa1 	bl	800b866 <__sfputs_r>
 800b924:	3001      	adds	r0, #1
 800b926:	f000 80a7 	beq.w	800ba78 <_vfiprintf_r+0x1ec>
 800b92a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b92c:	445a      	add	r2, fp
 800b92e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b930:	f89a 3000 	ldrb.w	r3, [sl]
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 809f 	beq.w	800ba78 <_vfiprintf_r+0x1ec>
 800b93a:	2300      	movs	r3, #0
 800b93c:	f04f 32ff 	mov.w	r2, #4294967295
 800b940:	f10a 0a01 	add.w	sl, sl, #1
 800b944:	9304      	str	r3, [sp, #16]
 800b946:	9307      	str	r3, [sp, #28]
 800b948:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b94c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b94e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b952:	4654      	mov	r4, sl
 800b954:	2205      	movs	r2, #5
 800b956:	4854      	ldr	r0, [pc, #336]	@ (800baa8 <_vfiprintf_r+0x21c>)
 800b958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b95c:	f000 fad4 	bl	800bf08 <memchr>
 800b960:	9a04      	ldr	r2, [sp, #16]
 800b962:	b9d8      	cbnz	r0, 800b99c <_vfiprintf_r+0x110>
 800b964:	06d1      	lsls	r1, r2, #27
 800b966:	bf44      	itt	mi
 800b968:	2320      	movmi	r3, #32
 800b96a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b96e:	0713      	lsls	r3, r2, #28
 800b970:	bf44      	itt	mi
 800b972:	232b      	movmi	r3, #43	@ 0x2b
 800b974:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b978:	f89a 3000 	ldrb.w	r3, [sl]
 800b97c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b97e:	d015      	beq.n	800b9ac <_vfiprintf_r+0x120>
 800b980:	9a07      	ldr	r2, [sp, #28]
 800b982:	4654      	mov	r4, sl
 800b984:	2000      	movs	r0, #0
 800b986:	f04f 0c0a 	mov.w	ip, #10
 800b98a:	4621      	mov	r1, r4
 800b98c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b990:	3b30      	subs	r3, #48	@ 0x30
 800b992:	2b09      	cmp	r3, #9
 800b994:	d94b      	bls.n	800ba2e <_vfiprintf_r+0x1a2>
 800b996:	b1b0      	cbz	r0, 800b9c6 <_vfiprintf_r+0x13a>
 800b998:	9207      	str	r2, [sp, #28]
 800b99a:	e014      	b.n	800b9c6 <_vfiprintf_r+0x13a>
 800b99c:	eba0 0308 	sub.w	r3, r0, r8
 800b9a0:	46a2      	mov	sl, r4
 800b9a2:	fa09 f303 	lsl.w	r3, r9, r3
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	9304      	str	r3, [sp, #16]
 800b9aa:	e7d2      	b.n	800b952 <_vfiprintf_r+0xc6>
 800b9ac:	9b03      	ldr	r3, [sp, #12]
 800b9ae:	1d19      	adds	r1, r3, #4
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	9103      	str	r1, [sp, #12]
 800b9b6:	bfbb      	ittet	lt
 800b9b8:	425b      	neglt	r3, r3
 800b9ba:	f042 0202 	orrlt.w	r2, r2, #2
 800b9be:	9307      	strge	r3, [sp, #28]
 800b9c0:	9307      	strlt	r3, [sp, #28]
 800b9c2:	bfb8      	it	lt
 800b9c4:	9204      	strlt	r2, [sp, #16]
 800b9c6:	7823      	ldrb	r3, [r4, #0]
 800b9c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9ca:	d10a      	bne.n	800b9e2 <_vfiprintf_r+0x156>
 800b9cc:	7863      	ldrb	r3, [r4, #1]
 800b9ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9d0:	d132      	bne.n	800ba38 <_vfiprintf_r+0x1ac>
 800b9d2:	9b03      	ldr	r3, [sp, #12]
 800b9d4:	3402      	adds	r4, #2
 800b9d6:	1d1a      	adds	r2, r3, #4
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b9de:	9203      	str	r2, [sp, #12]
 800b9e0:	9305      	str	r3, [sp, #20]
 800b9e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bab8 <_vfiprintf_r+0x22c>
 800b9e6:	2203      	movs	r2, #3
 800b9e8:	7821      	ldrb	r1, [r4, #0]
 800b9ea:	4650      	mov	r0, sl
 800b9ec:	f000 fa8c 	bl	800bf08 <memchr>
 800b9f0:	b138      	cbz	r0, 800ba02 <_vfiprintf_r+0x176>
 800b9f2:	eba0 000a 	sub.w	r0, r0, sl
 800b9f6:	2240      	movs	r2, #64	@ 0x40
 800b9f8:	9b04      	ldr	r3, [sp, #16]
 800b9fa:	3401      	adds	r4, #1
 800b9fc:	4082      	lsls	r2, r0
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	9304      	str	r3, [sp, #16]
 800ba02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba06:	2206      	movs	r2, #6
 800ba08:	4828      	ldr	r0, [pc, #160]	@ (800baac <_vfiprintf_r+0x220>)
 800ba0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba0e:	f000 fa7b 	bl	800bf08 <memchr>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d03f      	beq.n	800ba96 <_vfiprintf_r+0x20a>
 800ba16:	4b26      	ldr	r3, [pc, #152]	@ (800bab0 <_vfiprintf_r+0x224>)
 800ba18:	bb1b      	cbnz	r3, 800ba62 <_vfiprintf_r+0x1d6>
 800ba1a:	9b03      	ldr	r3, [sp, #12]
 800ba1c:	3307      	adds	r3, #7
 800ba1e:	f023 0307 	bic.w	r3, r3, #7
 800ba22:	3308      	adds	r3, #8
 800ba24:	9303      	str	r3, [sp, #12]
 800ba26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba28:	443b      	add	r3, r7
 800ba2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba2c:	e76a      	b.n	800b904 <_vfiprintf_r+0x78>
 800ba2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba32:	460c      	mov	r4, r1
 800ba34:	2001      	movs	r0, #1
 800ba36:	e7a8      	b.n	800b98a <_vfiprintf_r+0xfe>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	3401      	adds	r4, #1
 800ba3c:	f04f 0c0a 	mov.w	ip, #10
 800ba40:	4619      	mov	r1, r3
 800ba42:	9305      	str	r3, [sp, #20]
 800ba44:	4620      	mov	r0, r4
 800ba46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba4a:	3a30      	subs	r2, #48	@ 0x30
 800ba4c:	2a09      	cmp	r2, #9
 800ba4e:	d903      	bls.n	800ba58 <_vfiprintf_r+0x1cc>
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d0c6      	beq.n	800b9e2 <_vfiprintf_r+0x156>
 800ba54:	9105      	str	r1, [sp, #20]
 800ba56:	e7c4      	b.n	800b9e2 <_vfiprintf_r+0x156>
 800ba58:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e7f0      	b.n	800ba44 <_vfiprintf_r+0x1b8>
 800ba62:	ab03      	add	r3, sp, #12
 800ba64:	462a      	mov	r2, r5
 800ba66:	a904      	add	r1, sp, #16
 800ba68:	4630      	mov	r0, r6
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	4b11      	ldr	r3, [pc, #68]	@ (800bab4 <_vfiprintf_r+0x228>)
 800ba6e:	f3af 8000 	nop.w
 800ba72:	4607      	mov	r7, r0
 800ba74:	1c78      	adds	r0, r7, #1
 800ba76:	d1d6      	bne.n	800ba26 <_vfiprintf_r+0x19a>
 800ba78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba7a:	07d9      	lsls	r1, r3, #31
 800ba7c:	d405      	bmi.n	800ba8a <_vfiprintf_r+0x1fe>
 800ba7e:	89ab      	ldrh	r3, [r5, #12]
 800ba80:	059a      	lsls	r2, r3, #22
 800ba82:	d402      	bmi.n	800ba8a <_vfiprintf_r+0x1fe>
 800ba84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba86:	f7ff fddd 	bl	800b644 <__retarget_lock_release_recursive>
 800ba8a:	89ab      	ldrh	r3, [r5, #12]
 800ba8c:	065b      	lsls	r3, r3, #25
 800ba8e:	f53f af1f 	bmi.w	800b8d0 <_vfiprintf_r+0x44>
 800ba92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba94:	e71e      	b.n	800b8d4 <_vfiprintf_r+0x48>
 800ba96:	ab03      	add	r3, sp, #12
 800ba98:	462a      	mov	r2, r5
 800ba9a:	a904      	add	r1, sp, #16
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	4b04      	ldr	r3, [pc, #16]	@ (800bab4 <_vfiprintf_r+0x228>)
 800baa2:	f000 f87d 	bl	800bba0 <_printf_i>
 800baa6:	e7e4      	b.n	800ba72 <_vfiprintf_r+0x1e6>
 800baa8:	0800c114 	.word	0x0800c114
 800baac:	0800c11e 	.word	0x0800c11e
 800bab0:	00000000 	.word	0x00000000
 800bab4:	0800b867 	.word	0x0800b867
 800bab8:	0800c11a 	.word	0x0800c11a

0800babc <_printf_common>:
 800babc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bac0:	4616      	mov	r6, r2
 800bac2:	4698      	mov	r8, r3
 800bac4:	688a      	ldr	r2, [r1, #8]
 800bac6:	4607      	mov	r7, r0
 800bac8:	690b      	ldr	r3, [r1, #16]
 800baca:	460c      	mov	r4, r1
 800bacc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bad0:	4293      	cmp	r3, r2
 800bad2:	bfb8      	it	lt
 800bad4:	4613      	movlt	r3, r2
 800bad6:	6033      	str	r3, [r6, #0]
 800bad8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800badc:	b10a      	cbz	r2, 800bae2 <_printf_common+0x26>
 800bade:	3301      	adds	r3, #1
 800bae0:	6033      	str	r3, [r6, #0]
 800bae2:	6823      	ldr	r3, [r4, #0]
 800bae4:	0699      	lsls	r1, r3, #26
 800bae6:	bf42      	ittt	mi
 800bae8:	6833      	ldrmi	r3, [r6, #0]
 800baea:	3302      	addmi	r3, #2
 800baec:	6033      	strmi	r3, [r6, #0]
 800baee:	6825      	ldr	r5, [r4, #0]
 800baf0:	f015 0506 	ands.w	r5, r5, #6
 800baf4:	d106      	bne.n	800bb04 <_printf_common+0x48>
 800baf6:	f104 0a19 	add.w	sl, r4, #25
 800bafa:	68e3      	ldr	r3, [r4, #12]
 800bafc:	6832      	ldr	r2, [r6, #0]
 800bafe:	1a9b      	subs	r3, r3, r2
 800bb00:	42ab      	cmp	r3, r5
 800bb02:	dc2b      	bgt.n	800bb5c <_printf_common+0xa0>
 800bb04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb08:	6822      	ldr	r2, [r4, #0]
 800bb0a:	3b00      	subs	r3, #0
 800bb0c:	bf18      	it	ne
 800bb0e:	2301      	movne	r3, #1
 800bb10:	0692      	lsls	r2, r2, #26
 800bb12:	d430      	bmi.n	800bb76 <_printf_common+0xba>
 800bb14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb18:	4641      	mov	r1, r8
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	47c8      	blx	r9
 800bb1e:	3001      	adds	r0, #1
 800bb20:	d023      	beq.n	800bb6a <_printf_common+0xae>
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	341a      	adds	r4, #26
 800bb26:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800bb2a:	f003 0306 	and.w	r3, r3, #6
 800bb2e:	2b04      	cmp	r3, #4
 800bb30:	bf0a      	itet	eq
 800bb32:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800bb36:	2500      	movne	r5, #0
 800bb38:	6833      	ldreq	r3, [r6, #0]
 800bb3a:	f04f 0600 	mov.w	r6, #0
 800bb3e:	bf08      	it	eq
 800bb40:	1aed      	subeq	r5, r5, r3
 800bb42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bb46:	bf08      	it	eq
 800bb48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	bfc4      	itt	gt
 800bb50:	1a9b      	subgt	r3, r3, r2
 800bb52:	18ed      	addgt	r5, r5, r3
 800bb54:	42b5      	cmp	r5, r6
 800bb56:	d11a      	bne.n	800bb8e <_printf_common+0xd2>
 800bb58:	2000      	movs	r0, #0
 800bb5a:	e008      	b.n	800bb6e <_printf_common+0xb2>
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	4652      	mov	r2, sl
 800bb60:	4641      	mov	r1, r8
 800bb62:	4638      	mov	r0, r7
 800bb64:	47c8      	blx	r9
 800bb66:	3001      	adds	r0, #1
 800bb68:	d103      	bne.n	800bb72 <_printf_common+0xb6>
 800bb6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb72:	3501      	adds	r5, #1
 800bb74:	e7c1      	b.n	800bafa <_printf_common+0x3e>
 800bb76:	18e1      	adds	r1, r4, r3
 800bb78:	1c5a      	adds	r2, r3, #1
 800bb7a:	2030      	movs	r0, #48	@ 0x30
 800bb7c:	3302      	adds	r3, #2
 800bb7e:	4422      	add	r2, r4
 800bb80:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bb84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bb88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bb8c:	e7c2      	b.n	800bb14 <_printf_common+0x58>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	4622      	mov	r2, r4
 800bb92:	4641      	mov	r1, r8
 800bb94:	4638      	mov	r0, r7
 800bb96:	47c8      	blx	r9
 800bb98:	3001      	adds	r0, #1
 800bb9a:	d0e6      	beq.n	800bb6a <_printf_common+0xae>
 800bb9c:	3601      	adds	r6, #1
 800bb9e:	e7d9      	b.n	800bb54 <_printf_common+0x98>

0800bba0 <_printf_i>:
 800bba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bba4:	7e0f      	ldrb	r7, [r1, #24]
 800bba6:	4691      	mov	r9, r2
 800bba8:	4680      	mov	r8, r0
 800bbaa:	460c      	mov	r4, r1
 800bbac:	2f78      	cmp	r7, #120	@ 0x78
 800bbae:	469a      	mov	sl, r3
 800bbb0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bbb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bbb6:	d807      	bhi.n	800bbc8 <_printf_i+0x28>
 800bbb8:	2f62      	cmp	r7, #98	@ 0x62
 800bbba:	d80a      	bhi.n	800bbd2 <_printf_i+0x32>
 800bbbc:	2f00      	cmp	r7, #0
 800bbbe:	f000 80d2 	beq.w	800bd66 <_printf_i+0x1c6>
 800bbc2:	2f58      	cmp	r7, #88	@ 0x58
 800bbc4:	f000 80b9 	beq.w	800bd3a <_printf_i+0x19a>
 800bbc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bbd0:	e03a      	b.n	800bc48 <_printf_i+0xa8>
 800bbd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bbd6:	2b15      	cmp	r3, #21
 800bbd8:	d8f6      	bhi.n	800bbc8 <_printf_i+0x28>
 800bbda:	a101      	add	r1, pc, #4	@ (adr r1, 800bbe0 <_printf_i+0x40>)
 800bbdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbe0:	0800bc39 	.word	0x0800bc39
 800bbe4:	0800bc4d 	.word	0x0800bc4d
 800bbe8:	0800bbc9 	.word	0x0800bbc9
 800bbec:	0800bbc9 	.word	0x0800bbc9
 800bbf0:	0800bbc9 	.word	0x0800bbc9
 800bbf4:	0800bbc9 	.word	0x0800bbc9
 800bbf8:	0800bc4d 	.word	0x0800bc4d
 800bbfc:	0800bbc9 	.word	0x0800bbc9
 800bc00:	0800bbc9 	.word	0x0800bbc9
 800bc04:	0800bbc9 	.word	0x0800bbc9
 800bc08:	0800bbc9 	.word	0x0800bbc9
 800bc0c:	0800bd4d 	.word	0x0800bd4d
 800bc10:	0800bc77 	.word	0x0800bc77
 800bc14:	0800bd07 	.word	0x0800bd07
 800bc18:	0800bbc9 	.word	0x0800bbc9
 800bc1c:	0800bbc9 	.word	0x0800bbc9
 800bc20:	0800bd6f 	.word	0x0800bd6f
 800bc24:	0800bbc9 	.word	0x0800bbc9
 800bc28:	0800bc77 	.word	0x0800bc77
 800bc2c:	0800bbc9 	.word	0x0800bbc9
 800bc30:	0800bbc9 	.word	0x0800bbc9
 800bc34:	0800bd0f 	.word	0x0800bd0f
 800bc38:	6833      	ldr	r3, [r6, #0]
 800bc3a:	1d1a      	adds	r2, r3, #4
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	6032      	str	r2, [r6, #0]
 800bc40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e09d      	b.n	800bd88 <_printf_i+0x1e8>
 800bc4c:	6833      	ldr	r3, [r6, #0]
 800bc4e:	6820      	ldr	r0, [r4, #0]
 800bc50:	1d19      	adds	r1, r3, #4
 800bc52:	6031      	str	r1, [r6, #0]
 800bc54:	0606      	lsls	r6, r0, #24
 800bc56:	d501      	bpl.n	800bc5c <_printf_i+0xbc>
 800bc58:	681d      	ldr	r5, [r3, #0]
 800bc5a:	e003      	b.n	800bc64 <_printf_i+0xc4>
 800bc5c:	0645      	lsls	r5, r0, #25
 800bc5e:	d5fb      	bpl.n	800bc58 <_printf_i+0xb8>
 800bc60:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bc64:	2d00      	cmp	r5, #0
 800bc66:	da03      	bge.n	800bc70 <_printf_i+0xd0>
 800bc68:	232d      	movs	r3, #45	@ 0x2d
 800bc6a:	426d      	negs	r5, r5
 800bc6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc70:	4859      	ldr	r0, [pc, #356]	@ (800bdd8 <_printf_i+0x238>)
 800bc72:	230a      	movs	r3, #10
 800bc74:	e011      	b.n	800bc9a <_printf_i+0xfa>
 800bc76:	6821      	ldr	r1, [r4, #0]
 800bc78:	6833      	ldr	r3, [r6, #0]
 800bc7a:	0608      	lsls	r0, r1, #24
 800bc7c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc80:	d402      	bmi.n	800bc88 <_printf_i+0xe8>
 800bc82:	0649      	lsls	r1, r1, #25
 800bc84:	bf48      	it	mi
 800bc86:	b2ad      	uxthmi	r5, r5
 800bc88:	2f6f      	cmp	r7, #111	@ 0x6f
 800bc8a:	6033      	str	r3, [r6, #0]
 800bc8c:	4852      	ldr	r0, [pc, #328]	@ (800bdd8 <_printf_i+0x238>)
 800bc8e:	bf14      	ite	ne
 800bc90:	230a      	movne	r3, #10
 800bc92:	2308      	moveq	r3, #8
 800bc94:	2100      	movs	r1, #0
 800bc96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bc9a:	6866      	ldr	r6, [r4, #4]
 800bc9c:	2e00      	cmp	r6, #0
 800bc9e:	60a6      	str	r6, [r4, #8]
 800bca0:	bfa2      	ittt	ge
 800bca2:	6821      	ldrge	r1, [r4, #0]
 800bca4:	f021 0104 	bicge.w	r1, r1, #4
 800bca8:	6021      	strge	r1, [r4, #0]
 800bcaa:	b90d      	cbnz	r5, 800bcb0 <_printf_i+0x110>
 800bcac:	2e00      	cmp	r6, #0
 800bcae:	d04b      	beq.n	800bd48 <_printf_i+0x1a8>
 800bcb0:	4616      	mov	r6, r2
 800bcb2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bcb6:	fb03 5711 	mls	r7, r3, r1, r5
 800bcba:	5dc7      	ldrb	r7, [r0, r7]
 800bcbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bcc0:	462f      	mov	r7, r5
 800bcc2:	460d      	mov	r5, r1
 800bcc4:	42bb      	cmp	r3, r7
 800bcc6:	d9f4      	bls.n	800bcb2 <_printf_i+0x112>
 800bcc8:	2b08      	cmp	r3, #8
 800bcca:	d10b      	bne.n	800bce4 <_printf_i+0x144>
 800bccc:	6823      	ldr	r3, [r4, #0]
 800bcce:	07df      	lsls	r7, r3, #31
 800bcd0:	d508      	bpl.n	800bce4 <_printf_i+0x144>
 800bcd2:	6923      	ldr	r3, [r4, #16]
 800bcd4:	6861      	ldr	r1, [r4, #4]
 800bcd6:	4299      	cmp	r1, r3
 800bcd8:	bfde      	ittt	le
 800bcda:	2330      	movle	r3, #48	@ 0x30
 800bcdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bce0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bce4:	1b92      	subs	r2, r2, r6
 800bce6:	6122      	str	r2, [r4, #16]
 800bce8:	464b      	mov	r3, r9
 800bcea:	aa03      	add	r2, sp, #12
 800bcec:	4621      	mov	r1, r4
 800bcee:	4640      	mov	r0, r8
 800bcf0:	f8cd a000 	str.w	sl, [sp]
 800bcf4:	f7ff fee2 	bl	800babc <_printf_common>
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	d14a      	bne.n	800bd92 <_printf_i+0x1f2>
 800bcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bd00:	b004      	add	sp, #16
 800bd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	f043 0320 	orr.w	r3, r3, #32
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	2778      	movs	r7, #120	@ 0x78
 800bd10:	4832      	ldr	r0, [pc, #200]	@ (800bddc <_printf_i+0x23c>)
 800bd12:	6823      	ldr	r3, [r4, #0]
 800bd14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd18:	061f      	lsls	r7, r3, #24
 800bd1a:	6831      	ldr	r1, [r6, #0]
 800bd1c:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd20:	d402      	bmi.n	800bd28 <_printf_i+0x188>
 800bd22:	065f      	lsls	r7, r3, #25
 800bd24:	bf48      	it	mi
 800bd26:	b2ad      	uxthmi	r5, r5
 800bd28:	6031      	str	r1, [r6, #0]
 800bd2a:	07d9      	lsls	r1, r3, #31
 800bd2c:	bf44      	itt	mi
 800bd2e:	f043 0320 	orrmi.w	r3, r3, #32
 800bd32:	6023      	strmi	r3, [r4, #0]
 800bd34:	b11d      	cbz	r5, 800bd3e <_printf_i+0x19e>
 800bd36:	2310      	movs	r3, #16
 800bd38:	e7ac      	b.n	800bc94 <_printf_i+0xf4>
 800bd3a:	4827      	ldr	r0, [pc, #156]	@ (800bdd8 <_printf_i+0x238>)
 800bd3c:	e7e9      	b.n	800bd12 <_printf_i+0x172>
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	f023 0320 	bic.w	r3, r3, #32
 800bd44:	6023      	str	r3, [r4, #0]
 800bd46:	e7f6      	b.n	800bd36 <_printf_i+0x196>
 800bd48:	4616      	mov	r6, r2
 800bd4a:	e7bd      	b.n	800bcc8 <_printf_i+0x128>
 800bd4c:	6833      	ldr	r3, [r6, #0]
 800bd4e:	6825      	ldr	r5, [r4, #0]
 800bd50:	1d18      	adds	r0, r3, #4
 800bd52:	6961      	ldr	r1, [r4, #20]
 800bd54:	6030      	str	r0, [r6, #0]
 800bd56:	062e      	lsls	r6, r5, #24
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	d501      	bpl.n	800bd60 <_printf_i+0x1c0>
 800bd5c:	6019      	str	r1, [r3, #0]
 800bd5e:	e002      	b.n	800bd66 <_printf_i+0x1c6>
 800bd60:	0668      	lsls	r0, r5, #25
 800bd62:	d5fb      	bpl.n	800bd5c <_printf_i+0x1bc>
 800bd64:	8019      	strh	r1, [r3, #0]
 800bd66:	2300      	movs	r3, #0
 800bd68:	4616      	mov	r6, r2
 800bd6a:	6123      	str	r3, [r4, #16]
 800bd6c:	e7bc      	b.n	800bce8 <_printf_i+0x148>
 800bd6e:	6833      	ldr	r3, [r6, #0]
 800bd70:	2100      	movs	r1, #0
 800bd72:	1d1a      	adds	r2, r3, #4
 800bd74:	6032      	str	r2, [r6, #0]
 800bd76:	681e      	ldr	r6, [r3, #0]
 800bd78:	6862      	ldr	r2, [r4, #4]
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f000 f8c4 	bl	800bf08 <memchr>
 800bd80:	b108      	cbz	r0, 800bd86 <_printf_i+0x1e6>
 800bd82:	1b80      	subs	r0, r0, r6
 800bd84:	6060      	str	r0, [r4, #4]
 800bd86:	6863      	ldr	r3, [r4, #4]
 800bd88:	6123      	str	r3, [r4, #16]
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd90:	e7aa      	b.n	800bce8 <_printf_i+0x148>
 800bd92:	6923      	ldr	r3, [r4, #16]
 800bd94:	4632      	mov	r2, r6
 800bd96:	4649      	mov	r1, r9
 800bd98:	4640      	mov	r0, r8
 800bd9a:	47d0      	blx	sl
 800bd9c:	3001      	adds	r0, #1
 800bd9e:	d0ad      	beq.n	800bcfc <_printf_i+0x15c>
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	079b      	lsls	r3, r3, #30
 800bda4:	d413      	bmi.n	800bdce <_printf_i+0x22e>
 800bda6:	68e0      	ldr	r0, [r4, #12]
 800bda8:	9b03      	ldr	r3, [sp, #12]
 800bdaa:	4298      	cmp	r0, r3
 800bdac:	bfb8      	it	lt
 800bdae:	4618      	movlt	r0, r3
 800bdb0:	e7a6      	b.n	800bd00 <_printf_i+0x160>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	4632      	mov	r2, r6
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	4640      	mov	r0, r8
 800bdba:	47d0      	blx	sl
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	d09d      	beq.n	800bcfc <_printf_i+0x15c>
 800bdc0:	3501      	adds	r5, #1
 800bdc2:	68e3      	ldr	r3, [r4, #12]
 800bdc4:	9903      	ldr	r1, [sp, #12]
 800bdc6:	1a5b      	subs	r3, r3, r1
 800bdc8:	42ab      	cmp	r3, r5
 800bdca:	dcf2      	bgt.n	800bdb2 <_printf_i+0x212>
 800bdcc:	e7eb      	b.n	800bda6 <_printf_i+0x206>
 800bdce:	2500      	movs	r5, #0
 800bdd0:	f104 0619 	add.w	r6, r4, #25
 800bdd4:	e7f5      	b.n	800bdc2 <_printf_i+0x222>
 800bdd6:	bf00      	nop
 800bdd8:	0800c125 	.word	0x0800c125
 800bddc:	0800c136 	.word	0x0800c136

0800bde0 <__swhatbuf_r>:
 800bde0:	b570      	push	{r4, r5, r6, lr}
 800bde2:	460c      	mov	r4, r1
 800bde4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde8:	b096      	sub	sp, #88	@ 0x58
 800bdea:	4615      	mov	r5, r2
 800bdec:	2900      	cmp	r1, #0
 800bdee:	461e      	mov	r6, r3
 800bdf0:	da0c      	bge.n	800be0c <__swhatbuf_r+0x2c>
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bdfa:	bf14      	ite	ne
 800bdfc:	2340      	movne	r3, #64	@ 0x40
 800bdfe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be02:	2000      	movs	r0, #0
 800be04:	6031      	str	r1, [r6, #0]
 800be06:	602b      	str	r3, [r5, #0]
 800be08:	b016      	add	sp, #88	@ 0x58
 800be0a:	bd70      	pop	{r4, r5, r6, pc}
 800be0c:	466a      	mov	r2, sp
 800be0e:	f000 f849 	bl	800bea4 <_fstat_r>
 800be12:	2800      	cmp	r0, #0
 800be14:	dbed      	blt.n	800bdf2 <__swhatbuf_r+0x12>
 800be16:	9901      	ldr	r1, [sp, #4]
 800be18:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be1c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be20:	4259      	negs	r1, r3
 800be22:	4159      	adcs	r1, r3
 800be24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be28:	e7eb      	b.n	800be02 <__swhatbuf_r+0x22>

0800be2a <__smakebuf_r>:
 800be2a:	898b      	ldrh	r3, [r1, #12]
 800be2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be2e:	079d      	lsls	r5, r3, #30
 800be30:	4606      	mov	r6, r0
 800be32:	460c      	mov	r4, r1
 800be34:	d507      	bpl.n	800be46 <__smakebuf_r+0x1c>
 800be36:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be3a:	6023      	str	r3, [r4, #0]
 800be3c:	6123      	str	r3, [r4, #16]
 800be3e:	2301      	movs	r3, #1
 800be40:	6163      	str	r3, [r4, #20]
 800be42:	b003      	add	sp, #12
 800be44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be46:	ab01      	add	r3, sp, #4
 800be48:	466a      	mov	r2, sp
 800be4a:	f7ff ffc9 	bl	800bde0 <__swhatbuf_r>
 800be4e:	9f00      	ldr	r7, [sp, #0]
 800be50:	4605      	mov	r5, r0
 800be52:	4630      	mov	r0, r6
 800be54:	4639      	mov	r1, r7
 800be56:	f7ff fc63 	bl	800b720 <_malloc_r>
 800be5a:	b948      	cbnz	r0, 800be70 <__smakebuf_r+0x46>
 800be5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be60:	059a      	lsls	r2, r3, #22
 800be62:	d4ee      	bmi.n	800be42 <__smakebuf_r+0x18>
 800be64:	f023 0303 	bic.w	r3, r3, #3
 800be68:	f043 0302 	orr.w	r3, r3, #2
 800be6c:	81a3      	strh	r3, [r4, #12]
 800be6e:	e7e2      	b.n	800be36 <__smakebuf_r+0xc>
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	6020      	str	r0, [r4, #0]
 800be74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be78:	81a3      	strh	r3, [r4, #12]
 800be7a:	9b01      	ldr	r3, [sp, #4]
 800be7c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be80:	b15b      	cbz	r3, 800be9a <__smakebuf_r+0x70>
 800be82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be86:	4630      	mov	r0, r6
 800be88:	f000 f81e 	bl	800bec8 <_isatty_r>
 800be8c:	b128      	cbz	r0, 800be9a <__smakebuf_r+0x70>
 800be8e:	89a3      	ldrh	r3, [r4, #12]
 800be90:	f023 0303 	bic.w	r3, r3, #3
 800be94:	f043 0301 	orr.w	r3, r3, #1
 800be98:	81a3      	strh	r3, [r4, #12]
 800be9a:	89a3      	ldrh	r3, [r4, #12]
 800be9c:	431d      	orrs	r5, r3
 800be9e:	81a5      	strh	r5, [r4, #12]
 800bea0:	e7cf      	b.n	800be42 <__smakebuf_r+0x18>
	...

0800bea4 <_fstat_r>:
 800bea4:	b538      	push	{r3, r4, r5, lr}
 800bea6:	2300      	movs	r3, #0
 800bea8:	4d06      	ldr	r5, [pc, #24]	@ (800bec4 <_fstat_r+0x20>)
 800beaa:	4604      	mov	r4, r0
 800beac:	4608      	mov	r0, r1
 800beae:	4611      	mov	r1, r2
 800beb0:	602b      	str	r3, [r5, #0]
 800beb2:	f7f5 f856 	bl	8000f62 <_fstat>
 800beb6:	1c43      	adds	r3, r0, #1
 800beb8:	d102      	bne.n	800bec0 <_fstat_r+0x1c>
 800beba:	682b      	ldr	r3, [r5, #0]
 800bebc:	b103      	cbz	r3, 800bec0 <_fstat_r+0x1c>
 800bebe:	6023      	str	r3, [r4, #0]
 800bec0:	bd38      	pop	{r3, r4, r5, pc}
 800bec2:	bf00      	nop
 800bec4:	2000174c 	.word	0x2000174c

0800bec8 <_isatty_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	2300      	movs	r3, #0
 800becc:	4d05      	ldr	r5, [pc, #20]	@ (800bee4 <_isatty_r+0x1c>)
 800bece:	4604      	mov	r4, r0
 800bed0:	4608      	mov	r0, r1
 800bed2:	602b      	str	r3, [r5, #0]
 800bed4:	f7f5 f855 	bl	8000f82 <_isatty>
 800bed8:	1c43      	adds	r3, r0, #1
 800beda:	d102      	bne.n	800bee2 <_isatty_r+0x1a>
 800bedc:	682b      	ldr	r3, [r5, #0]
 800bede:	b103      	cbz	r3, 800bee2 <_isatty_r+0x1a>
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	bd38      	pop	{r3, r4, r5, pc}
 800bee4:	2000174c 	.word	0x2000174c

0800bee8 <_sbrk_r>:
 800bee8:	b538      	push	{r3, r4, r5, lr}
 800beea:	2300      	movs	r3, #0
 800beec:	4d05      	ldr	r5, [pc, #20]	@ (800bf04 <_sbrk_r+0x1c>)
 800beee:	4604      	mov	r4, r0
 800bef0:	4608      	mov	r0, r1
 800bef2:	602b      	str	r3, [r5, #0]
 800bef4:	f7f5 f85e 	bl	8000fb4 <_sbrk>
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	d102      	bne.n	800bf02 <_sbrk_r+0x1a>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	b103      	cbz	r3, 800bf02 <_sbrk_r+0x1a>
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
 800bf04:	2000174c 	.word	0x2000174c

0800bf08 <memchr>:
 800bf08:	b2c9      	uxtb	r1, r1
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	4402      	add	r2, r0
 800bf0e:	b510      	push	{r4, lr}
 800bf10:	4293      	cmp	r3, r2
 800bf12:	4618      	mov	r0, r3
 800bf14:	d101      	bne.n	800bf1a <memchr+0x12>
 800bf16:	2000      	movs	r0, #0
 800bf18:	e003      	b.n	800bf22 <memchr+0x1a>
 800bf1a:	7804      	ldrb	r4, [r0, #0]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	428c      	cmp	r4, r1
 800bf20:	d1f6      	bne.n	800bf10 <memchr+0x8>
 800bf22:	bd10      	pop	{r4, pc}

0800bf24 <_init>:
 800bf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf26:	bf00      	nop
 800bf28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf2a:	bc08      	pop	{r3}
 800bf2c:	469e      	mov	lr, r3
 800bf2e:	4770      	bx	lr

0800bf30 <_fini>:
 800bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf32:	bf00      	nop
 800bf34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf36:	bc08      	pop	{r3}
 800bf38:	469e      	mov	lr, r3
 800bf3a:	4770      	bx	lr
